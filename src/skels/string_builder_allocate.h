/*
 * File automatically generated by
 * gengen 1.4.3rc by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef STRING_BUILDER_ALLOCATE_GEN_CLASS_H
#define STRING_BUILDER_ALLOCATE_GEN_CLASS_H

#include <string>
#include <iostream>

using std::string;
using std::ostream;

class string_builder_allocate_gen_class
{
 protected:
  bool is_target_array;
  int num_allocable_parts;
  string target;
  string target_index;

 public:
  string_builder_allocate_gen_class() :
    is_target_array (false), num_allocable_parts (0)
  {
  }
  
  string_builder_allocate_gen_class(bool _is_target_array, int _num_allocable_parts, const string &_target, const string &_target_index) :
    is_target_array (_is_target_array), num_allocable_parts (_num_allocable_parts), target (_target), target_index (_target_index)
  {
  }

  static void
  generate_string(const string &s, ostream &stream, unsigned int indent)
  {
    if (!indent || s.find('\n') == string::npos)
      {
        stream << s;
        return;
      }

    string::size_type pos;
    string::size_type start = 0;
    string ind (indent, ' ');
    while ( (pos=s.find('\n', start)) != string::npos)
      {
        stream << s.substr (start, (pos+1)-start);
        start = pos+1;
        if (start+1 <= s.size ())
          stream << ind;
      }
    if (start+1 <= s.size ())
      stream << s.substr (start);
  }

  void set_is_target_array(bool _is_target_array)
  {
    is_target_array = _is_target_array;
  }

  void set_num_allocable_parts(int _num_allocable_parts)
  {
    num_allocable_parts = _num_allocable_parts;
  }

  void set_target(const string &_target)
  {
    target = _target;
  }

  void set_target_index(const string &_target_index)
  {
    target_index = _target_index;
  }

  void generate_string_builder_allocate(ostream &stream, unsigned int indent = 0);
  
};

#endif // STRING_BUILDER_ALLOCATE_GEN_CLASS_H
