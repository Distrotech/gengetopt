/*
 * File automatically generated by
 * gengen 1.4.3rc by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef STRING_BUILDER_PREPARE_GEN_CLASS_H
#define STRING_BUILDER_PREPARE_GEN_CLASS_H

#include <string>
#include <iostream>

using std::string;
using std::ostream;

class string_builder_prepare_gen_class
{
 protected:
  int allocable_part_index;
  bool first_part;
  bool gengetopt_localised;
  bool localised;
  bool raw_c;
  bool translator_notes;
  string value;

 public:
  string_builder_prepare_gen_class() :
    allocable_part_index (0), first_part (false), gengetopt_localised (false), localised (false), raw_c (false), translator_notes (false)
  {
  }
  
  string_builder_prepare_gen_class(int _allocable_part_index, bool _first_part, bool _gengetopt_localised, bool _localised, bool _raw_c, bool _translator_notes, const string &_value) :
    allocable_part_index (_allocable_part_index), first_part (_first_part), gengetopt_localised (_gengetopt_localised), localised (_localised), raw_c (_raw_c), translator_notes (_translator_notes), value (_value)
  {
  }

  static void
  generate_string(const string &s, ostream &stream, unsigned int indent)
  {
    if (!indent || s.find('\n') == string::npos)
      {
        stream << s;
        return;
      }

    string::size_type pos;
    string::size_type start = 0;
    string ind (indent, ' ');
    while ( (pos=s.find('\n', start)) != string::npos)
      {
        stream << s.substr (start, (pos+1)-start);
        start = pos+1;
        if (start+1 <= s.size ())
          stream << ind;
      }
    if (start+1 <= s.size ())
      stream << s.substr (start);
  }

  void set_allocable_part_index(int _allocable_part_index)
  {
    allocable_part_index = _allocable_part_index;
  }

  void set_first_part(bool _first_part)
  {
    first_part = _first_part;
  }

  void set_gengetopt_localised(bool _gengetopt_localised)
  {
    gengetopt_localised = _gengetopt_localised;
  }

  void set_localised(bool _localised)
  {
    localised = _localised;
  }

  void set_raw_c(bool _raw_c)
  {
    raw_c = _raw_c;
  }

  void set_translator_notes(bool _translator_notes)
  {
    translator_notes = _translator_notes;
  }

  void set_value(const string &_value)
  {
    value = _value;
  }

  void generate_string_builder_prepare(ostream &stream, unsigned int indent = 0);
  
};

#endif // STRING_BUILDER_PREPARE_GEN_CLASS_H
