/* cmdline.h */

/* File autogenerated by gengetopt version 2.19rc  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "gengetopt"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION VERSION
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  char * input_arg;	/* input file (default std input).  */
  char * input_orig;	/* input file (default std input) original value given at command line.  */
  const char *input_help; /* input file (default std input) help description.  */
  char * func_name_arg;	/* name of generated function (default='cmdline_parser').  */
  char * func_name_orig;	/* name of generated function original value given at command line.  */
  const char *func_name_help; /* name of generated function help description.  */
  char * arg_struct_name_arg;	/* name of generated args info struct (default='gengetopt_args_info').  */
  char * arg_struct_name_orig;	/* name of generated args info struct original value given at command line.  */
  const char *arg_struct_name_help; /* name of generated args info struct help description.  */
  char * file_name_arg;	/* name of generated file (default='cmdline').  */
  char * file_name_orig;	/* name of generated file original value given at command line.  */
  const char *file_name_help; /* name of generated file help description.  */
  char * output_dir_arg;	/* output directory.  */
  char * output_dir_orig;	/* output directory original value given at command line.  */
  const char *output_dir_help; /* output directory help description.  */
  char * c_extension_arg;	/* extension of c file (default='c').  */
  char * c_extension_orig;	/* extension of c file original value given at command line.  */
  const char *c_extension_help; /* extension of c file help description.  */
  char * header_extension_arg;	/* extension of header file (default='h').  */
  char * header_extension_orig;	/* extension of header file original value given at command line.  */
  const char *header_extension_help; /* extension of header file help description.  */
  const char *long_help_help; /* long usage line in help help description.  */
  char * unamed_opts_arg;	/* accept options without names (e.g., file names) (default='FILES').  */
  char * unamed_opts_orig;	/* accept options without names (e.g., file names) original value given at command line.  */
  const char *unamed_opts_help; /* accept options without names (e.g., file names) help description.  */
  const char *conf_parser_help; /* generate a config file parser help description.  */
  const char *string_parser_help; /* generate a string parser (the string contains the command line) help description.  */
  const char *include_getopt_help; /* adds the code for getopt_long in the generated C file help description.  */
  const char *no_handle_help_help; /* do not handle --help|-h automatically help description.  */
  const char *no_handle_version_help; /* do not handle --version|-V automatically help description.  */
  const char *no_handle_error_help; /* do not exit on errors help description.  */
  char * show_required_arg;	/* in the output of help will specify which options are mandatory, by using the optional passed string (default='(mandatory)').  */
  char * show_required_orig;	/* in the output of help will specify which options are mandatory, by using the optional passed string original value given at command line.  */
  const char *show_required_help; /* in the output of help will specify which options are mandatory, by using the optional passed string help description.  */
  int gen_version_flag;	/* put gengetopt version in the generated file (default=on).  */
  const char *gen_version_help; /* put gengetopt version in the generated file help description.  */
  char * set_package_arg;	/* set the package name (override package defined in the .ggo file).  */
  char * set_package_orig;	/* set the package name (override package defined in the .ggo file) original value given at command line.  */
  const char *set_package_help; /* set the package name (override package defined in the .ggo file) help description.  */
  char * set_version_arg;	/* set the version number (override version defined in the .ggo file).  */
  char * set_version_orig;	/* set the version number (override version defined in the .ggo file) original value given at command line.  */
  const char *set_version_help; /* set the version number (override version defined in the .ggo file) help description.  */
  const char *show_help_help; /* show the output of --help instead of generating code help description.  */
  const char *show_full_help_help; /* show the output of --help (including hidden options) instead of generating code help description.  */
  const char *show_version_help; /* show the output of --version instead of generating code help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int input_given ;	/* Whether input was given.  */
  int func_name_given ;	/* Whether func-name was given.  */
  int arg_struct_name_given ;	/* Whether arg-struct-name was given.  */
  int file_name_given ;	/* Whether file-name was given.  */
  int output_dir_given ;	/* Whether output-dir was given.  */
  int c_extension_given ;	/* Whether c-extension was given.  */
  int header_extension_given ;	/* Whether header-extension was given.  */
  int long_help_given ;	/* Whether long-help was given.  */
  int unamed_opts_given ;	/* Whether unamed-opts was given.  */
  int conf_parser_given ;	/* Whether conf-parser was given.  */
  int string_parser_given ;	/* Whether string-parser was given.  */
  int include_getopt_given ;	/* Whether include-getopt was given.  */
  int no_handle_help_given ;	/* Whether no-handle-help was given.  */
  int no_handle_version_given ;	/* Whether no-handle-version was given.  */
  int no_handle_error_given ;	/* Whether no-handle-error was given.  */
  int show_required_given ;	/* Whether show-required was given.  */
  int gen_version_given ;	/* Whether gen-version was given.  */
  int set_package_given ;	/* Whether set-package was given.  */
  int set_version_given ;	/* Whether set-version was given.  */
  int show_help_given ;	/* Whether show-help was given.  */
  int show_full_help_given ;	/* Whether show-full-help was given.  */
  int show_version_given ;	/* Whether show-version was given.  */

} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_string (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name);
int cmdline_parser_string2 (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
