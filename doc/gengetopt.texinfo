\input texinfo.tex      @c -*-texinfo-*-*

@c Copyright (C) 2001-2005  Free Software Foundation, Inc.
@c
@c This file is part of GNU gengetopt 
@c
@c GNU gengetopt is free software; you can redistribute it and/or modify 
@c it under the terms of the GNU General Public License as published by 
@c the Free Software Foundation; either version 2, or (at your option) 
@c any later version. 
@c
@c GNU gengetopt is distributed in the hope that it will be useful, but 
@c WITHOUT ANY WARRANTY; without even the implied warranty of 
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
@c Public License for more details. 
@c
@c You should have received a copy of the GNU General Public License along 
@c with gengetopt; see the file COPYING. If not, write to the Free Software 
@c Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. 

@c %**start of header
@setfilename gengetopt.info
@include version.texi
@settitle GNU Gengetopt @value{VERSION}
@finalout
@c @setchapternewpage odd
@c %**end of header

@set myhomepage @uref{http://www.lorenzobettini.it}

@ifinfo
This file documents GNU Gengetopt, a tool to write option parsers for C programs.

This edition is for Gengetopt version @value{VERSION}.

Copyright @copyright{} 2001-2005 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end ifinfo

@c @shorttitlepage Gengetopt

@titlepage
@title GNU Gengetopt
@subtitle An command line option parser generator
@subtitle for GNU Gengetopt version @value{VERSION}
@subtitle updated on @value{UPDATED-MONTH}

@author Lorenzo Bettini

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2005 Free Software Foundation, Inc.

This is Edition @value{EDITION} of the Gengetopt manual.

It documents GNU Gengetopt version @value{VERSION}.

@c I don't think FSF will be printing this anytime soon :-)
@c Published by the Free Software Foundation @*
@c 59 Temple Place Suite 330 @*
@c Boston, MA 02111-1307 @*
@c USA @*
@c ISBN ...

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end titlepage

@ifnottex
@node Top, Audience, (dir), (dir)
@top Gengetopt

Gengetopt is a tool to write option parsing code for C programs.

This is Edition @value{EDITION} of the Gengetopt manual.

It documents GNU Gengetopt version @value{VERSION}.
@end ifnottex

@menu
* Audience::                    What is gengetopt and who it is for.
* Copying::                     Your rights.
* Installation::                Download and Installation
* Basic Usage::                 How to run Gengetopt; syntax of .ggo files
* Invoking gengetopt::          gengetopt command line options
* Terminology::                 Definitions of options, values, and so forth.
* Group options::               Mutual exclusive options
* Configuration files::         Parsing a configuration file
* Multiple Options::            Multiple options
* No getopt_long::              What if getopt_long is not available?
* Bugs::                        What is lame and/or buggy in Gengetopt @value{VERSION}
* Mailing Lists::               For discussions and announces
* Index::                       Index.
@end menu

@node Audience, Copying, Top, Top
@unnumbered Audience
@cindex Audience
@cindex Who should use Gengetopt

Gengetopt is a tool to generate C code to parse the command line
arguments @code{argc} and @code{argv} that are part of every C or C++
program.  The generated code uses the C library function
@code{getopt_long} to perform the actual command line parsing.

This manual is written for C and C++ programmers, specifically the
@emph{lazy} ones.  If you've written any non-trivial C program, you've
had to deal with argument parsing.  It isn't particularly difficult, nor
is it particularly exciting.  It @emph{is} one of the classic
programming nuisances, which is why most books on programming leave it
as an exercise for the reader.  Gengetopt can save you from this work,
leaving you free to focus on the interesting parts of your program.

Thus your program will be able to handle command line options such as: 

@example
myprog --input foo.c -o foo.o --no-tabs -i 100 *.class
@end example

And both long options (those that start with @code{--}) and short
options (start with @code{-} and consist of only one character) can be
handled (see @ref{Terminology} for further details). For standards about
short and long options you may want to take a look at the GNU Coding
Standards (@uref{http://www.gnu.org/prep/standards_toc.html}).

Gengetopt can also generate a function to save the command line options
into a file (see @ref{Basic Usage}), and a function to read the command
line options from a  file (see @ref{Configuration files}).  Of course,
these two kinds of files are compliant.

@node Copying, Installation, Audience, Top
@unnumbered Gengetopt Copying Conditions
@cindex Copying conditions
@cindex Conditions for copying Gengetopt

Gengetopt is free software; you are free to use, share and modify it
under the terms of the GNU General Public License that accompanies this
manual.

The code that Gengetopt generates is also free software; however it is
licensed with a simple all-permissive license instead of the GPL or
LGPL.  You are free to do anything you like with the generated code,
including incorporating it into or linking it with proprietary software.

Gengetopt was originally written by Roberto Arturo Tena Sanchez.   It is
currently maintained by Lorenzo Bettini @value{myhomepage}.

A primordial version of @ref{Terminology} was written by 
Adam Greenblatt.


@node Installation, Basic Usage, Copying, Top
@chapter Installation
@cindex installation
@cindex download

See the file @file{INSTALL} for detailed building and  installation
instructions; anyway if you're used to compiling Linux software that
comes with sources you may simply follow the usual procedure, i.e. untar
the file you downloaded in a directory and then:

@example
cd <source code main directory>
./configure
make
make install
@end example

Note: unless you specify a different install directory by 
@code{--prefix} option of
configure (e.g. @code{./configure --prefix=<your home>}), 
you must be root to run @code{make install}.

Files will be installed in the following directories:

@table @code
@item executables
        @code{/prefix/bin}
@item docs
        @code{/prefix/share/doc/gengetopt}
@item examples
        @code{/prefix/share/doc/gengetopt/examples}
@item additional files           
        @code{/prefix/share/gengetopt}
@end table

Default value for prefix is @code{/usr/local} 
but you may change it with @code{--prefix}
option to configure.

@section Download
@cindex download

You can download it from GNU's ftp site:
@uref{ftp://ftp.gnu.org/gnu/gengetopt} or from one of its mirrors (see
@uref{http://www.gnu.org/prep/ftp.html}).

I do not distribute Windows binaries anymore; since, they can be easily
built by using Cygnus C/C++ compiler, available at
@uref{http://www.cygwin.com}.  However, if you don't feel like
downloading such compiler, you can request such binaries directly to me,
by e-mail (find my e-mail at my home page) and I can send them to you.

Archives are digitally signed by me (Lorenzo Bettini) with GNU gpg
(@uref{http://www.gnupg.org}). My GPG public key can be found at my home
page (@value{myhomepage}).

You can also get the patches, if they are available for a particular
release (see below for patching from a previous version).

@section Anonymous CVS Access
@cindex CVS

This project's CVS repository can be checked out through anonymous
(pserver) CVS with the following instruction set. When prompted for a
password for anoncvs, simply press the Enter key.

@example
export CVS_RSH="ssh"

cvs -z3 -d:ext:anoncvs@@savannah.gnu.org:/cvsroot/gengetopt co gengetopt 
@end example

Further instructions can be found at the address:

@uref{http://savannah.gnu.org/projects/gengetopt}.

Please notice that this way you will get the latest development sources
of Gengetopt, which may also be unstable.  This solution is the
best if you intend to correct/extend this program: you should send me
patches against the latest cvs repository sources.

If, on the contrary, you want to get the sources of a given release,
through cvs, say, e.g., version X.Y.Z, you must specify the tag
@code{rel_X_Y_Z} when you run the cvs command or the @code{cvs update}
command.

When you compile the sources that you get through the cvs repository,
before running the @code{configure} and @code{make} commands, you
should, at least the first time, run the command:

@example
sh reconf
@end example

@noindent
This will run the autotools commands in the correct order, and also copy
possibly missing files.  You should have installed recent versions of
@code{automake} and @code{autoconf} in order for this to succeed.
You will also need @code{flex} and @code{bison}.

NOTICE: This convention holds since release 2.14.


@section What you need to build gengetopt
@cindex requirements

Gengetopt has been developed under GNU/Linux, using gcc (C++),
and bison (yacc) and flex (lex), and ported under Win32 with Cygnus
C/C++compiler, available at @uref{http://www.cygwin.com}.  I used the
excellent GNU Autoconf and GNU Automake.  I also used Autotools
(@uref{ftp://ftp.ugcs.caltech.edu/pub/elef/autotools}) which creates a
starting source tree (according to GNU standards) with autoconf,
automake starting files.

Moreover @emph{Gengen}
(@uref{http://www.lorenzobettini.it/software/gengen}) is used for
automatically generating the code that generates the command line parser.

Actually, you don't need all these tools above to build source-highlight
because I provide generated sources, unless you want to develop
source-highlight.

The code generated by gengetopt relies on the @code{getopt_long}
function that is usually in the standard C library; however, there may
be some implementations of the C library that don't include it; in this
case you have to link the program that uses the file generated by
gengetopt with the files @file{getopt.c} and @file{getopt1.c} and
include @file{gnugetopt.h} in your project.  We obviously provide these
files in the utility files directory (@file{<install
prefix>/share/gengetopt}).  These files are part of the GNU C library.
You may want to take a look at @code{getopt_long} man page. 

Read also @ref{No getopt_long}, for instructions on how to check whether
getopt_long is part of the library and how to deal with their lacking
(using autoconf and automake).

@section Patching from a previous version
@cindex patching

If you downloaded a patch, say
@file{gengetopt-1.3-1.3.1-patch.gz} (i.e., the patch to go from version
1.3 to version 1.3.1), cd to the directory with sources from the
previous version (gengetopt-1.3) and type:  

@example
gunzip -cd ../gengetopt-1.3-1.3.1.patch.gz | patch -p1 
@end example

and restart the compilation process (if you had already run configure a
simple make should do).

@node Basic Usage, Invoking gengetopt, Installation, Top
@chapter Basic Usage
@cindex how to use Gengetopt
@cindex getting started with Gengetopt
@cindex tutorial

The command line options, which have to be handled by gengetopt
generated function, are specified in a file (typically with @file{.ggo}
extension). This file consist in lines of sentences with the following
formats, commands in @{@} are optional@footnote{Command lines that are
too long are split into multiple indented lines separated by a @code{\}.
Of course these commands are to be given in one line only, anyway.}:

@example
package <packname>
version <version>

option <long> <short> <desc> \
    @{argtype@} @{typestr="<type descr>"@} \
    @{values="<value1>","<value2>",...@} \
    @{default="<default value>"@} \
    @{dependon="<other option>"@} \
    @{required@} @{argoptional@} @{multiple@} \
    @{hidden@}
option <long> <short> <desc> flag <on/off>
@end example

@noindent
Where:

@table @code
@item package
@cindex package

Double quoted string.  This has the precedence over @code{PACKAGE} generated by autoconf.
 
@item version 
@cindex version 

Double quoted string.  This has the precedence over @code{VERSION} generated by autoconf.

@item purpose 
@cindex purpose 

What the program does (even on more than one line), it will be printed
with the help.  Double quoted string.

@item long 
@cindex long 

The long option, a double quoted string with upper and lower case
characters, digits, a dash (@code{-}) and a dot (@code{.}).  No spaces
allowed.  The name of the variables generated to store arguments (see
later in this section) are long options converted to be legal C variable
names.  This means that @code{.} and @code{-} are both replaced by
@code{_}.

@cindex short 
@item short 

The short option, a single upper or lower case char, or a digit.  If
a @code{-} is specified, then no short option is considered for the long
option (thus long options with no associated short options are allowed).

@cindex desc 
@item desc 

@cindex wrapping
Double quoted string with upper and lower case characters, digits, a
dash (@code{-}) and a dot (@code{.}).   The first character must not be
a space.  This description will be printed during the output of
@code{--help}.  Wrapping will be automatically performed, and @code{\n}
is interpreted as a newline request.

@cindex argtype 
@item argtype 

@code{string}, @code{int}, @code{short}, @code{long}, @code{float},
@code{double}, @code{longdouble} or @code{longlong}.  If no type is
specified the option does not accept an argument.

@cindex typestr 
@item typestr 

a description for the type of the values for the option.   This will be
used during the output of @code{--help} (e.g., @code{"filename"} instead
of simply @code{STRING}, or @code{"portnumber"} instead of simply
@code{INT}).

@cindex values
@item values
 
a list of strings containing all the possible values that can be passed
to the option.  The type is considered string and must not be specified.

@cindex default 
@item default 

an optional default value for the option.  The value must always be
specified as a double quoted string.

@cindex dependon
@item dependon

this option depends on another option (whose long name description is
specified).  If this option is given at command line but not the option
it depends on, an error will be generated.

@cindex required 
@item required 

@code{yes} or @code{no}.  This specifies whether such option must be
given at each program invocation.

@cindex argoptional 
@item argoptional 

If this flag is specified then this option has an argument that is
optional.  In this case, when you specify the argument at command line,
please use @code{=} in case you use a long option, and avoid spaces if
you use short option.  For instance, if the option with optional
argument is @code{-B|--bar}, use the following command line syntax:
@code{-B15} or @code{--bar=15}, and NOT the following one @code{-B 15}
nor @code{--bar 15}.

@cindex multiple 
@item multiple 

If this flag is specified then this option can be specified more than
once at command line; all the values for this option are stored in an
array.  See @ref{Multiple Options}.

@cindex hidden
@item hidden

If an option is ``hidden'' it will not appear in the output of
@code{--help} but it can still be specified at command
line@footnote{Since version 2.15.}.

@cindex on/off 
@item on/off 

@code{on} or @code{off}.  This is the state of the flag when the program
starts. If user specifies the option, the flag toggles.

@end table

The part that must be provided in the correct order is

@example
option <long> <short> <desc>
@end example

@noindent
while the other specifications can be given in any order@footnote{This
holds since version 2.15: in previous versions the option specifications
had to be given in a fixed order.}.  Thus, for instance

@example
option <long> <short> <desc> @{argtype@} @{typestr="<type descr>"@}
@end example

@noindent
is the same as

@example
option <long> <short> <desc> @{typestr="<type descr>"@} @{argtype@} 
@end example

Comments begins with @code{#} in any place of the line and ends in the
end of line.

Notice that the options @code{-h,--help} and @code{-V,--version} are
added automatically; however, if you specify an option yourself that has
@code{h} as short form or @code{help} as long form, then
@code{-h,--help} is not added (and you have to handle the help option
manually).  The same holds for @code{-V,--version}.

Options can be part of sections, that provide a more meaningful
descriptions of the options.  A @emph{section} can be defined with the
following syntax (the @code{sectiondesc} is optional) and all the options
following a section declaration are considered part of that sections:

@example
section "section name" @{sectiondesc="optional section description"@}
@end example

You can also specify the list of @code{values} that can be passed to an
option (in that case the option has type @code{string}).  If a value
that is not in the list is passed, an error is raised.  You can think of
such options as @emph{enumerated} options.  It is not necessary to pass
the complete value at the command line option: a non ambiguous prefix
will do.  For instance, if the accepted values are
@code{"foo","bar","foobar"}, then you can pass at the command line the
value @code{"b"} and the value @code{"bar"} will be selected, or the
value @code{"foob"} and the value @code{"foobar"} will be selected;
instead, passing the value @code{"fo"} will raise an ambiguity error.
 
Here's an example of such a file (the file is called @file{sample1.ggo})

@example
# file sample1.ggo 
option  "str-opt"     s "A string option, for a filename" \
     string typestr="filename" no 
option  "my-opt"      m "Another integer option, \
     this time the description of the \
     option should be quite long to require wrapping... possibly \
     more than one wrapping :-) especially if I\nrequire a line break" int no 
option  "int-opt"     i "A int option"         int        yes 
section "more involved options" \
     sectiondesc="the following options\nare more complex"
option  "flag-opt"    - "A flag option"        flag       off
option  "funct-opt"   F "A function option"    no 
section "last option section"
option  "long-opt"    - "A long option"        long       no 
option  "def-opt"     - "A string option with default" \
     string default="Hello" no
option  "enum-opt"    - "A string option with list of values" \
     values="foo","bar","hello","bye" default="hello" no
option  "secret"         S "hidden option will not appear in --help" \
     int no hidden
option  "dependant"      D "option that depends on str-opt" \
     int no dependon="str-opt"
@end example

The simplest way to use gengetopt is to pass this file as the standard input, i.e.: 

@example
gengetopt < sample1.ggo
@end example

By default gengetopt generates @file{cmdline.h} and @file{cmdline.c}.  Otherwise we
can specify these names with a command line option:

@example
gengetopt < sample1.ggo --file-name=cmdline1 --unamed-opts
@end example

@cindex parameter
@cindex option without name
The option @code{--unamed-opts} allows the generated command line parser
to accept also names, without an option (for instance you can pass a
file name without an option in front of it, and also use wildcards, such
as @code{*.c}, @code{foo*.?} and so on).   These are also called
@emph{parameters} (see @ref{Terminology}).  You can specify an optional
description for these additional names (default is @code{FILES}).

In @file{cmdline1.h} you'll find the generated C struct: 

@include cmdline1.h.texinfo

The @code{<option>_given} field is set to a value different from 0 when
an argument for @code{<option>} has been specified.   If the option
accepts an argument and it is not of @code{flag} type The
@code{<option>_arg} field is set to the value passed at the command
line.  The @code{<option>_arg} field has the corresponding C type
specified in the file passed to gengetopt.  The additional field
@code{<option>_orig} is always a string containing the original value
passed at the command line.  This may be different, for instance, in
case of numerical arguments: gengetopt converts the passed value (a
string) into the corresponding numerical type; due to convertions, float
representations, etc., this may not correspond exactly to the original
value passed at command line.   It can also be different when enumerated
options are used (see above): in particular the @code{<option>_arg}
field will contain a value taken from the specified list, while
@code{<option>_orig} contains the (non-ambiguous) prefix specified at
the command line.

The user can always access this original value by using
@code{<option>_orig} instead of @code{<option>_arg}, as he sees
fit@footnote{The @code{<option>_orig} was introduced in the release
2.14.}.  For instance, gengetopt itselfs uses the original value when it
saves the command line options into a file (see the @code{_file_save}
function in the following).  However, apart from very specific command
line processing, the user might hardly need the @code{<option>_orig}
field, and can be always safely use @code{<option>_arg}.

If it is of @code{flag} type, only the field @code{<option>_flag}
is generated.

Even if @code{<option>_given} is 0, the corresponding
@code{<option>_arg} is set to default value (if one has been specified
for @code{<option>}).  However, in this case, the @code{<option>_orig}
is set to @code{NULL}.

Notice that by default the generated function is called @code{cmdline_parser}
(see the command line options below, to override this name), and it
takes the arguments that main receives and a pointer to such a struct,
that it will be filled.

@code{cmdline_parser_free} can be called to deallocate memory allocated by the
parser for string and multiple options.

Notice that after calling this function, the parsing functions should
not be called anymore.

@code{cmdline_parser_init} can be called to initialize the struct (it is
not mandatory, since it is done automatically by the command line
parser).

@code{cmdline_parser_file_save}@footnote{This function was introduced in
the release 2.14.} can be used to save the command line options into a
file.  The contents of this file are consistent with the configuration
files (@ref{Configuration files}).  Notice that if an option has a
default value, this option will be saved into the file only if it was
passed explicitly at command line (or read from a configuration file),
i.e., default values will not be saved into the file.

And here's how these functions can be used inside the main program: 

@include main1.cc.texinfo

Now you can compile @file{main1.cc} and the @file{cmdline1.c} generated
by gengetopt and link all together to obtain @code{sample1} executable:

@example
gcc -c cmdline1.c
g++ -c main1.cc
g++ -o sample1 cmdline1.o main1.o
@end example

(Here we assume that @code{getopt_long} is included in the standard C library;
see @ref{Installation} and @ref{No getopt_long}).

Now let's try some tests with this program:

@example
$ ./sample1 -s "hello" --int-opt 1234
This one is from a C++ program
Try to launch me with some options
(type sample1 --help for the complete list)
For example: ./sample1 *.* --funct-opt
Here are the options you passed...
You inserted hello for --str-opt option.
This is the integer you input: 1234.
The flag is off.
Have a nice day! :-)
@end example

You can also pass many file names to the command line (this also shows
how flags work):

@example
$ ./sample1 *.h -i -100 -x
This one is from a C++ program
Try to launch me with some options
(type sample1 --help for the complete list)
For example: ./sample1 *.* --funct-opt
Here are the options you passed...
file: cmdline1.h
file: cmdline2.h
file: cmdline.h
file: getopt.h
This is the integer you input: -100.
The flag is on.
Have a nice day! :-)
@end example

And if we try to omit the @code{--int-opt} (or @code{-i}), which is
required, we get an error:

@example
$ ./sample1
This one is from a C++ program
Try to launch me with some options
(type sample1 --help for the complete list)
For example: ./sample1 *.* --funct-opt
sample1: `--int-opt' (`-i') option required!
@end example

Now, let's test the enumerated options, notice the use of a prefix for
specifying an acceptable value, and the difference between the actual
passed value and the one recorded in @code{<option>_arg}:

@example
$ ./sample1 -i 10 --enum-opt h
...
enum-opt value: hello
enum-opt (original specified) value: h
...
@end example

While the next one raises an ambiguity error (between @code{"bar"}
and @code{"bye"}):

@example
$ ./sample1 -i 10 --enum-opt h
...
./sample1: ambiguous argument, "b", for option `--enum-opt'
@end example

Here is the output of @code{--help}:

@example
sample1 2.0

Usage: sample1 -iINT|--int-opt=INT [-h|--help] [-V|--version] 
         -sfilename|--str-opt=filename -mINT|--my-opt=INT [--flag-opt] 
         [-F|--funct-opt] --long-opt=LONG --def-opt=STRING  [FILES]...

  -h, --help              Print help and exit
  -V, --version           Print version and exit
  -s, --str-opt=filename  A string option, for a filename
  -m, --my-opt=INT        Another integer option, this time the description of
                            the option should be quite long to require
                            wrapping... possibly more than one wrapping :-)
                            especially if I
                            require a line break
  -i, --int-opt=INT       A int option

more involved options:
the following options
are more complex
      --flag-opt          A flag option  (default=off)
  -F, --funct-opt         A function option

last option section:
      --long-opt=LONG     A long option
      --def-opt=STRING    A string option with default  (default=`Hello')
      --enum-opt=STRING   A string option with list of values  (possible
                            values="foo", "bar", "hello", "bye"
                            default=`hello')
  -D, --dependant=INT     option that depends on str-opt
@end example

@cindex wrapping

Notice how @code{filename} is printed instead of @code{STRING} for the option
@code{--str-opt} (since @code{typestr} was used in the @file{sample1.ggo} file) and how the
description of @code{--my-opt} is wrapped to 80 columns, and how the @code{\n} is
actually interpreted as a newline request.
 
If you're curious you may want to take a look at the generated C file @file{cmdline1.c}. 

You may find other examples in @file{/prefix/share/doc/gengetopt/examples}
or in the @file{tests} of the source tarbal.

@node Invoking gengetopt, Terminology, Basic Usage, Top
@chapter Invoking gengetopt
@cindex invoking
@cindex gengetopt options

This is the output of @code{gengetopt --help}:

@smallexample
@include help_output.texinfo
@end smallexample 

The options should be clear; in particular: 

@table @code

@item --func-name 
if no @code{--func-name} is given, @code{cmdline_parser} is taken by default;
 
@item --arg-struct-name 
allows to specify the name of the generated struct for command line
arguments (default is @code{gengetopt_args_info})
 
@item --long-help 
the ``Usage'' line reports all the options; this may be unpleasant if options are many;
 
@item --unamed-opts 
the program will accept also options without a name, which, in most
case, means that we can pass many file names to the program (see the
example in @ref{Basic Usage}, where we call @code{sample1 *.h}). You can
specify an optional description for these additional names (default is
@code{FILES}).
 
@item --no-handle-help 
@itemx --no-handle-version

if @code{--no-handle-help} (@code{--no-handle-version}) is given the
command line option @code{--help|-h} (@code{--version|-V}) is not
handled automatically, so the programmer will be able to print some
other information; then the function for printing the standard help
(version) response can be used; this function is called
@code{<parser-name>_print_help} (@code{<parser-name>_print_version}),
where @code{<parser-name>} is the name specified with @code{--func-name}
or the default, @code{cmdline_parser}.
 
@item --no-handle-error
if @code{--no-handle-error} is given, an error in the parsing does not
provoke the exit of the program; instead, since the parser function, in
case of an error, returns a value different 0, the program can print a
help message, as gengetopt itself does in case of an error (try it!).
 
@item --gen-version 
is a flag (default on) that when disabled does not put in the output
file the gengetopt version (it is useful for testing purposes).

@end table

You may have already guessed it: gengetopt uses gengetopt itself for
command line options, and its specification file is @code{cmdline.ggo}
in the source directory.   In particular the command line for gengetopt
itself is generated with the following command:

@example
gengetopt --input=cmdline.ggo --no-handle-version \
          --no-handle-help --no-handle-error
@end example

Indeed when @code{--help|-h} is passed on the command line, gengetopt will call
@code{cmdline_parser_print_help()} and then the lines for reporting bugs.  When
@code{--version|-V} is passed, it will call cmdline_parser_print_version() and
then prints a copyright.  If an error occurs it prints a message on the
screen:

@example
$ ./gengetopt --zzzz
./gengetopt: unrecognized option `--zzzz'
Run gengetopt --help to see the list of options.
@end example

@node Terminology, Group options, Invoking gengetopt, Top
@chapter Terminology
@cindex Terminology
@cindex argument, defined
@cindex option, defined
@cindex value, defined
@cindex parameter, defined
@cindex short option, defined
@cindex long option, defined
@cindex multiple option, defined
@cindex required option, defined

An @dfn{argument} is an element of the @code{argv} array passed into
your C or C++ program by your operating system.

An @dfn{option} is an argument that begins with @option{-}, 
or @option{--}.

A @dfn{value} is an argument, or part of an argument, that is associated
with a particular option (an option may also not accept any value).  For
example, in

@example
> ls --width=80
@end example

@noindent @command{ls} is called with one argument, @option{--width=80},
which is an option that has a value, @code{80}, while in

@example
> ls --width 80
@end example

@noindent @command{ls} is called with two arguments, @option{--width},
which is an option, and @code{80} which might or might not be a value.
In this case, whether the @code{80} is treated as a value associated
with the preceding @option{--width} option, or as the name of a file to
list depends on how @command{ls} parses the @option{--width} option.

The order in which options are specified is @emph{usually} unimportant:

@example
> ls -a -l
> ls -l -a
@end example

@noindent both do exactly the same thing.

An @dfn{parameter} is an argument that is not an option.  For example, in

@example
> cp --archive source dest
@end example

@noindent @command{cp} is called with three arguments, the option
@option{--archive}, the parameter @code{source}, and the parameter
@code{dest}.  Unlike options, the order in which parameters are
specified usually @emph{is} important:

@example
> cp --archive --verbose source dest
> cp --verbose --archive source dest
> cp --archive source --verbose dest
> cp --archive --verbose dest source
@end example

@noindent The first three @command{cp} commands do the same thing, but the
fourth one is completely different.

If you're new to Gengetopt, you may wish to skip the rest of this
section.  It goes into more detail about different sorts of options, and
how they are parsed.

Note that some parameters may begin with @option{-} or @option{--}.
Equivalently, not @emph{all} arguments that begin with @option{-} or
@option{--} are options.  Consider

@example
> ls -- -file
> tar -c -f - . > ../foo.tar
@end example

@noindent The @command{ls} command has two arguments; the first
argument, @option{--} is ignored by @command{ls}, but causes the
@option{-file} argument to be interpreted as a parameter.  The @command{tar}
command has four arguments.  The @option{-c} argument tells tar to
create an archive; the @option{-f} argument, which takes a value,
@code{-}, tells tar that the archive should be written onto the standard
output, and the fourth argument, @code{.}, tells tar what directories to
include in the archive.  (The remaining two items, @code{>} and
@code{../foo.tar}, tell the shell to redirect the @command{tar}
command's output to the file ../foo.tar.  The @command{tar} command
doesn't even see them.)

The GNU convention is that @option{-} by itself is always interpreted as
a value or parameter, while the first @option{--} by itself is always
ignored, but causes all subsequent arguments to be interpreted as
parameters.  Gengetopt always behaves this way.

A @dfn{short option} is an option that begins with @option{-}.  Not
including the leading dash, short options must be one character long:

@example
> ls -a -l -t --width=80
@end example

@noindent The @option{-a}, @option{-l}, and @option{-t} options are all short
options.  Multiple short options may be combined into a single
argument:

@example
> ls -alt --width=80
@end example

@noindent is equivalent to the above example.

A @dfn{long option} is an option that begins with @option{-}
or @option{--}.  Ignoring the leading punctuation, long
options may be one or more characters long:

@example
> ls --all -fs
@end example

@noindent The @command{ls} command has two arguments; the long option
@option{--all}, and the pair of short options @option{-fs}.  

Long options need not have synonymous short options; after all, complex
programs like @command{cc} have more long options than there are valid
short option characters; it wouldn't be possible to assign a short
option to each of them.  Short options are encouraged, but not required,
to have a synonymous long option.

Long options may be abbreviated, as long as the abbreviation is not
ambiguous.  Gengetopt automatically treats unambiguous abbreviations as
synonyms.  

Short options may have values just like long options, but if several
short options are grouped together into one argument, only the last one
may have a value.  Values in the same argument as a long option are
delimited by an equals sign, values in the same argument as a short
option are not:

@example
> ls --width 60  # ok, value is "60"
> ls --width=60  # ok, value is "60"
> ls -w60        # ok, value is "60"
> ls -w 60       # ok, value is "60"
> ls -w=60       # unexpected, value is "=60"
> ls -T7 -w60    # ok, value for -T is 7, value for -w is 60
> ls -T7w60      # unexpected, value for -T is "7w60", no -w at all
@end example

A @dfn{required option} must be present, otherwise  an error will be
raised.  

A @dfn{multiple option} is an option that may appear more than once on
the command line.  Gengetopt would create a tidy array for multiple
options (see @ref{Multiple Options}, for further details about dealing
with multiple options).

@node Group options, Configuration files, Terminology, Top
@chapter Group options
@cindex group options

It is also possible to group options; options belonging to a @emph{group} are
considered @emph{in mutual exclusion}.  In order to use this feature, first the
@code{group} has to be defined, and then a @code{groupoption} can be defined.  A
groupoption has basically the same syntax of a standard option, apart
that the required flag must not be specified (it would not make sense,
since the options of the same group are mutual exclusive) and the group
to which the option belongs has to be specified.

@example
defgroup "<group name>" @{groupdesc="<group description>"@} @{yes@}
groupoption <long> <short> <desc> <argtype> group="<group name>" \
     @{argoptional@} @{multiple@}
@end example

If a group is defined as required, then one (but only one) option
belonging to the group has to be specified.
 
Here's an example (taken from the test @file{test_group_cmd.ggo}):

@example 
defgroup "my grp2"
defgroup "grp1" groupdesc="an option of this group is required" yes
groupoption "opta" a "string a" group="grp1" multiple
groupoption "optA" A "string A" string group="grp1" argoptional
groupoption "optAmul" M "string M" string group="grp1" argoptional multiple
groupoption "optb" b "string b" group="grp1"
groupoption "optc" - "string c" group="my grp2"
groupoption "optd" d "string d" group="my grp2"
@end example

The group @code{grp1} is required, so either @code{--opta} or
@code{--optb} has to be specified (but only one of them).  Here's the
output of some executions:

@example 
$ ./test_groups
test_groups: 0 options of group grp1 were given. One is required
$ ./test_groups -a          OK
$ ./test_groups -a -a       OK (the same option given twice)
$ ./test_groups -a -b
test_groups: 2 options of group grp1 were given. One is required
$ ./test_groups -a -c       OK
$ ./test_groups -a --optc -d
test_groups: 2 options of group my grp2 were given. At most one is required
@end example

@node Configuration files, Multiple Options, Group options, Top
@chapter Configuration files
@cindex configuration files

It is often useful to specify command line options directly in a
configuration file, so that the value of some options are read from this
file if they are not given as command line options.  When the command
line option @code{--conf-parser} is given to gengetopt, apart from the standard
command line option parser, also this additional parser is generated
(its name is @code{<commandline_parser>_configfile}):

@example
int
<cmd_parser_name>_configfile (char * const filename,
                              struct gengetopt_args_info *args_info,
                              int override,
                              int initialize,
                              int check_required);
@end example

The parameter @code{override} tells whether the values read in the
configuration file have to override those specified at the command line.
The @code{initialize} tells whether the args_info struct has to be
initialize.

IMPORTANT: you have to explicitly set @code{initialize} to true (i.e.,
different from 0) if you call the config file parser before the standard
command line option parser, otherwise unpredictable results may show.

The @code{check_required} tells whether the check for required options
must be performed or not.
 
If you call the config file parser before the standard command line
option parser and then you want to call the standard command line parser
you MUST use this second version, passing 0 for initialized, so that
collected values from the config file are not lost:

@example
int
<cmd_parser_name>2 (int argc,
                    char * const *argv,
                    struct gengetopt_args_info *args_info,
                    int override,
                    int initialize,
                    int check_required);
@end example

Notice, that with this version you can also specify whether the options
passed at the command line must override the ones read from the config
file.  If you set @code{override} to 0, and a command line option is
given that has already been read from the config file, an error will be
raised.  Moreover, you have to specify whether the check for missing
required options must be performed or not.  This concerns also options
of a required group (@ref{Group options}).
 
If you decide not to request the check for required option, you can
test it manually, after the command line parsing returns by using the
following generated function:

@example 
int
<cmd_parser_name>_required (struct gengetopt_args_info *args_info,
                            const char *program_name);
@end example

where @code{program_name} is the name of your executable (usually you
should pass @code{argv[0]} as argument).  If the function returns a
value different from 0, then some required options are missing.  An
error has already been printed by this function.  This concerns also
options of a required group (@ref{Group options}).

The config file has the following simple syntax: lines starting with #
are considered comments and:

@example
<option_name> = @{<option_val>@} 
@end example

@noindent
or simply (if the option does not take an argument):

@example
<option_name>
@end example

@noindent
which means that @code{option_name} is given, and if it accepts an argument,
then its value is @code{option_val}.  The @code{=} is not mandatory.

For instance here's a program that uses this feature (this is the test
@file{test_conf_parser}):

@include test_conf_parser.c.texinfo

So if we use the following config file

@example
# required option
required "this is a test"
float 3.14
no-short
string another
@end example

@noindent
and we run @code{test_conf_parser} like that, we will have

@example 
./test_conf_parser -r bar -i 100 --float 2.14 --conf-file test_conf.conf 
value of required: this is a test
value of string: another
value of no-short: 1
value of int: 100
value of float: 3.140000
@end example

If, instead we call the @code{test_conf_parser_cmd_parser_configfile} with 0
for override argument, we get the following result
 
@example
value of required: bar
value of string: another
value of no-short: 1
value of int: 100
value of float: 2.140000
@end example

This second example use the second version of the command line parser:
first call the configuration file parser and then the command line
parser (the command line options will override the configuration file
options):
 
@include test_conf_parser_ov2.c.texinfo

@noindent
This is an invocation and its results:

@example 
./test_conf_parser_ov2 -r "bar" --float 2.14 -i 100
value of required: bar
value of string: another
value of no-short: 1
value of int: 100
value of float: 2.140000
@end example

@section Further details on the configuration file parser

The generated config file parser function uses the constant
@code{CONFIG_FILE_LINE_SIZE} to read each line of the configuration
file.  By default this constant is set to @code{2048} that should be
enough for most applications.  If your application uses configuration
files with lines that are longer, you can compile the generated C file
by specifying an explicit value for this constant with the @code{-D}
command line option of @code{gcc}.

@node Multiple Options, No getopt_long, Configuration files, Top
@chapter Multiple Options
@cindex multiple options

If an option is specified as @code{multiple}, then it can be specified multiple
times at command line.  In this case, say the option is called @code{foo}, the
generated @code{foo_given} field in the args structure contains the number of
times it was specified and the generated field @code{foo_arg} is an array
containing all the values that were specified for this option.
 
Notice that if a default value is specified for a multiple option, that
value is assigned to the option only if no other value is specified on
the command line (and the corresponding @code{_given} field will be set to 1),
i.e., a default value IS NOT always part of the values of a multiple
option.
 
For instance, if the gengetopt file is as follows

@example
# test options that can be given more than once
option "string"      s "string option" string no multiple
option "int"         i "int option" int no multiple
@end example

@noindent
Then the command line options can be collected like that

@example

@end example

@noindent
Then if this program is called with the following command line options

@include multiple_example.c.texinfo

@noindent
The output of the program will be
 
@example
passed string: world
passed string: hello
passed string: bar
passed string: foo
passed int: 200
passed int: 100
@end example

You can also pass arguments to a multiple option separated by commas, as in the following:

@example
./test_multiple -s"foo","bar","hello" -i100,200 -s "world"
@end example

@node No getopt_long, Bugs, Multiple Options, Top
@chapter What if getopt_long is not available?
@cindex getopt_long
@cindex automake
@cindex autoconf

If you use gengetopt to generate C functions for parsing command line
arguments you have to know that these generated functions use
@code{getopt_long} to actually read the command line and parsing it.
This function is typically part of the standard C library, but some
implementations may not include it.   But this is not a problem: we
provide C files that actually implement getopt_long function:
@file{getopt.c} @file{getopt1.c} and @file{gnugetopt.h}.   You'll find
these files in the @file{<install prefix>/share/gengetopt} directory
where @file{<install prefix>} is the one you specified during
compilation.   If no prefix had been specified, @file{/usr/local} is the
default.   If you downloaded gengetopt in binary form prefix will
probably be @file{/usr/local} or @file{/usr}.

You can rename @file{gnugetopt.h} to @file{getopt.h} and then
simply compile these files and link them to the executable
of you program.  However, if you use automake and autoconf here's a more
elegant solution: you should download the macro you find
at this URL:

@uref{http://www.gnu.org/software/ac-archive/m4source/adl_func_getopt_long.m4}

and add it to your @file{acinclude.m4}.  You can find this macro
also in the @file{acinclude.m4} in the sources of gengetopt.

This macro checks if getopt_long function is in C library;
if it is not then it adds @file{getopt.o} and @file{getopt1.o} to the objects files
that will be linked to your executable (@code{LIBOBJS}).

Then in @file{Makefile.am} of your source directory you have to add the contents
of @code{LIBOBJS} to the @code{LDADD} of the program that has to use getopt_long;
e.g., if the program @file{foo} has to use getopt_long, you have to add
the following line

@example
foo_LDADD = @@LIBOBJS@@
@end example

Now these files will be compiled and linked to your program only if
necessary.

Moreover you have to add @file{getopt.c} @file{getopt1.c} and
@file{gnugetopt.h} to your distribution.  Note that it is not necessary
to put these file names among the @code{foo_SOURCES} contents), but you have to
add @file{gnugetopt.h} to @code{EXTRA_DIST}:

@example
EXTRA_DIST = gnugetopt.h
@end example

You may want to take a look at gengetopt's @file{configure.in} and
@file{src/Makefile.am}: they both use the techniques described here.


@node Bugs, Mailing Lists, No getopt_long, Top
@chapter Known Bugs and Limitations
@cindex Known Bugs
@cindex Limits
@cindex Misfeatures

If you find a bug in @command{gengetopt}, please send electronic
mail to 

@code{bug-gengetopt at gnu dot org}

Include the version
number, which you can find by running @w{@samp{gengetopt
--version}}.  Also include in your message the output that the program
produced and the output you expected.@refill

If you have other questions, comments or suggestions about
@command{gengetopt}, contact the author via electronic mail
(find the address at @value{myhomepage}).  The author will try to help
you out, although he may not have time to fix your problems.

The list of todos in the @file{TODO}.

@node Mailing Lists, Index, Bugs, Top
@chapter Mailing Lists
@cindex mailing list

The following mailing lists are available: 

@code{help-gengetopt at gnu dot org}

@noindent
for generic discussions about the program and for asking for help about
it (open mailing list),
@uref{http://mail.gnu.org/mailman/listinfo/help-gengetopt}
 
@code{info-gengetopt at gnu dot org}

@noindent
for receiving information about new releases and features (read-only
mailing list),
@uref{http://mail.gnu.org/mailman/listinfo/info-gengetopt}.
 
If you want to subscribe to a mailing list just go to the URL and follow
the instructions, or send me an e-mail and I'll subscribe you.

@node Index,  , Mailing Lists, Top
@unnumbered Index

@printindex cp

@contents
@bye

