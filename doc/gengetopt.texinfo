\input texinfo.tex      @c -*-texinfo-*-*

@c Copyright (C) 2001-2011  Free Software Foundation, Inc.
@c
@c This file is part of GNU gengetopt 
@c
@c GNU gengetopt is free software; you can redistribute it and/or modify 
@c it under the terms of the GNU General Public License as published by 
@c the Free Software Foundation; either version 3, or (at your option) 
@c any later version. 
@c
@c GNU gengetopt is distributed in the hope that it will be useful, but 
@c WITHOUT ANY WARRANTY; without even the implied warranty of 
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
@c Public License for more details. 
@c
@c You should have received a copy of the GNU General Public License along 
@c with gengetopt; see the file COPYING. If not, see http://www.gnu.org/license


@c %**start of header
@setfilename gengetopt.info
@include version.texi
@settitle GNU Gengetopt @value{VERSION}
@finalout
@c @setchapternewpage odd
@c %**end of header

@set myhomepage @uref{http://www.lorenzobettini.it}

@copying
This manual is for GNU Gengetopt
(version @value{VERSION}, @value{UPDATED}),
a tool to write command line option parsers for C programs.

Copyright @copyright{} 2001 - 2011 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory GNU programming tools
@direntry
* Gengetopt: (gengetopt).         Create command line options parsers
@end direntry

@titlepage
@title GNU Gengetopt
@subtitle A command line option parser generator
@subtitle for GNU Gengetopt version @value{VERSION}
@subtitle updated on @value{UPDATED-MONTH}

@author Lorenzo Bettini

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Audience, (dir), (dir)
@top Gengetopt

Gengetopt is a tool to write command line option parsing code for C programs.

This is Edition @value{EDITION} of the Gengetopt manual.

This file documents GNU Gengetopt version @value{VERSION}.

@insertcopying
@end ifnottex

@c All the nodes can be updated using the EMACS command
@c texinfo-every-node-update, which is normally bound to C-c C-u C-e.
@c @node Top, Introduction, (dir), (dir)

@c All the menus can be updated with the EMACS command
@c texinfo-all-menus-update, which is normally bound to C-c C-u C-a.
@menu
* Audience::                    What is gengetopt and who it is for.
* Copying::                     Your rights.
* Installation::                Download and Installation
* Basic Usage::                 How to run Gengetopt; syntax of .ggo files
* Invoking gengetopt::          gengetopt command line options
* Terminology::                 Definitions of options, values, and so forth.
* Options with enumerated values::  Options accepting only a list of values
* Group options::               Groups of mutually exclusive options
* Mode options::                Mutually exclusive group of options
* Parser function additional parameters::  
* Configuration files::         Parsing a configuration file
* Multiple Options::            Multiple options
* String Parsers and Multiple Parsers::  Using multiple parsers in the same program
* No getopt_long::              What if getopt_long is not available?
* Bugs::                        What is lame and/or buggy in Gengetopt @value{VERSION}
* Mailing Lists::               For discussions and announces
* Index::                       Index.
@end menu

@node Audience, Copying, Top, Top
@unnumbered Audience
@cindex Audience
@cindex Who should use Gengetopt

Gengetopt is a tool to generate C code to parse the command line
arguments @code{argc} and @code{argv} that are part of every C or C++
program.  The generated code uses the C library function
@code{getopt_long} to perform the actual command line parsing.

This manual is written for C and C++ programmers, specifically the
@emph{lazy} ones.  If you've written any non-trivial C program, you've
had to deal with argument parsing.  It isn't particularly difficult, nor
is it particularly exciting.  It @emph{is} one of the classic
programming nuisances, which is why most books on programming leave it
as an exercise for the reader.  Gengetopt can save you from this work,
leaving you free to focus on the interesting parts of your program.

Thus your program will be able to handle command line options such as: 

@example
myprog --input foo.c -o foo.o --no-tabs -i 100 *.class
@end example

And both long options (those that start with @code{--}) and short
options (start with @code{-} and consist of only one character) can be
handled (see @ref{Terminology} for further details). For standards about
short and long options you may want to take a look at the GNU Coding
Standards (@uref{http://www.gnu.org/prep/standards_toc.html}).

Gengetopt can also generate a function to save the command line options
into a file (see @ref{Basic Usage}), and a function to read the command
line options from a  file (see @ref{Configuration files}).  Of course,
these two kinds of files are compliant.

Generated code works also if you use GNU Autoconf and GNU Automake and
it is documented with Doxygen comments.  In particular, 
@cindex PACKAGE
@code{PACKAGE},
@cindex PACKAGE_NAME
@code{PACKAGE_NAME} and 
@cindex VERSION
@code{VERSION} are used in the generated code
to print information.

@node Copying, Installation, Audience, Top
@unnumbered Gengetopt Copying Conditions
@cindex Copying conditions
@cindex Conditions for copying Gengetopt

Gengetopt is free software; you are free to use, share and modify it
under the terms of the GNU General Public License that accompanies this
manual.

The code that Gengetopt generates is also free software; however it is
licensed with a simple all-permissive license instead of the GPL or
LGPL.  You are free to do anything you like with the generated code,
including incorporating it into or linking it with proprietary software.

Gengetopt was originally written by Roberto Arturo Tena Sanchez.   It is
currently maintained by Lorenzo Bettini @value{myhomepage}.

A primordial version of @ref{Terminology} was written by 
Adam Greenblatt.


@node Installation, Basic Usage, Copying, Top
@chapter Installation
@cindex installation
@cindex download

See the file @file{INSTALL} for detailed building and  installation
instructions; anyway if you're used to compiling Linux software that
comes with sources you may simply follow the usual procedure, i.e. untar
the file you downloaded in a directory and then:

@example
cd <source code main directory>
./configure
make
make install
@end example

Note: unless you specify a different install directory by 
@code{--prefix} option of
configure (e.g. @code{./configure --prefix=<your home>}), 
you must be root to run @code{make install}.

Files will be installed in the following directories:

@table @code
@item executables
        @code{/prefix/bin}
@item docs
        @code{/prefix/share/doc/gengetopt}
@item examples
        @code{/prefix/share/doc/gengetopt/examples}
@item additional files           
        @code{/prefix/share/gengetopt}
@end table

Default value for prefix is @code{/usr/local} 
but you may change it with @code{--prefix}
option to configure.

@section Download
@cindex download

You can download it from GNU's ftp site:
@uref{ftp://ftp.gnu.org/gnu/gengetopt} or from one of its mirrors (see
@uref{http://www.gnu.org/prep/ftp.html}).

I do not distribute Windows binaries anymore; since, they can be easily
built by using Cygnus C/C++ compiler, available at
@uref{http://www.cygwin.com}.  However, if you don't feel like
downloading such compiler, you can request such binaries directly to me,
by e-mail (find my e-mail at my home page) and I can send them to you.

Archives are digitally signed by me (Lorenzo Bettini) with GNU gpg
(@uref{http://www.gnupg.org}). My GPG public key can be found at my home
page (@value{myhomepage}).

You can also get the patches, if they are available for a particular
release (see below for patching from a previous version).

@section Anonymous Git Checkout

@cindex Git
This project's git repository can be checked out through the following
clone instruction@footnote{Since version 2.22.4 of Gengetopt the
CVS repository was dismissed in favor of Git
(@uref{http://git-scm.com/}).}:

@example
git clone git://git.savannah.gnu.org/gengetopt.git
@end example

Further instructions can be found at the address:

@uref{http://savannah.gnu.org/projects/gengetopt}.

And the git repository can also browsed on-line at

@uref{http://git.savannah.gnu.org/cgit/gengetopt.git}.

Please note that this way you will get the latest development sources
of Gengetopt, which may also be unstable.  This solution is the
best if you intend to correct/extend this program: you should send me
patches against the latest git repository sources.

If, on the contrary, you want to get the sources of a given release,
through git, say, e.g., version X.Y.Z, you must specify the tag
@code{rel_X_Y_Z}.

When you compile the sources that you get from the git repository,
before running the @code{configure} and @code{make} commands, for the
first time, you must run the command:

@example
autoreconf -i
@end example

@noindent
This will run the autotools commands in the correct order, and also copy
possibly missing files.  You should have installed recent versions of
@cindex automake
@cindex autoconf
@cindex libtool
@code{automake}, @code{autoconf} and @code{libtool} in order for this to
succeed.

@section What you need to build gengetopt
@cindex requirements

Gengetopt has been developed under GNU/Linux, using gcc (C++), and bison
(yacc) and flex (lex), and ported under Win32 with Cygnus C/C++compiler,
available at @uref{http://www.cygwin.com}.  

For developing gengetopt, I use the excellent 
@cindex automake
@cindex autoconf
@cindex libtool
GNU Autoconf@footnote{@uref{http://www.gnu.org/software/autoconf}},
GNU Automake@footnote{@uref{http://www.gnu.org/software/automake}} and
GNU Libtool@footnote{@uref{http://www.gnu.org/software/libtool}}.
@cindex gnulib
Since version 2.19 I also started to use Gnulib - The GNU Portability
Library@footnote{@uref{http://www.gnu.org/software/gnulib}}, ``a central
location for common GNU code, intended to be shared among GNU packages''
(for instance, I rely on Gnulib for checking for the presence and
correctness of @code{getopt_long} function, @ref{Use Gnulib}).

Moreover @emph{GNU Gengen}
(@uref{http://www.gnu.org/software/gengen}) is used for
automatically generating the code that generates the command line parser.

Actually, you don't need all these tools above to build gengetopt
because I provide generated sources, unless you want to develop
gengetopt.

The code generated by gengetopt relies on the @code{getopt_long}
function that is usually in the standard C library; however, there may
be some implementations of the C library that don't include it; we refer
to @ref{No getopt_long}, for instructions on how to check whether
getopt_long is part of the library and how to deal with their lacking
(using autoconf and automake).

@section Patching from a previous version
@cindex patching

If you downloaded a patch, say
@file{gengetopt-1.3-1.3.1-patch.gz} (i.e., the patch to go from version
1.3 to version 1.3.1), cd to the directory with sources from the
previous version (gengetopt-1.3) and type:  

@example
gunzip -cd ../gengetopt-1.3-1.3.1.patch.gz | patch -p1 
@end example

and restart the compilation process (if you had already run configure a
simple make should do).

@node Basic Usage, Invoking gengetopt, Installation, Top
@chapter Basic Usage
@cindex how to use Gengetopt
@cindex getting started with Gengetopt
@cindex tutorial

The command line options, which have to be handled by gengetopt
generated function, are specified in a file (typically with @file{.ggo}
extension). This file consists of sentences with the formats shown below
(these sentences are allowed to span more than one line).  Statements in
@{@} are optional (the @code{option} sentences need not to be given in
separate lines):

@example
package "<packname>"
version "<version>"
purpose "<purpose>"
usage "<usage>"
description "<description>"
versiontext "<versiontext>"

args "<command line options>"

option <long> <short> "<desc>" 
    @{details="<detailed description>"@} 
    @{argtype@} @{typestr="<type descr>"@} 
    @{values="<value1>","<value2>",...@} 
    @{default="<default value>"@} 
    @{dependon="<other option>"@} 
    @{required@} @{argoptional@} @{multiple@} 
    @{hidden@}

option <long> <short> "<desc>" flag <on/off>

section "section name" @{sectiondesc="optional section description"@}

text "a textual sentence"
@end example

@noindent
Where:

@table @code
@item package
@cindex package
@cindex PACKAGE
@cindex PACKAGE_NAME
This has the precedence over @code{PACKAGE} and
@code{PACKAGE_NAME} generated by autoconf.
This is required, unless you use autoconf.

If @code{package} is specified, then it will be used to print the
program name in the output of @code{--help} and @code{--version}, and
also when printing errors (from within the generated parser).  If it is
not specified, then @code{PACKAGE} will be used when printing errors,
and @code{PACKAGE_NAME} in the output of @code{--help} and
@code{--version}.  Note that if @code{PACKAGE_NAME} is empty, then
@code{PACKAGE} will be used also in this case.
 
@item version 
@cindex version 
@cindex VERSION

This has the precedence over @code{VERSION} generated by autoconf.
This is required, unless you use autoconf.

@item purpose 
@cindex purpose 

What the program does (even on more than one line), it will be printed
with the help, before the usage string.  Optional.

@item usage
@cindex usage

The ``Usage'' string that will be printed with the help@footnote{Since
version 2.19.}.  If not specified, it will be generated automatically.
Optional.

@item description
@cindex description

The ``Description'' string that will be printed with the
help@footnote{Since version 2.19.}, after the usage string.  Optional.

@item versiontext
@cindex versiontext

Additional information that will be printed after the program name and
version in the output of @code{--version}. This would be used, for
example, to display copyright and licensing information.

@item args
@cindex args

With @code{args}@footnote{Since version 2.18} you can specify options
that will be added to the command line options of gengetopt itself.  For
instance, if you always run gengetopt on your input file with the
options @code{--no-handle-error --string-parser -u}, you can add these
options in the input file like this:

@example
args "--no-handle-error --string-parser -u"
@end example

@noindent
and remove those recurrent options from the command line.
Optional.

@item long 
@cindex long 

The long option, a double quoted string with upper and lower case
characters, digits, a dash (@code{-}) and a dot (@code{.}).  No spaces
allowed.  The name of the variables generated to store arguments (see
later in this section) are long options converted to be legal C variable
names.  This means that @code{.} and @code{-} are both replaced by
@code{_}.

@cindex short 
@item short 

The short option, a single upper or lower case char, or a digit.  If
a @code{-} is specified, then no short option is considered for the long
option (thus long options with no associated short options are allowed).
Since version 2.22 you can also specify @code{?} as the short option.

@cindex desc 
@item desc 

@cindex wrapping
This description will be printed during the output of
@code{--help}.  Wrapping will be automatically performed.

@item details
@cindex details
@cindex @code{--detailed-help}

This is an extended description string for the option that will be
printed (after the option) during the output of
@code{--detailed-help}@footnote{Since version 2.22.}, which will be
automatically generated.  Thus, these further details will NOT be
printed with @code{--help}.  Wrapping will be automatically performed.
Optional.

Note that if @code{--strict-hidden} is used, options that are hidden
(@xref{hidden,,Hidden options}.) will not appear in the output of
@code{--detailed-help}, even if those options have details.

@cindex argtype 
@item argtype 

@code{string}, @code{int}, @code{short}, @code{long}, @code{float},
@code{double}, @code{longdouble} or @code{longlong}.  If the option is
an enumerated one (see @ref{Options with enumerated values}) the type
can also be @code{enum}.  If no type is specified the option does not
accept an argument.

@cindex typestr 
@item typestr 

a description for the type of the values for the option.   This will be
used during the output of @code{--help} (e.g., @code{"filename"} instead
of simply @code{STRING}, or @code{"portnumber"} instead of simply
@code{INT}).

@cindex values
@item values
 
a list of strings containing all the possible values that can be passed
to the option.  If not specified, the type is considered
string@footnote{Since version 2.22 the type can be specified}.  For this
kind of options, the type can also be @code{enum}.  More on this feature
can be found in @ref{Options with enumerated values}.

@cindex default 
@item default 

an optional default value for the option.  The value must always be
specified as a double quoted string.  It is possible to combine this
with the @code{multiple} flag (@ref{Multiple Options}) but only by
giving a single default value. It is not possible to specify a list of
default values.

@cindex dependon
@item dependon

this option depends on another option (whose long name description is
specified).  If this option is given at command line but not the option
it depends on, an error will be generated.

@cindex required 
@cindex optional
@cindex @code{--default-optional}
@item required 

@code{required} or @code{optional}.  This specifies whether such option
must be given at each program invocation.  These keywords were
introduced in release 2.17.  Before, you had to use the keywords
@code{yes} or @code{no}.  You can still use these keywords but their use
is not advised since they are not much explicative.

If not specified, an option is considered mandatory; if you do not want
this behavior, you can require that by default options are considered
optional, by using the command line option
@code{--default-optional}@footnote{Since version 2.20.}.

@cindex argoptional 
@item argoptional 

If this flag is specified then this option has an argument that is
optional.  In this case, when you specify the argument at command line,
please use @code{=} in case you use a long option, and avoid spaces if
you use short option.  For instance, if the option with optional
argument is @code{-B|--bar}, use the following command line syntax:
@code{-B15} or @code{--bar=15}, and NOT the following one @code{-B 15}
nor @code{--bar 15}.

By using this specification together with @code{default} you can obtain
an option that even if not explicitly specified will have the default
value, and if it is specified without an argument it will have, again,
the default value.

@cindex multiple 
@item multiple 

If this flag is specified then this option can be specified more than
once at command line; all the values for this option are stored in an
array.  You can also specify the number of occurrences that a multiple
option must be specified.  Notice that this is independent from the
@code{required} flag.  See @ref{Multiple Options}.

@cindex hidden
@cindex details
@cindex @code{--full-help}
@cindex @code{--detailed-help}
@item hidden

@anchor{hidden}
@anchor{fullhelp}

If an option is ``hidden'' it will not appear in the output of
@code{--help} but it can still be specified at command
line@footnote{Since version 2.15.}.  When hidden options are used, the
command line option @code{--full-help} will also be generated.  This
will also print hidden options@footnote{Since version 2.16.}.  Hidden
options are also displayed in the output of @code{--detailed-help}, if
it is present, along with any details that those options have.

Note that when @code{--strict-hidden} is used, hidden options do not
appear as described above, although they can still be given on the
comand line.  That is to say, the @code{--full-help} option is not
generated, and hidden options do not appear in the output of
@code{--detailed-help}, even if they have details.

@cindex on/off 
@item on/off 

@code{on} or @code{off}.  This is the state of the flag when the program
starts. If user specifies the option, the flag toggles.

@end table

For strings (delimited by @code{"}) the following convention is
adopted@footnote{This is true since version 2.19. Before this version,
strings were not allowed to spawn more than one line.}: a string
spanning more than one line will be interpreted with the corresponding
line breaks; if the line break is not desired one can use the backslash
@code{\} to break the line without inserting a line break.  A line break
in a string can also be inserted with the string @code{\n}.  Here are
some examples:

@example
"This string will be interpreted
into two lines exactly as it is"

"This string is specified with two lines \
but interpreted as specified in only one line \
i.e., without explicit line break"

"This string\nwill have a line break"
@end example

@noindent
Moreover, if the character @code{"} must be specified in the string, it
will have to be escaped with the backslash@footnote{Since version 2.19.}:

@example
"This string contains \"a quoted string\" inside"
@end example

The part that must be provided in the correct order is

@example
option <long> <short> "<desc>"
@end example

@noindent
while the other specifications can be given in any order@footnote{This
holds since version 2.15: in previous versions the option specifications
had to be given in a fixed order.}.  Thus, for instance

@example
option <long> <short> "<desc>" @{argtype@} @{typestr="<type descr>"@}
@end example

@noindent
is the same as

@example
option <long> <short> "<desc>" @{typestr="<type descr>"@} @{argtype@} 
@end example

Comments begin with @code{#} in any place (but in strings) of the line
and ends in the end of line.

@cindex @code{-h,--help}
@cindex @code{-V,--version}
@anchor{addedoptions} Notice that the options @code{-h,--help} and
@code{-V,--version} are added automatically; however, if you specify an
option yourself that has @code{h} as short form, then only @code{--help}
is added@footnote{Before version 2.22 neither @code{--help} was added
and you had to handle the help option manually}.  The same holds for
@code{-V,--version}.

@cindex @code{--full-help}
In case hidden options are used, @xref{hidden,,Hidden options}, the
command line option @code{--full-help} will also be generated.  This
will print also the hidden options@footnote{Since version 2.16.}.

Note, though, that when @code{--strict-hidden} is used, this is not
the case and @code{--full-help} is not generated.

@cindex @code{--detailed-help}
If there's at least one option with @code{details}, the command line
option @code{--detailed-help} will also be generated.  This will print
also the details for options and hidden options@footnote{Since version
2.22.} (except when @code{--strict-hidden} is used).

@cindex section
Options can be part of sections, that provide a more meaningful
descriptions of the options.  A @emph{section} can be defined with the
following syntax (the @code{sectiondesc} is optional) and all the options
following a section declaration are considered part of that sections:

@example
section "section name" @{sectiondesc="optional section description"@}
@end example

@noindent
Notice that the separation in sections is stronger than separation in
groups of mutually exclusive options (see @ref{Group options}).
Furthermore, sections should not be inserted among group options (but
only externally).  A section makes sense only if it is followed by some
options.  If you don't specify any option after a section, that section
will not be printed at all.  If you need to simply insert some text in
the output of @code{--help}, then you must use @code{text}, explained in
the next paragraph.

@cindex text
You can insert, among options, a textual string that will be printed in
the output of @code{--help}@footnote{Since version 2.18.}:

@example
text "\nA text description with possible line\nbreaks"
@end example

@noindent
Of course, you can use this mechanism even to manually insert
blank lines among options with an empty text string:

@example
text ""
@end example

You can also specify the list of @code{values} that can be passed to an
option (if the type is not specified, the option has type
@code{string}).  More on this feature can be found in @ref{Options with
enumerated values}.  If a value that is not in the list is passed, an
error is raised.  You can think of such options as @emph{enumerated}
options.  It is not necessary to pass the complete value at the command
line option: a non ambiguous prefix will do.  For instance, if the
accepted values are @code{"foo","bar","foobar"}, then you can pass at
the command line the value @code{"b"} and the value @code{"bar"} will be
selected, or the value @code{"foob"} and the value @code{"foobar"} will
be selected; instead, passing the value @code{"fo"} will raise an
ambiguity error.
 
Here's an example of such a file (the file is called @file{sample1.ggo})

@include sample1.ggo.texinfo

The simplest way to use gengetopt is to pass this file as the standard
input, i.e.:

@example
gengetopt < sample1.ggo
@end example

By default gengetopt generates @file{cmdline.h} and @file{cmdline.c}.  Otherwise we
can specify these names with a command line option:

@example
gengetopt < sample1.ggo --file-name=cmdline1 --unamed-opts
@end example

@cindex parameter
@cindex option without name
The option @code{--unamed-opts} allows the generated command line parser
to accept also names, without an option (for instance you can pass a
file name without an option in front of it, and also use wildcards, such
as @code{*.c}, @code{foo*.?} and so on).   These are also called
@emph{parameters} (see @ref{Terminology}).  You can specify an optional
description for these additional names (default is @code{FILES}).

In @file{cmdline1.h} you'll find the generated C struct: 

@include cmdline1.h.texinfo

@cindex argv
First of all, notice that the @code{argv} parameter (typically
corresponding to the homonimous argument of your program's @code{main}
function) is declared as @code{char **} and not as @code{char *const
*}@footnote{as it was up to version 2.22.2 of gengetopt.}.  Actually,
the version of @code{getopt_long} in libc uses prototypes with
@code{char *const *argv} that are incorrect because getopt_long and
getopt_long_only can permute argv; this is required for backward
compatibility (e.g., for LSB 2.0.1)@footnote{This is taken from the
comments in @file{getopt.in.h} of gnulib.}.  So, it is better to declare
@code{argv} as @code{char **} in the generated parser functions.

The @code{<option>_given} field is set to 1 when an argument for
@code{<option>} has been specified (otherwise it is 0)@footnote{Since
version 2.22 this field is of type @code{unsigned int} instead of
@code{int} for uniformity with multiple options.}.  This fields also
counts the times a multiple option is specified (see @ref{Multiple
Options}).  If the option accepts an argument and it is not of
@code{flag} type The @code{<option>_arg} field is set to the value
passed at the command line.  The @code{<option>_arg} field has the
corresponding C type specified in the file passed to gengetopt.

Notice that if an option has a default value, then the corresponding
@code{<option>_arg} will be initialized with that value but the
corresponding @code{<option>_given} will NOT be initialized to 1.  Thus,
@code{<option>_given} will effectively inform you if the user has
specified that command line option.

The additional field @code{<option>_orig} is always a string containing
the original value passed at the command line.  This may be different,
for instance, in case of numerical arguments: gengetopt converts the
passed value (a string) into the corresponding numerical type; due to
conversions, float representations, etc., this may not correspond
exactly to the original value passed at command line.   It can also be
different when enumerated options are used (see above): in particular
the @code{<option>_arg} field will contain a value taken from the
specified list, while @code{<option>_orig} contains the (non-ambiguous)
prefix specified at the command line.

The user can always access this original value by using
@code{<option>_orig} instead of @code{<option>_arg}, as he sees
fit@footnote{The @code{<option>_orig} was introduced in the release
2.14.}.  For instance, gengetopt itself uses the original value when it
saves the command line options into a file (see the @code{_file_save}
function in the following).  However, apart from very specific command
line processing, the user might hardly need the @code{<option>_orig}
field, and can be always safely use @code{<option>_arg}.

The @code{<option>_help} contains the string (concerning this very
option) that is printed when @code{--help} command line is given.

If it is of @code{flag} type, only the field @code{<option>_flag}
is generated.

The strings @code{cmdline_parser_purpose} and
@code{cmdline_parser_usage} contain the @code{purpose} as specified in
the input file and the generated ``usage'' string as printed when
@code{--help} command line is given.  Finally, the string array
@code{cmdline_parser_help} contains the strings (one for each option)
printed when @code{--help} command line is given (this array is
terminated by a null string element).  If hidden options are used also
the @code{cmdline_parser_full_help} array is available (containing also
help strings concerning hidden options).  If at least one option has
@code{details}, then the @code{cmdline_parser_detailed_help} array is
available (containing also help strings concerning hidden options and
details for options).  All these strings can be used by the programmer
to build a customized help output@footnote{These strings and the
@code{<option>_help} were introduced in the release 2.17.}.

Even if @code{<option>_given} is 0, the corresponding
@code{<option>_arg} is set to default value (if one has been specified
for @code{<option>}).  However, in this case, the @code{<option>_orig}
is set to @code{NULL}.

Notice that by default the generated function is called
@code{cmdline_parser} (see the command line options below, to override
this name), and it takes the arguments that main receives and a
pointer to such a struct, that it will be filled.  Another version,
@code{cmdline_parser2}, can be specified more arguments.  Since you
typically need this second version only in conjunction with other
``kinds'' of parsers such as configuration files and multiple parsers,
you can find more details about it in @ref{Configuration files}.

@b{IMPORTANT}: The array passed to the parser function (that in turn
is passed to @code{getopt_long} is expected to have in the first
element (of index 0) the name of the program that was invoked.  This
will be used, for instance, for printing possible errors.

@code{cmdline_parser_free} can be called to deallocate memory
allocated by the parser for string and multiple options.

@code{cmdline_parser_init} can be called to initialize the struct (it is
not mandatory, since it is done automatically by the command line
parser).

@code{cmdline_parser_file_save}@footnote{This function was introduced in
the release 2.14.} can be used to save the command line options into a
file.  The contents of this file are consistent with the configuration
files (@ref{Configuration files}).  Notice that if an option has a
default value, this option will be saved into the file only if it was
passed explicitly at command line (or read from a configuration file),
i.e., default values will not be saved into the file.  Alternatively,
you can use @code{cmdline_parser_dump}@footnote{Introduced in version
2.22, thanks to Papp Gyozo.} that takes as the first parameter an
already open stream (@code{FILE *}) instead of a file name.

And here's how these functions can be used inside the main program: 

@include main1.cc.texinfo

Now you can compile @file{main1.cc} and the @file{cmdline1.c} generated
by gengetopt and link all together to obtain @code{sample1} executable:

@example
gcc -c cmdline1.c
g++ -c main1.cc
g++ -o sample1 cmdline1.o main1.o
@end example

(Here we assume that @code{getopt_long} is included in the standard C library;
see @ref{Installation} and @ref{No getopt_long}).

Now let's try some tests with this program:

@example
$ ./sample1 -s "hello" --int-opt 1234
This one is from a C++ program
Try to launch me with some options
(type sample1 --help for the complete list)
For example: ./sample1 *.* --funct-opt
Here are the options you passed...
You inserted hello for --str-opt option.
This is the integer you input: 1234.
The flag is off.
Have a nice day! :-)
@end example

You can also pass many file names to the command line (this also shows
how flags work):

@example
$ ./sample1 *.h -i -100 -x
This one is from a C++ program
Try to launch me with some options
(type sample1 --help for the complete list)
For example: ./sample1 *.* --funct-opt
Here are the options you passed...
file: cmdline1.h
file: cmdline2.h
file: cmdline.h
file: getopt.h
This is the integer you input: -100.
The flag is on.
Have a nice day! :-)
@end example

And if we try to omit the @code{--int-opt} (or @code{-i}), which is
required, we get an error:

@example
$ ./sample1
This one is from a C++ program
Try to launch me with some options
(type sample1 --help for the complete list)
For example: ./sample1 *.* --funct-opt
sample1: `--int-opt' (`-i') option required!
@end example

Now, let's test the enumerated options, notice the use of a prefix for
specifying an acceptable value, and the difference between the actual
passed value and the one recorded in @code{<option>_arg}:

@example
$ ./sample1 -i 10 --enum-opt h
...
enum-opt value: hello
enum-opt (original specified) value: h
...
@end example

While the next one raises an ambiguity error (between @code{"bar"}
and @code{"bye"}):

@example
$ ./sample1 -i 10 --enum-opt b
...
./sample1: ambiguous argument, "b", for option `--enum-opt'
@end example

@anchor{showrequired}
@cindex @code{-h,--help}
Here is the output of @code{--help} of the parser generated from
@file{sample1.ggo} by specifying the following options to gengetopt:
@code{--long-help -u --show-required} (see @ref{Invoking gengetopt} for
further explanation for these command line options).

@anchor{helpoutput}
@example
@include sample1.output.texinfo
@end example

@cindex wrapping
Notice how @code{filename} is printed instead of @code{STRING} for the
option @code{--str-opt} (since @code{typestr} was used in the
@file{sample1.ggo} file) and how the description of @code{--my-opt} is
wrapped to 80 columns, and how the @code{\n} is actually interpreted as
a newline request.  Also the usage string is wrapped.  Moreover, since
@code{-S,--secret} is
@cindex hidden
an hidden option (@xref{hidden,,Hidden options}.) it is not printed;
@cindex @code{--full-help}
if you wanted that to be printed, you should use @code{--full-help}.
@cindex details
The option @code{--func-opt} has also the @code{details}, but they are
not printed with @code{--help}.

Finally, notice how the @code{text} strings are printed in the help
output (and the empty line after the ``more involved options'' section
achieved with an empty @code{text} string).

@cindex @code{-h,--detailed-help}
Instead, here is the output of @code{--detailed-help} of the parser
generated from @file{sample1.ggo}.  You may want to compare this output
with the one produced by @code{--help} (@xref{helpoutput,,Output of
@code{--help}}.); in particular, you may notice that the hidden option
@code{--secret} is actually printed and the details of @code{--func-opt}
are printed too:

@example
@include sample1_2.output.texinfo
@end example

If you're curious you may want to take a look at the generated C file
@file{cmdline1.c}.

You may find other examples in @file{/prefix/share/doc/gengetopt/examples}
or in the @file{tests} of the source tarbal.

@node Invoking gengetopt, Terminology, Basic Usage, Top
@chapter Invoking gengetopt
@cindex invoking
@cindex gengetopt options

This is the output of @code{gengetopt --help}:

@smallexample
@include help_output.texinfo
@end smallexample 

The options should be clear; in particular: 

@table @code

@item --func-name 
@cindex @code{--func-name}
if no @code{--func-name} is given, @code{cmdline_parser} is taken by default;

@item --output-dir
@cindex @code{--output-dir}
if no @code{--output-dir}@footnote{Since version 2.17.} is given, the
files are generated in the current directory;

@item --src-output-dir
@item --header-output-dir
@cindex @code{--src-output-dir}
@cindex @code{--header-output-dir}
With these options@footnote{Since version 2.22.3.} the generated C
file and the corresponding generated header files can be generated
in different directories;
 
@item --arg-struct-name
@cindex @code{--arg-struct-name}
allows to specify the name of the generated struct for command line
arguments (default is @code{gengetopt_args_info})
 
@item --long-help
@cindex @code{--long-help}
the ``Usage'' line reports all the options; 
this may be unpleasant if options are many;

@item --default-optional
@cindex @code{--default-optional}
If this command line option is given, by default, options are considered
optional (if not explicitly specified otherwise).  Otherwise, options
are considered mandatory (if not explicitly specified otherwise).
 
@item --unamed-opts
@cindex @code{--unamed-opts}
the program will accept also options without a name, which, in most
case, means that we can pass many file names to the program (see the
example in @ref{Basic Usage}, where we call @code{sample1 *.h}). You can
specify an optional description for these additional names (default is
@code{FILES}).
 
@item --no-handle-help
@itemx --no-handle-version
@cindex @code{--no-handle-help}
@cindex @code{--no-handle-version}
if @code{--no-handle-help} (@code{--no-handle-version}) is given the
command line option @code{--help|-h} (@code{--version|-V}) is not
handled automatically, so the programmer will be able to print some
other information; then the function for printing the standard help
(version) response can be used; this function is called
@code{<parser-name>_print_help} (@code{<parser-name>_print_version}),
where @code{<parser-name>} is the name specified with @code{--func-name}
or the default, @code{cmdline_parser}.  In case hidden options are used,
@xref{hidden,,Hidden options}, also the function
@code{<parser-name>_print_full_help} will be generated; if
@code{details} are used for at least one option, then also the function
@code{<parser-name>_print_detailed_help} will be generated.  Notice
that, although the programmer can handle these options manually, the
parser will return after finding one of these options: the other command
line options, if any, will be ignored.  In case you want to have full
control on @code{--help|-h}, @code{--version|-V}, you should use the
following options:

@item --no-help
@itemx --no-version
@cindex @code{--no-help}
@cindex @code{--no-version}
With these options@footnote{Since version 2.22.} you can disable the
automatic addition of options @code{--help|-h} and @code{--version|-V},
respectively.  The programmer will then be able to add these options in
the input file and handle them as he sees fit.  Notice that
@code{--no-help} will also disable the automatic options
@code{--detailed-help} and @code{--full-help}.  The programmer can still
define options with short character @code{h} and @code{V} as he wants,
but he cannot define options @code{help} and @code{version}, unless he
specifies @code{--no-help} and @code{--no-version}, respectively
(otherwise an error will be printed).  An example using these options
and manually handles @code{--help} and @code{--version} can be found in
@file{test_manual_help_cmd.ggo} and @file{test_manual_help.c} in the
@file{examples} directory.
 
@item --no-handle-error
@cindex @code{--no-handle-error}
if @code{--no-handle-error} is given, an error in the parsing does not
provoke the exit of the program; instead, since the parser function, in
case of an error, returns a value different 0, the program can print a
help message, as gengetopt itself does in case of an error (try it!).

@item --show-required
@cindex @code{--show-required}
if @code{--show-required} is given, possibly with
a string, in the output of @code{--help} will be made explicit
which options are actually required, @xref{showrequired,,Basic Usage}.

@item --strict-hidden
when given, this causes hidden options to become @emph{really} hidden.
That is to say, the @code{--full-help} option will not be added, and
hidden options will not show-up in the output of
@code{--detailed-help}, even if they have details.
@xref{hidden,,Hidden options}.

@item --gen-version
@cindex @code{--gen-version}
is a flag (default on) that when disabled does not put in the output
file the gengetopt version (it is useful for testing purposes).

@item --conf-parser
@cindex @code{--conf-parser}
Detailed in @ref{Configuration files}.

@item --string-parser
@cindex @code{--string-parser}
Detailed in @ref{String Parsers and Multiple Parsers}.

@item --include-getopt
@cindex @code{--include-getopt}
Adds the code for @code{getopt_long} into the generated parser C file.
This will make your generated parser much bigger, but it will be
compiled in any system, even if @code{getopt_long} is not part of the C
library where your program is being compiled.  See also @ref{No
getopt_long}.

@item --show-help
@itemx --show-full-help
@itemx --show-version
@cindex @code{--show-help}
@cindex @code{--show-full-help}
@cindex @code{--show-version}
only make gengetopt show the output of @code{--help},
@code{--full-help} and @code{--version} command lines without
generating any code, @xref{addedoptions,,Automatically added options}.
For instance, I use the @code{--show-help} option to generate a
texinfo file with the output of help (this also shows an example of
use of @code{--set-package} and @code{--set-version}):

@example
../src/gengetopt --show-help -i ../src/cmdline.ggo \
   --set-package="gengetopt" \
   --set-version="" > help_output.texinfo
@end example

@end table

You may have already guessed it: gengetopt uses gengetopt itself for
command line options, and its specification file is @code{cmdline.ggo}
in the source directory.   In particular the command line for gengetopt
itself is generated with the following command:

@example
gengetopt --input=cmdline.ggo --no-handle-version \
          --no-handle-help --no-handle-error
@end example

Indeed when @code{--help|-h} is passed on the command line, gengetopt will call
@code{cmdline_parser_print_help()} and then the lines for reporting bugs.  When
@code{--version|-V} is passed, it will call cmdline_parser_print_version() and
then prints a copyright.  If an error occurs it prints a message on the
screen:

@example
$ ./gengetopt --zzzz
./gengetopt: unrecognized option `--zzzz'
Run gengetopt --help to see the list of options.
@end example

@node Terminology, Options with enumerated values, Invoking gengetopt, Top
@chapter Terminology
@cindex Terminology
@cindex argument, defined
@cindex option, defined
@cindex value, defined
@cindex parameter, defined
@cindex short option, defined
@cindex long option, defined
@cindex multiple option, defined
@cindex required option, defined

An @dfn{argument} is an element of the @code{argv} array passed into
your C or C++ program by your operating system.

An @dfn{option} is an argument that begins with @option{-}, 
or @option{--}.

A @dfn{value} is an argument, or part of an argument, that is associated
with a particular option (an option may also not accept any value).  For
example, in

@example
> ls --width=80
@end example

@noindent @command{ls} is called with one argument, @option{--width=80},
which is an option that has a value, @code{80}, while in

@example
> ls --width 80
@end example

@noindent @command{ls} is called with two arguments, @option{--width},
which is an option, and @code{80} which might or might not be a value.
In this case, whether the @code{80} is treated as a value associated
with the preceding @option{--width} option, or as the name of a file to
list depends on how @command{ls} parses the @option{--width} option.

The order in which options are specified is @emph{usually} unimportant:

@example
> ls -a -l
> ls -l -a
@end example

@noindent both do exactly the same thing.

An @dfn{parameter} is an argument that is not an option.  For example, in

@example
> cp --archive source dest
@end example

@noindent @command{cp} is called with three arguments, the option
@option{--archive}, the parameter @code{source}, and the parameter
@code{dest}.  Unlike options, the order in which parameters are
specified usually @emph{is} important:

@example
> cp --archive --verbose source dest
> cp --verbose --archive source dest
> cp --archive source --verbose dest
> cp --archive --verbose dest source
@end example

@noindent The first three @command{cp} commands do the same thing, but the
fourth one is completely different.

If you're new to Gengetopt, you may wish to skip the rest of this
section.  It goes into more detail about different sorts of options, and
how they are parsed.

Note that some parameters may begin with @option{-} or @option{--}.
Equivalently, not @emph{all} arguments that begin with @option{-} or
@option{--} are options.  Consider

@example
> ls -- -file
> tar -c -f - . > ../foo.tar
@end example

@noindent The @command{ls} command has two arguments; the first
argument, @option{--} is ignored by @command{ls}, but causes the
@option{-file} argument to be interpreted as a parameter.  The @command{tar}
command has four arguments.  The @option{-c} argument tells tar to
create an archive; the @option{-f} argument, which takes a value,
@code{-}, tells tar that the archive should be written onto the standard
output, and the fourth argument, @code{.}, tells tar what directories to
include in the archive.  (The remaining two items, @code{>} and
@code{../foo.tar}, tell the shell to redirect the @command{tar}
command's output to the file ../foo.tar.  The @command{tar} command
doesn't even see them.)

The GNU convention is that @option{-} by itself is always interpreted as
a value or parameter, while the first @option{--} by itself is always
ignored, but causes all subsequent arguments to be interpreted as
parameters.  Gengetopt always behaves this way.

A @dfn{short option} is an option that begins with @option{-}.  Not
including the leading dash, short options must be one character long:

@example
> ls -a -l -t --width=80
@end example

@noindent The @option{-a}, @option{-l}, and @option{-t} options are all short
options.  Multiple short options may be combined into a single
argument:

@example
> ls -alt --width=80
@end example

@noindent is equivalent to the above example.

A @dfn{long option} is an option that begins with @option{-}
or @option{--}.  Ignoring the leading punctuation, long
options may be one or more characters long:

@example
> ls --all -fs
@end example

@noindent The @command{ls} command has two arguments; the long option
@option{--all}, and the pair of short options @option{-fs}.  

Long options need not have synonymous short options; after all, complex
programs like @command{cc} have more long options than there are valid
short option characters; it wouldn't be possible to assign a short
option to each of them.  Short options are encouraged, but not required,
to have a synonymous long option.

Long options may be abbreviated, as long as the abbreviation is not
ambiguous.  Gengetopt automatically treats unambiguous abbreviations as
synonyms.  

Short options may have values just like long options, but if several
short options are grouped together into one argument, only the last one
may have a value.  Values in the same argument as a long option are
delimited by an equals sign, values in the same argument as a short
option are not:

@example
> ls --width 60  # ok, value is "60"
> ls --width=60  # ok, value is "60"
> ls -w60        # ok, value is "60"
> ls -w 60       # ok, value is "60"
> ls -w=60       # unexpected, value is "=60"
> ls -T7 -w60    # ok, value for -T is 7, value for -w is 60
> ls -T7w60      # unexpected, value for -T is "7w60", no -w at all
@end example

A @dfn{required option} must be present, otherwise  an error will be
raised.  

A @dfn{multiple option} is an option that may appear more than once on
the command line.  Gengetopt would create a tidy array for multiple
options (see @ref{Multiple Options}, for further details about dealing
with multiple options).

@node Options with enumerated values, Group options, Terminology, Top
@chapter Options with enumerated values

@cindex enumerated options
@cindex values
You can also specify the list of @code{values} that can be passed to an
option (if the type is not specified, the option has type
@code{string}).  If a value that is not in the list is passed, an error
is raised.  You can think of such options as @emph{enumerated} options.
It is not necessary to pass the complete value at the command line
option: a non ambiguous prefix will do.  For instance, if the accepted
values are @code{"foo","bar","foobar"}, then you can pass at the command
line the value @code{"b"} and the value @code{"bar"} will be selected,
or the value @code{"foob"} and the value @code{"foobar"} will be
selected; instead, passing the value @code{"fo"} will raise an ambiguity
error.

Since version 2.22 options with values can be given a specific type (the
default is string).  If you give a numeric type to such options,
gengetopt will check that the enumerated values are actually valid
values for that numeric type.

As for other options, the @code{<option>_arg} field will have the
specified type, while the @code{<option>_orig} field will always be a
string (@code{char *}) storing the (non-ambiguous) prefix specified at
the command line.

For such an option, no matter what its type is, an array of strings,
@code{<parser-name>_<option>_values}, will be generated that contains
all the strings representing the possible accepted values.

@cindex enum
An option with enumerated values can also be given the type @code{enum};
in that case, a C @code{enum} type is also generated with name
@code{enum_<option>}; the values of such C enum will be generated
according this pattern: @code{<option>_arg_<value>}, where @code{value}
is the value specified in the input file, and the starting value is
always 0.  
An additional value is generated to represent the null/empty value, with
the pattern @code{<option>__NULL} (note the double underscore) with
integer value -1.
For instance, if we specify in the input file the following
option

@example
option "myopt" ... ... values="FOO","180","BAR" enum ...
@end example

@noindent
then the following C enum will be generated:

@example
enum enum_myopt @{ 
myopt__NULL = -1, myopt_arg_FOO = 0, myopt_arg_180, myopt_arg_BAR @};
@end example

If you use the symbols @code{+} and @code{-}, these will be translated
into @code{PLUS_} and @code{MINUS_}, respectively, in the the C enum.
Thus, if we specify in the input file the following option

@example
option "myopt" ... ... values="+foo","-all","-foo" enum ...
@end example

@noindent
then the following C enum will be generated:

@example
enum enum_myopt @{ myopt__NULL = -1,
                  myopt_arg_PLUS_foo = 0, 
                  myopt_arg_MINUS_all, myopt_arg_MINUS_foo @};
@end example

An example using options with values (and enum options) is
@file{tests/test_values_cmd.ggo} and @file{tests/test_values.c}.

@node Group options, Mode options, Options with enumerated values, Top
@chapter Group options
@cindex group options

It is also possible to group options; options belonging to a @emph{group} are
considered @emph{in mutual exclusion}.  In order to use this feature, first the
@code{group} has to be defined, and then a @code{groupoption} can be defined.  A
groupoption has basically the same syntax of a standard option, apart
that the required flag must not be specified (it would not make sense,
since the options of the same group are mutually exclusive) and the group
to which the option belongs has to be specified.

@example
defgroup "<group name>" @{groupdesc="<group description>"@} @{required@}
groupoption <long> <short> "<desc>" <argtype> group="<group name>" \
     @{argoptional@} @{multiple@}
@end example

If a group is defined as @code{required}, then one (but only one) option
belonging to the group has to be specified.
 
Here's an example (taken from the test @file{test_group_cmd.ggo}):

@example 
defgroup "my grp2"
defgroup "grp1" groupdesc="an option of this group is required" required
groupoption "opta" a "string a" group="grp1" multiple
groupoption "optA" A "string A" string group="grp1" argoptional
groupoption "optAmul" M "string M" string group="grp1" argoptional multiple
groupoption "optb" b "string b" group="grp1"
groupoption "optc" - "string c" group="my grp2"
groupoption "optd" d "string d" group="my grp2"
@end example

The group @code{grp1} is required, so either @code{--opta} or
@code{--optb} has to be specified (but only one of them).  Here's the
output of some executions:

@example 
$ ./test_groups
test_groups: 0 options of group grp1 were given. One is required
$ ./test_groups -a          OK
$ ./test_groups -a -a       OK (the same option given twice)
$ ./test_groups -a -b
test_groups: 2 options of group grp1 were given. One is required
$ ./test_groups -a -c       OK
$ ./test_groups -a --optc -d
test_groups: 2 options of group my grp2 were given. At most one is required
@end example

@node Mode options, Parser function additional parameters, Group options, Top
@chapter Mode options
@cindex mode options

It is also possible to specify ``mode options''; options belonging to a
@emph{mode} are considered @emph{in mutual exclusion} with options of a
different mode.  Thus, you can specify more options belonging to the
same mode, but you cannot specify, on the same command line, two options
belonging to two different modes (thus, modes are different from groups,
@ref{Group options}).

These sets of options are called modes, since they represent the
different modes (modalities), in which a program can be run.

In order to use this feature, first the @code{mode} has to be defined,
and then a @code{modeoption} can be defined.  A modeoption has basically
the same syntax of a standard option, and it can be given the required
flag must not be specified (with a slightly different semantics, see
below) and the group to which the option belongs has to be specified.

@example
defmode "<mode name>" @{modedesc="<mode description>"@}
modeoption <long> <short> "<desc>" <argtype> mode="<mode name>" \
     @{argoptional@} @{multiple@} @{required@}
@end example

If a mode option is specified as @code{required}, then it will be
required only if other options of the same mode are specified; this
makes it possible to specify options of different modes as required.

Options not belonging to any mode are not in conflict with mode options.

For instance, let us consider the file @file{test_modes_cmd.ggo}:

@include test_modes_cmd.ggo.texinfo

@noindent
Now, we use the program @file{test_modes} (that uses the generated
parser for the input file above) to demonstrate how the parser generated
by gengetopt perform checks on mode options.

@example
test_modes -N
@end example

@noindent
This execution generates no errors (although there are required options
which are not specified, these required options are part of modes and
they are required only if that mode is used).

@example
test_modes -a
./test_modes: '--optA' ('-A') option required
@end example

@noindent
Since an option of a mode is specified, then required options of that
mode must be provided, but, in this execution, we forgot to specify a
required option of the mode that is being used.

@example
test_modes -a -A -N
@end example

@noindent
This execution is correct: we specified two options of the same mode, in
particular we also specified the required option of that mode.  Notice
that we use also an option not belonging to any mode, which does not
interfere with mode options.

@example
test_modes -a -A -N --optc
test_modes: option --optc conflicts with option --opta
test_modes: option --optc conflicts with option --optA
test_modes: '--optd' ('-d') option required
@end example

@noindent
Here we see a conflict, (actually two), since the last option we
specified belongs to a mode that is different from the one of the first
two options.

If you require gengetopt to generate @code{--full-help}
(@xref{fullhelp,,@code{--full-help}}.), the usage string will be
generated so that it will show the modes of the program; for instance,
this is the output of @code{--help} of the generated parser for the
input file above:

@example
@include help_modes.output.texinfo
@end example

@node Parser function additional parameters, Configuration files, Mode options, Top
@chapter Parser function additional parameters
@cindex parser parameters
@cindex parameters

Besides the parser functions, in the generated header file, gengetopt
also generates@footnote{Since version 2.21.} an additional structure
@code{<cmd_parser_name>_params} that can be used to customize the
invocation of the generated parsers (it is especially useful when using
configuration file parsers, @ref{Configuration files}, string parsers,
@ref{String Parsers and Multiple Parsers}, and, in general, multiple
parsers).

These are the fields of this structure (as usual, boolean options are
represented as @code{int} and they are @code{true} if they are set to
@code{1} and @code{false} if they are set to @code{0}):

@table @code
@item int initialize (default = 1)
@cindex initialize
tells whether the args_info struct has to be initialized.

@item int override (default = 0)
@cindex override
tells whether the values for the options that are parsed should override
those that are already present in the passed args_info struct (e.g.,
this is the case when you call a parser multiple times using the same
args_info struct, see, e.g., @ref{Configuration files} and@ref{String
Parsers and Multiple Parsers}).

@item int check_required (default = 1)
@cindex check_required
tells whether the check for required options must be performed or not.

@item int check_ambiguity (default = 0)
@cindex check_ambiguity
tells whether the check whether options that are parsed are not
already present in the passed args_info struct; this is performed only
for NON multiple options (see also @ref{Multiple Options}).

@item int print_errors (default = 1)
@cindex print_errors
tells@footnote{Introduced in version 2.22} whether @code{getopt_long}
must print error messages to the standard error stream if it encounters
an unknown option character or an option with a missing required
argument.  This is the default behavior.  If you set this variable to
zero, @code{getopt_long} does not print any messages, but the generated
parser will still return with error.
@end table

Gengetopt also generates an initialization function for such
structures@footnote{The @code{<cmd_parser_name>_params_init} was
introduced in version 2.21, but it used to initialize all its fields to
0, which does not make much sense, since it's more helpful to have the
fields initialized to their default values; in order not to silently
break the semantics of previous code, the (void argument) creation
function is now called @code{<cmd_parser_name>_params_create} and
@code{<cmd_parser_name>_params_init} is now a procedure that initializes
a passed pointer to the structure.  This will make previous code not
compilable, since the signature of @code{<cmd_parser_name>_params_init}
has changed; hopefully, this will force the programmer to realize that
something has changed.  I'm sorry for the (hopefully little) problems
this change might imply.}, called @code{<cmd_parser_name>_params_init},
which takes as argument a pointer to such structure and initialize all
its fields to their default values; it also generates a function called
@code{<cmd_parser_name>_params_create} that returns a dynamically
allocated structure with all fields initialized to their default values.

We strongly advise to use such functions for creating and initializing
such a structure, since this will make your code scalable to future
releases of gengetopt where such structure might contain additional
fields.  Otherwise, you might risk to use a structure where some fields
are not initialized, with unpredictable results.  Furthermore, since the
@code{<cmd_parser_name>_params_create} function returns a pointer to a
dynamically allocated structure (with @code{malloc}), it is up to you to
deallocate that structure when you no longer need it (with @code{free}).

Some examples of usage of this parameters struct are shown in
@ref{Configuration files}.

@node Configuration files, Multiple Options, Parser function additional parameters, Top
@chapter Configuration files
@cindex configuration files

@cindex @code{-C,--conf-parser}
It is often useful to specify command line options directly in a
configuration file, so that the value of some options are read from this
file if they are not given as command line options.  When the command
line option @code{-C|--conf-parser} is given to gengetopt, apart from
the standard command line option parser, also this additional parser is
generated (its name is @code{<cmd_parser_name>_config_file}@footnote{The
previous function @code{<cmd_parser_name>_configfile} --- notice the
absence of the @code{_} --- is deprecated and should be no longer used,
since it might be removed in the future releases.}):

@cindex <cmd_parser_name>_config_file
@example
int
<cmd_parser_name>_config_file(char * const filename,
                             struct gengetopt_args_info *args_info,
                             struct <cmd_parser_name>_params *params);
@end example

The parameter structure @code{<cmd_parser_name>_params} is described in
@ref{Parser function additional parameters}.
For instance, @code{params->override} tells whether the values read in the
configuration file have to override those specified at the command line.

IMPORTANT: you have to explicitly set @code{params->initialize} to 1 if
you call the config file parser before the standard command line option
parser, otherwise unpredictable results may show.

If you call the config file parser before the standard command line
option parser and then you want to call the standard command line parser
you MUST use this second version of the parser function, with
@code{params->initialize} set to 0, so that collected values from the
config file are not lost@footnote{The previous function
@code{<cmd_parser_name>2} --- notice the @code{2} --- is deprecated and
should be no longer used, since it might be removed in the future
releases.}:

@cindex <cmd_parser_name>_ext
@example
int
<cmd_parser_name>_ext (int argc,
                       char **argv,
                       struct gengetopt_args_info *args_info,
                       struct <cmd_parser_name>_params *params);
@end example

Notice, that with this version you can also specify whether the options
passed at the command line must override the ones read from the config
file.  
@c If you set @code{override} to 0, and a command line option is
@c given that has already been read from the config file, an error will be
@c raised.  
Moreover, you have to specify whether the check for missing
required options must be performed or not.  This concerns also options
of a required group (@ref{Group options}).
 
If you decide not to request the check for required option, you can
test it manually, after the command line parsing returns by using the
following generated function:

@cindex <cmd_parser_name>_required
@example 
int
<cmd_parser_name>_required (struct gengetopt_args_info *args_info,
                            const char *program_name);
@end example

where @code{program_name} is the name of your executable (usually you
should pass @code{argv[0]} as argument).  If the function returns a
value different from 0, then some required options are missing.  An
error has already been printed by this function.  This concerns also
options of a required group (@ref{Group options}).

The config file has the following simple syntax: lines starting with
@code{#} are considered comments and:

@example
<option_name> = @{<option_val>@} 
@end example

@noindent
or simply (if the option does not take an argument):

@example
<option_name>
@end example

@noindent
which means that @code{option_name} is given, and if it accepts an argument,
then its value is @code{option_val}.  The @code{=} is not mandatory.

@cindex include
Since version 2.19, it is possible to include other files (i.e., other
configuration files) in a configuration file, by using the
@code{include} syntax:

@example
include "filename"
@end example

For instance here's a program that uses this feature (this is the test
@file{test_conf_parser}):

@include test_conf_parser.c.texinfo

So if we use the following config file

@example
# required option
required "this is a test"
float 3.14
no-short
string another
@end example

@noindent
and we run @code{test_conf_parser} like that, we will have

@example 
./test_conf_parser -r bar -i 100 --float 2.14 --conf-file test_conf.conf 
value of required: this is a test
value of string: another
value of no-short: 1
value of int: 100
value of float: 3.140000
@end example

If, instead we call the @code{test_conf_parser_cmd_parser_configfile} with 0
for override argument, we get the following result
 
@example
value of required: bar
value of string: another
value of no-short: 1
value of int: 100
value of float: 2.140000
@end example

This second example use the second version of the command line parser:
first call the configuration file parser and then the command line
parser (the command line options will override the configuration file
options):

@include test_conf_parser_ov2.c.texinfo

@noindent
This is an invocation and its results:

@example 
./test_conf_parser_ov2 -r "bar" --float 2.14 -i 100
value of required: bar
value of string: another
value of no-short: 1
value of int: 100
value of float: 2.140000
@end example

If on the above code you substitute @code{params->override = 1} with
@code{params->check_ambiguity = 1} (see the test file
@file{test_conf_parser_ov4.c}), then the following invocation will
generate an error:

@example 
./test_conf_parser_ov4 -r "bar" -i 100
./test_conf_parser_ov4: `--required' (`-r') option given more than once
@end example

@noindent
since the @code{-r} option is specified both in the configuration file
and at the command line.

@section Further details on the configuration file parser

The generated config file parser function uses the constant
@code{CONFIG_FILE_LINE_SIZE} to read each line of the configuration
file.  By default this constant is set to @code{2048} that should be
enough for most applications.  If your application uses configuration
files with lines that are longer, you can compile the generated C file
by specifying an explicit value for this constant with the @code{-D}
command line option of @code{gcc}.

@node Multiple Options, String Parsers and Multiple Parsers, Configuration files, Top
@chapter Multiple Options
@cindex multiple options

If an option is specified as @code{multiple}, then it can be specified
multiple times at command line.  In this case, say the option is
called @code{foo}, the generated @code{foo_given} field in the args
structure contains the number of times it was specified and the
generated field @code{foo_arg} is an array containing all the values
that were specified for this option.
 
Notice that if a default value is specified for a multiple option,
that value is assigned to the option only if no other value is
specified on the command line, i.e., a default value IS NOT always
part of the values of a multiple option.

As in the case for standard options, if a multiple option has a
default value, and this is set because no value was specified on the
command line, then the corresponding @code{<option>_given} will still be
initialized to 0.  Thus, @code{<option>_given} will effectively inform
you if the user has specified that command line option.

If it is known that a multiple option has a default value, then it can
be safely assumed that the first element of generated array
@code{<option>_arg} is always set.
 
For instance, if the gengetopt file is as follows

@example
# test options that can be given more than once
option "string"      s "string option" string optional multiple
option "int"         i "int option" int optional multiple
@end example

@noindent
Then the command line options can be collected like that

@example

@end example

@noindent
Then if this program is called with the following command line options

@include multiple_example.c.texinfo

@noindent
The output of the program will be
 
@example
passed string: world
passed string: hello
passed string: bar
passed string: foo
passed int: 200
passed int: 100
@end example

You can also pass arguments to a multiple option separated by commas (if
you need to actually specify the comma operator as part of the argument
you can escape it with @code{\}), as in the following:

@example
./test_multiple -s"foo","bar","hello" -i100,200 -s "world"
@end example

You can specify the number of occurrences of multiple options by using
the following syntax (that must be given after the @code{multiple}
keyword):

@table @code
@item (number)
requires that the multiple option, if given, must be given exactly
@code{number} times

@item (number1-number2)
requires that the multiple option, if given, must be given not less than
@code{number1} times and no more than @code{number2} times

@item (number-)
requires that the multiple option, if given, must be given at least
@code{number} times

@item (-number)
requires that the multiple option, if given, must be given at most
@code{number} times
@end table

Here are some examples:

@example
option "string"      s "string option" string optional multiple(4)
@end example

@example
option "string"      s "string option" string optional multiple(1-4)
@end example

@example
option "string"      s "string option" string optional multiple(-5)
@end example

Notice that this is independent from the @code{required} flag.

@node String Parsers and Multiple Parsers, No getopt_long, Multiple Options, Top
@chapter String Parsers and Multiple Parsers
@cindex multiple parsers
@cindex string parsers

The parsers generated by gengetopt (indeed the C and header files) are
self-contained and different parsers can be linked in the same program,
without interferences.  This is useful, e.g., in cases where a specific
command line option argument has a complex syntax that accepts options
itself according to terminology already defined, i.e., the one handled
by @code{getopt_long}, see @ref{Terminology}.  Another case when
multiple parsers can be useful is when your command behaves differently
according to a specific command line option.

Obviously there exists only one instance of command line arguments
passed to the @code{main} function (namely the variables @code{argc}
and @code{argv}) so passing the same arguments to different command
line parsers is likely to generate errors: the different command line
parsers are likely to have different syntaxes for accepted options.

@cindex @code{-S,--string-parser}
For this reason gengetopt can generate parser functions that take a
string containing the further options to parse, instead of taking an
array.  This additional parser will have the parser name and the
suffix @code{_string}.  If you want these additional parsers to be
generated you have to pass the command line option
@code{-S|--string-parser} to gengetopt (see @ref{Invoking gengetopt}).
The two functions will be:

@example
int <parser_name>_string (const char *cmdline, 
    struct test_first_cmdline_cmd_struct *args_info,
    const char *prog_name);
int <parser_name>_string_ext (const char *cmdline,
    struct test_first_cmdline_cmd_struct *args_info,
    const char *prog_name,
    struct <cmd_parser_name>_params *params);
@end example

The second version@footnote{The previous function
@code{<cmd_parser_name>_string2} --- notice the @code{2} --- is
deprecated and should be no longer used, since it might be removed in
the future releases.} allows you to specify more details about the
parsing, using the @code{<cmd_parser_name>_params} structure, shown in
@ref{Parser function additional parameters} (this is the same as for
configuration files, thus we refer to that section for the details of
the two functions and default values, see @ref{Configuration files}).

Of course, these functions can be used in general to simulate the
invocation of a program with specific command line options (stored in
the first string argument), or in general to parse options that are
all stored in a string (instead of a vector).

The first argument of these parsers is a string containing the options
to parse (remember that this must respect the option format handled by
@code{getopt_long}, see @ref{Terminology}).  The second one is the
pointer to the struct that will be filled with passed options and
arguments, as usual.  The third option is the program name: this will
be used when errors have to be printed.  This last argument can be
null: in this case, the first element of the first string argument is
considered the program name.

Let's show these functionalities with an example.  Consider a program
that accepts two command line options (required in this case):

@example
# test for multiple parsers, this is the main file
# test_main_cmdline_cmd.ggo

option "first-cmd" F "the first command line to parse" required \
       typestr="first command" string multiple
option "second-cmd" S "the second command line to parse" required \
       typestr="second command" string multiple
@end example

@noindent
These two options accept strings as argument that in turn are
considered command line arguments, according to specific syntaxes.
The first one is:

@example
# test for multiple parsers, this is the first command line file
# test_first_cmdline_cmd.ggostr

option "option-a" a "option a of the first command line to parse"
optional int option "multi" M \
         "multiple option of the first command line to parse" \
         optional string multiple
@end example

@noindent
and the second one is:

@example
# test for multiple parsers, this is the second command line file
# test_second_cmdline_cmd.ggostr

option "option-a" a "option a of the second command line to parse" \
       optional string
option "option-b" b "option a of the second command line to parse" \
       optional string
option "my-multi" M \
       "multiple option of the second command line to parse" \
       optional string multiple
@end example

These last two files are processed with gengetopt using the
@code{--string-parser}.  Let's put everything together in this main
file:

@include test_multiple_parsers.c.texinfo

Notice that in the @code{for} loops we always free the elements of the
argument structures in order to avoid memory leaks.

Now if you can run this program as follows (notice that we use the comma
separated arguments for multiple option arguments but we escape it with
@code{\} because otherwise, e.g., 200 and 300 would be intended as
further arguments of @code{--first-cmd} instead of @code{--multi}, see
@ref{Multiple Options}):

@example
./test_multiple_parsers \
        --first-cmd="-M400 -a10 --multi 100\,200\,300" \
        --second-cmd="-a20 -b10 --my-multi=a\,b\,c\,d\,e\,f" \
        -F"-M500 -M600" -S"--my-multi g"
second cmdline: -a20 -b10 --my-multi=a,b,c,d,e,f
  --option-a: 20
  --option-b: 10
  --my-multi: a
  --my-multi: b
  --my-multi: c
  --my-multi: d
  --my-multi: e
  --my-multi: f
second cmdline: --my-multi g
  --my-multi: g
first cmdline: -M400 -a10 --multi 100,200,300
  --option-a: 10
  --multi: 400
  --multi: 100
  --multi: 200
  --multi: 300
first cmdline: -M500 -M600
  --multi: 500
  --multi: 600
@end example

@node No getopt_long, Bugs, String Parsers and Multiple Parsers, Top
@chapter What if getopt_long is not available?
@cindex getopt_long

If you use gengetopt to generate C functions for parsing command line
arguments you have to know that these generated functions use
@code{getopt_long} to actually read the command line and parsing it.
This function is typically part of the standard C library, but some
implementations may not include it.  If you want your program to be
portable on several systems, and be compilable with many C compilers,
you can rely on one of the following solutions.

@menu
* Include the getopt_long code into the parser::  
* Use automake/autoconf::       
@end menu

@node Include the getopt_long code into the parser, Use automake/autoconf, No getopt_long, No getopt_long
@section Include the @code{getopt_long} code into the generated parser

Since version 2.17, gengetopt can include into the generated C parser
file the code of @code{getopt_long}, so that the include code will be
used to actually parse the command line arguments, instead of that taken
from the C library.

@cindex @code{--include-getopt}
This solution is actually quite easy, since you only need to specify the
command line option @code{--include-getopt} (see @ref{Invoking
gengetopt}), but it has two main drawbacks:

@itemize
@item 
The generate C file of the parser will be much bigger;

@item
You won't be able to use the latest version of @code{getopt_long}
of the C library
@end itemize

It is up to you to choose between this and the automake/autoconf based
solution.

Actually, this solution has the advantage that your program won't behave
strangely when used with another implementation of @code{getopt_long}.

I prefer the automake/autoconf based solution, as described in @ref{Use
automake/autoconf}, in particular the one described in @ref{Use Gnulib},
which is also the one I adopt for gengetopt itself.

@node Use automake/autoconf,  , Include the getopt_long code into the parser, No getopt_long
@section Use automake/autoconf to check for the existence of @code{getopt_long}

@cindex automake
@cindex autoconf
Autoconf and Automake are great tools to generate a configure script
that automatically checks for the configuration of your system and for
possible missing functions required to compile your program.  However,
in case of detected missing functions, your program must be able to
provide a replacement for such functions.  In the next sections we
describe two mechanisms for including the (possible) missing code for
@code{getopt_long} and for checking its presence with automake/autoconf.
Since version 2.19, gengetopt itself uses the first mechanism.

@menu
* Use Gnulib::                  
* Use getopt_long sources::     
@end menu

@node Use Gnulib, Use getopt_long sources, Use automake/autoconf, Use automake/autoconf
@subsection Use Gnulib

@cindex gnulib
Since version 2.19 I also started to use Gnulib - The GNU Portability
Library@footnote{@uref{http://www.gnu.org/software/gnulib}}, ``a central
location for common GNU code, intended to be shared among GNU
packages''.  Gnulib provides an easy and smooth way to add to your
package sources the sources of functions that you want to check during
configure.  It will also handle the checks for these functions in the
configure script, and in case they're not in your system (or they're
present but with some missing features) it compiles their sources into a
library (that you will need to link your program to, as illustrated in
the following).

Once you retrieved gnulib (for the moment it is available
only through git, see the home page), you can invoke
@samp{gnulib-tool --import} that will copy source files, create a
@file{Makefile.am} to build them, generate a file @file{gnulib-comp.m4} with
Autoconf M4 macro declarations used by @file{configure.ac}, and generate
a file @file{gnulib-cache.m4} containing the cached specification of how
Gnulib is used.  In particular, you must specify the modules you want
to import, and in our case, it is getopt:

@example
gnulib-tool --import getopt
@end example

By default, the source code is copied into @file{lib/} and the M4
macros in @file{m4/}.  You can override these paths by using
@code{--source-base=DIRECTORY} and @code{--m4-base=DIRECTORY}.
For instance, gengetopt uses @code{gl} and @code{gl/m4}, respectively.
We will use these directories in the rest of this section.

You must ensure Autoconf can find the macro definitions in
@file{gnulib-comp.m4}.  Use the @code{ACLOCAL_AMFLAGS} specifier in your
top-level @file{Makefile.am} file (and the first time you run
@code{aclocal} you have to use the @code{-I} as well); for instance, in
the case of gengetopt we have:

@example
ACLOCAL_AMFLAGS = -I gl/m4
@end example

You are now ready to call the M4 macros in @code{gnulib-comp.m4} from
@file{configure.ac}.  The macro @code{gl_EARLY} must be called as soon
as possible after verifying that the C compiler is working.
Typically, this is immediately after @code{AC_PROG_CC}, as in:

@example
...
AC_PROG_CC
gl_EARLY
...
@end example

The core part of the gnulib checks are done by the macro
@code{gl_INIT}.  Place it further down in the file, typically where
you normally check for header files or functions.  For example:

@example
...
# For gnulib.
gl_INIT
...
@end example

@code{gl_INIT} will in turn call the macros related with the gnulib
functions, be it specific gnulib macros.  So there is no need to call
those macros yourself when you use the corresponding gnulib modules.

You must also make sure that the gnulib library is built.  Add the
@code{Makefile} in the gnulib source base directory to
@code{AC_CONFIG_FILES}, as in:

@example
AC_CONFIG_FILES(... gl/Makefile ...)
@end example

You must also make sure that @code{make} will recurse into the gnulib
directory.  To achieve this, add the gnulib source base directory to a
@code{SUBDIRS} Makefile.am statement, as in:

@example
SUBDIRS = gl
@end example

Finally, you have to add compiler and linker flags in the appropriate
source directories, so that you can make use of the gnulib library.
Since the @samp{getopt} module copies files into
the build directory, @file{top_builddir/gl} is needed as well
as @file{top_srcdir/gl}.  For example:

@example
...
AM_CPPFLAGS = -I$(top_srcdir)/gl -I$(top_builddir)/gl
...
LDADD = gl/libgnu.a
...
@end example

Don't forget to @code{#include} the various header files.  In this
example, you would need to make sure that @samp{#include "getopt.h"} is
evaluated when compiling all source code files, that want to make use of
@code{getopt} or @code{getopt_long}.  If you simply use the files
generated by gengetopt, you won't need include this header though, since
it is already handled by the generated files.

Every now and then, check whether there are updates in the Gnulib
modules, and if the modules you use (e.g., @code{getopt}) are upgraded,
please remember to also update your files, simply by running:

@example
gnulib-tool --update
@end example

We refer to Gnulib documentation for further explanations and features.

@node Use getopt_long sources,  , Use Gnulib, Use automake/autoconf
@subsection Use getopt_long sources

NOTICE: this was the procedure used by gengetopt itself up to version
2.18.  We suggest now to use the procedure described in @ref{Use
Gnulib}, since the files described in the following might not be kept
up-to-date.

@cindex automake
@cindex autoconf
We provide C files that actually implement @code{getopt_long} function:
@file{getopt.c} @file{getopt1.c} and @file{gnugetopt.h}.   You'll find
these files in the @file{<install prefix>/share/gengetopt} directory
where @file{<install prefix>} is the one you specified during
compilation.   If no prefix had been specified, @file{/usr/local} is the
default.   If you downloaded gengetopt in binary form prefix will
probably be @file{/usr/local} or @file{/usr}.

You can rename @file{gnugetopt.h} to @file{getopt.h} and then simply
compile these files and link them to the executable of you program.
However, if you use automake and autoconf here's a more elegant
solution: you should download the file @file{adl_func_getopt_long.m4}
you find at this site:

@uref{http://autoconf-archive.cryp.to}

@noindent
and add its contents to your @file{acinclude.m4}.  You can find this
macro also in the @file{acinclude.m4} in the sources of gengetopt.

This macro checks if getopt_long function is in C library;
if it is not then it adds @file{getopt.o} and @file{getopt1.o} to the objects files
that will be linked to your executable (@code{LIBOBJS}).

Then in @file{Makefile.am} of your source directory you have to add the contents
of @code{LIBOBJS} to the @code{LDADD} of the program that has to use getopt_long;
e.g., if the program @file{foo} has to use getopt_long, you have to add
the following line

@example
foo_LDADD = @@LIBOBJS@@
@end example

Now these files will be compiled and linked to your program only if
necessary.

Moreover you have to add @file{getopt.c} @file{getopt1.c} and
@file{gnugetopt.h} to your distribution.  Note that it is not necessary
to put these file names among the @code{foo_SOURCES} contents), but you have to
add @file{gnugetopt.h} to @code{EXTRA_DIST}:

@example
EXTRA_DIST = gnugetopt.h
@end example

You may want to take a look at gengetopt's @file{configure.in} and
@file{src/Makefile.am}: they both use the techniques described here.


@node Bugs, Mailing Lists, No getopt_long, Top
@chapter Known Bugs and Limitations
@cindex Known Bugs
@cindex Limits
@cindex Misfeatures

If you find a bug in @command{gengetopt}, please use the Savannah web
interface

@url{http://savannah.gnu.org/bugs/?group=gengetopt}

Include the version
number, which you can find by running @w{@samp{gengetopt
--version}}.  Also include in your message the output that the program
produced and the output you expected.@refill

If you have other questions, comments or suggestions about
@command{gengetopt}, contact the author via electronic mail
(find the address at @value{myhomepage}).  The author will try to help
you out, although he may not have time to fix your problems.

The list of to-dos in the @file{TODO}.

@menu
* Getopt and subsequent calls::  
@end menu

@node Getopt and subsequent calls,  , Bugs, Bugs
@section Getopt and subsequent calls

It seems that @code{getopt_long}, at least the version in the GNU
library, if invoked with different @code{argv} arrays, might access
memory in a bad way leading to crashes or unexpected behaviors.  This
happens because it keeps pointers to locations of the previous arrays
if not initialized each time by setting @code{optind =
0}@footnote{@code{optind} is the global variable in getopt
implementation that is the index in ARGV of the next element to be
scanned.  This is used for communication to and from the caller and
for communication between successive calls to @code{getopt_long}.}.
Unfortunately this initialization behavior seems to be part only of
the implementation of GNU library and actually it is not documented
(you can see it by taking a look into the source of @file{getopt.c});
other implementations of @code{getopt_long} might not be affected by
this problem; alternatively, as reported by a user, @code{optind = 0}
leads some @code{getopt_long} implementations to consider the program
name as a command line option (since it is in position 0), which is
bad anyway!

Probably this is usually not a problem since you usually parse only the
command line, thus you only invoke the command line parser only once,
and only with one instance of array (i.e., the @code{argv} passed to
@code{main}).  However, it can lead to problems when you use advanced
features, as in the case of configuration file parsing (see
@ref{Configuration files}) and multiple parsers (see @ref{String Parsers
and Multiple Parsers}).

The parser generated by gengetopt checks whether the program name was
actually considered a command line option, and in that case it removes
it from the collected command line options; thus, this @code{optind}
issue should not come up anyway.  In case you still don't feel
comfortable, you can include a correct @code{getopt_long} implementation
in the generated parser, so that you can be sure you will always use the
same implementation of @code{getopt_long} (@ref{Include the getopt_long
code into the parser}).

@node Mailing Lists, Index, Bugs, Top
@chapter Mailing Lists
@cindex mailing list

The following mailing lists are available: 

@code{help-gengetopt at gnu dot org}

@noindent
for generic discussions about the program and for asking for help about
it (open mailing list),
@uref{http://mail.gnu.org/mailman/listinfo/help-gengetopt}
 
@code{info-gengetopt at gnu dot org}

@noindent
for receiving information about new releases and features (read-only
mailing list),
@uref{http://mail.gnu.org/mailman/listinfo/info-gengetopt}.
 
If you want to subscribe to a mailing list just go to the URL and follow
the instructions, or send me an e-mail and I'll subscribe you.

I'll describe new features in new releases also on my blog, at
this URL:

@uref{http://tronprog.blogspot.com/search/label/gengetopt}

@node Index,  , Mailing Lists, Top
@unnumbered Index

@printindex cp

@bye

