DEVELOPING GENGETOPT
--------------------

* From a fresh checkout from version control you will likely need to run
  autoreconf in the root of the project.

  $ autoreconf -i

* Building should be done in a subdirectory (shadow-building).

  $ mkdir build
  $ cd build
  $ ../configure --enable-warnings
  $ make

* Compiler warnings should always be turned on.  Developers should always run
  configure this way:

  $ ../configure --enable-warnings

* ChangeLog is used to keep track of changes.  If you use emacs you can
  position point in the file you changed and use the command:

  M-x add-change-log-entry-other-window

  If you're in a C function (typically after the closing '}'), the name of the
  function will be automatically added (in parenthesis).  Emacs modifies
  ChangeLog according to the standards.

* The THANKS file (as per GNU standards) records all people who contributed to
  the package in any way.  It should be an alphabetically ordered list.


TESTING
-------

* Make sure all tests pass

  $ make check

* Make sure the outputs of all test programs are as expected

  $ cd tests
  $ make my-check

  If there are differences, check over them carefully.  If you are happy that
  the differences are all valid and expected, then you can save the current
  test program outputs to compare against next time by running `make
  save-backup'.

* If you have valgrind installed, you should check that there are no memory
  leaks (in the "tests" directory):

  $ make check-valgrind

* In the "doc" directory there are samples, to test these samples you can issue
  `make check' (which is also a standard GNU target, to test a package).  If
  the gengetopt executable has changed, you can run `make samples' to rebuild
  them (so this is only for developers).


OTHER NOTES
-----------

parser.yy and scanner.ll create parser.cc parser.h and scanner.cc, this is the
convention adopted by automake

I added gengetopt.h to declare functions exported by gengetopt.c, this way some
warnings are avoided.

I named files which include gengetopt directive, with suffix .ggo
what do you think?

getopt.h getopt.c getopt1.c are distributed in sources.
we distribute these files because who uses gengetopt might need them
these are installed in $(prefix)/share/gengetopt. This should be
said in the help file.
Note that these files are compiled and linked only if they are really needed:
if they are in the standard library, that code is used.

I renamed generate_main to generate_cmdline_parser, because it should
generate a generic function, and not always main. The name of the
function can be chosen with a command line option.

instead of many variables we define a structure which must be included
in a header file and then filled inside the function.
A pointer to that structure is passed to the function by the main
program.

I added inputs and inputs_num to the struct generated by gm.c
which hold an array of strings and an integer to hold the unamed options
passed in the command line

Maybe it is better to use string.h and standard string functions... maybe
the only one that can give problems is strdup, but one can handle it
through autoconf, and I did it: if the library doesn't provide that
function we linked to our implementation (see strdup.c).

strdup is not ANSI, so we provide a replacement, in case who compiles
gengetopt does not have it.

Now gengetopt uses cmdline.c a file generated by gengetopt itself to
handle command line parameters (see cmdline.ggo). I recorded the
use of gengetopt inside getgetop in the file Bootstrap :-)

a comment (array of strings, the last string must be NULL) is passed,
to be printed in the generated c file at the beginning, e.g. I pass,
for our cmdline generated file, the command line with which it has been
generated :-)

GNU Standards doesn't advice about long Usage help line, so I made
an option to enable it (by default I disabled it).

sample1 in doc directory is a C++ program that uses unamed options

I tested gengetopt on a SunSparc which doesn't have getopt and it works :-)

I compiled it under Win32 with Cygnus gcc port to win32, and it works
great (mainly thanks to automake, and autoconf :-)

I added the html in doc directory.

man page is also installed (actually that man page should be modified
once the syntax will be defined).

The directory structure is GNU standard :-)