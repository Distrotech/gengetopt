/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=no_strings_cmd.ggo --func-name=no_strings_cmd_parser --file-name=no_strings_cmd --unamed-opt 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "no_strings_cmd.h"

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
no_strings_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error);


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->foo_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->foo_orig = NULL;
  
}

void
no_strings_cmd_parser_print_version (void)
{
  printf ("%s %s\n", NO_STRINGS_CMD_PARSER_PACKAGE, NO_STRINGS_CMD_PARSER_VERSION);
}

void
no_strings_cmd_parser_print_help (void)
{
  no_strings_cmd_parser_print_version ();
  printf("\nUsage: no_strings [OPTIONS]... [FILES]...\n\n");
  printf("%s\n","  -h, --help     Print help and exit");
  printf("%s\n","  -V, --version  Print version and exit");
  printf("%s\n","  -i, --foo=INT  foo option");
  
}

void
no_strings_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);

  args_info->inputs = NULL;
  args_info->inputs_num = 0;
}

static void
no_strings_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  
  unsigned int i;
  if (args_info->foo_orig)
    {
      free (args_info->foo_orig); /* free previous argument */
      args_info->foo_orig = 0;
    }
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);
  
  if (args_info->inputs_num)
    free (args_info->inputs);
  
  clear_given (args_info);
}

int
no_strings_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", NO_STRINGS_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  if (args_info->foo_given) {
    if (args_info->foo_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "foo", args_info->foo_orig);
    } else {
      fprintf(outfile, "%s\n", "foo");
    }
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
no_strings_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  no_strings_cmd_parser_release (args_info);
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

int
no_strings_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return no_strings_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
no_strings_cmd_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;

  result = no_strings_cmd_parser_internal (argc, argv, args_info, override, initialize, check_required, NULL);

  if (result == EXIT_FAILURE)
    {
      no_strings_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
no_strings_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  return EXIT_SUCCESS;
}

int
no_strings_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  int error = 0;
  struct gengetopt_args_info local_args_info;

  if (initialize)
    no_strings_cmd_parser_init (args_info);

  no_strings_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "foo",	1, NULL, 'i' },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hVi:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          no_strings_cmd_parser_print_help ();
          no_strings_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          no_strings_cmd_parser_print_version ();
          no_strings_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'i':	/* foo option.  */
          if (local_args_info.foo_given)
            {
              fprintf (stderr, "%s: `--foo' (`-i') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->foo_given && ! override)
            continue;
          local_args_info.foo_given = 1;
          args_info->foo_given = 1;
          args_info->foo_arg = strtol (optarg, &stop_char, 0);
          if (!(stop_char && *stop_char == '\0')) {
            fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
            goto failure;
          }
          if (args_info->foo_orig)
            free (args_info->foo_orig); /* free previous string */
          args_info->foo_orig = gengetopt_strdup (optarg);
          break;


        case 0:	/* Long option with no short option */
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", NO_STRINGS_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */




  no_strings_cmd_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;

      args_info->inputs_num = argc - optind ;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind++]) ;
    }

  return 0;

failure:
  
  no_strings_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
