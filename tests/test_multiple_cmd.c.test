/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=test_multiple_cmd.ggo --func-name=test_multiple_cmd_parser --file-name=test_multiple_cmd --unamed-opt --show-required 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "test_multiple_cmd.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: test_multiple [OPTIONS]... [FILES]...";

const char *gengetopt_args_info_description = "";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "  -V, --version                 Print version and exit",
  "  -s, --string=STRING           string option  (default=`foo')",
  "  -i, --int=INT                 int option (mandatory)",
  "  -S, --short=SHORT             short option",
  "  -l, --long=LONG               long option",
  "  -L, --limited=STRING          limited multiple option",
  "      --limited-interval=STRING limited multiple option (with interval)",
  "      --big-limited-interval=STRING\n                                limited multiple option (with interval)",
  "      --limited-open-right=STRING\n                                limited multiple option (with interval right \n                                  open)",
  "      --limited-open-left=STRING\n                                limited multiple option (with interval left \n                                  open)",
  "  -f, --float=FLOAT             float option  (default=`15000')",
  "      --no-short-opt=STRING     string option with no short",
  "  -n, --noarg                   multiple option with no arg",
  "      --noarg-noshort           multiple option with no arg and no short",
  "  -M, --optarg[=ID]             multi with optional args",
  "      --optarg-noshort[=ID]     multi with optional args and no short",
  "      --file-save=STRING        save the passed options into a file",
    0
};

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
test_multiple_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info,
                        struct test_multiple_cmd_parser_params *params, const char *additional_error);

static int
test_multiple_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);

struct float_list
{
  float arg;
  char *orig;
  struct float_list * next;
};

struct int_list
{
  int arg;
  char *orig;
  struct int_list * next;
};

struct long_list
{
  long arg;
  char *orig;
  struct long_list * next;
};

struct short_list
{
  short arg;
  char *orig;
  struct short_list * next;
};

struct string_list
{
  char * arg;
  char *orig;
  struct string_list * next;
};

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->string_given = 0 ;
  args_info->int_given = 0 ;
  args_info->short_given = 0 ;
  args_info->long_given = 0 ;
  args_info->limited_given = 0 ;
  args_info->limited_interval_given = 0 ;
  args_info->big_limited_interval_given = 0 ;
  args_info->limited_open_right_given = 0 ;
  args_info->limited_open_left_given = 0 ;
  args_info->float_given = 0 ;
  args_info->no_short_opt_given = 0 ;
  args_info->noarg_given = 0 ;
  args_info->noarg_noshort_given = 0 ;
  args_info->optarg_given = 0 ;
  args_info->optarg_noshort_given = 0 ;
  args_info->file_save_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->string_arg = NULL;
  args_info->string_orig = NULL;
  args_info->int_arg = NULL;
  args_info->int_orig = NULL;
  args_info->short_arg = NULL;
  args_info->short_orig = NULL;
  args_info->long_arg = NULL;
  args_info->long_orig = NULL;
  args_info->limited_arg = NULL;
  args_info->limited_orig = NULL;
  args_info->limited_interval_arg = NULL;
  args_info->limited_interval_orig = NULL;
  args_info->big_limited_interval_arg = NULL;
  args_info->big_limited_interval_orig = NULL;
  args_info->limited_open_right_arg = NULL;
  args_info->limited_open_right_orig = NULL;
  args_info->limited_open_left_arg = NULL;
  args_info->limited_open_left_orig = NULL;
  args_info->float_arg = NULL;
  args_info->float_orig = NULL;
  args_info->no_short_opt_arg = NULL;
  args_info->no_short_opt_orig = NULL;
  args_info->optarg_arg = NULL;
  args_info->optarg_orig = NULL;
  args_info->optarg_noshort_arg = NULL;
  args_info->optarg_noshort_orig = NULL;
  args_info->file_save_arg = NULL;
  args_info->file_save_orig = NULL;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{
  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->string_help = gengetopt_args_info_help[2] ;
  args_info->string_min = -1;
  args_info->string_max = -1;
  args_info->int_help = gengetopt_args_info_help[3] ;
  args_info->int_min = -1;
  args_info->int_max = -1;
  args_info->short_help = gengetopt_args_info_help[4] ;
  args_info->short_min = -1;
  args_info->short_max = -1;
  args_info->long_help = gengetopt_args_info_help[5] ;
  args_info->long_min = -1;
  args_info->long_max = -1;
  args_info->limited_help = gengetopt_args_info_help[6] ;
  args_info->limited_min = 3;
  args_info->limited_max = 3;
  args_info->limited_interval_help = gengetopt_args_info_help[7] ;
  args_info->limited_interval_min = 1;
  args_info->limited_interval_max = 3;
  args_info->big_limited_interval_help = gengetopt_args_info_help[8] ;
  args_info->big_limited_interval_min = 1;
  args_info->big_limited_interval_max = 30;
  args_info->limited_open_right_help = gengetopt_args_info_help[9] ;
  args_info->limited_open_right_min = 3;
  args_info->limited_open_right_max = -1;
  args_info->limited_open_left_help = gengetopt_args_info_help[10] ;
  args_info->limited_open_left_min = -1;
  args_info->limited_open_left_max = 3;
  args_info->float_help = gengetopt_args_info_help[11] ;
  args_info->float_min = -1;
  args_info->float_max = -1;
  args_info->no_short_opt_help = gengetopt_args_info_help[12] ;
  args_info->no_short_opt_min = -1;
  args_info->no_short_opt_max = -1;
  args_info->noarg_help = gengetopt_args_info_help[13] ;
  args_info->noarg_min = -1;
  args_info->noarg_max = -1;
  args_info->noarg_noshort_help = gengetopt_args_info_help[14] ;
  args_info->noarg_noshort_min = -1;
  args_info->noarg_noshort_max = -1;
  args_info->optarg_help = gengetopt_args_info_help[15] ;
  args_info->optarg_min = -1;
  args_info->optarg_max = -1;
  args_info->optarg_noshort_help = gengetopt_args_info_help[16] ;
  args_info->optarg_noshort_min = -1;
  args_info->optarg_noshort_max = -1;
  args_info->file_save_help = gengetopt_args_info_help[17] ;
  
}

void
test_multiple_cmd_parser_print_version (void)
{
  printf ("%s %s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, TEST_MULTIPLE_CMD_PARSER_VERSION);
}

void
test_multiple_cmd_parser_print_help (void)
{
  int i = 0;
  test_multiple_cmd_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  printf("\n%s\n\n", gengetopt_args_info_usage);

  if (strlen(gengetopt_args_info_description) > 0)
    printf("%s\n", gengetopt_args_info_description);

  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
test_multiple_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = NULL;
  args_info->inputs_num = 0;
}

struct test_multiple_cmd_parser_params *
test_multiple_cmd_parser_params_init()
{
  struct test_multiple_cmd_parser_params *params = 
    (struct test_multiple_cmd_parser_params *)malloc(sizeof(struct test_multiple_cmd_parser_params));

  if (params)
    { 
      params->override = 0;
      params->initialize = 0;
      params->check_required = 0;
      params->check_ambiguity = 0;
    }
    
  return params;
}

static void
test_multiple_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  
  unsigned int i;
  if (args_info->string_arg)
    {
      for (i = 0; i < args_info->string_given; ++i)
        {
          if (args_info->string_arg [i])
            {
              free (args_info->string_arg [i]); /* free previous argument */
              args_info->string_arg [i] = 0;
            }
          if (args_info->string_orig [i])
            {
              free (args_info->string_orig [i]); /* free previous argument */
              args_info->string_orig [i] = 0;
            }
        }
      if (args_info->string_arg [0])
        free (args_info->string_arg [0]); /* free default string */
      free (args_info->string_arg); /* free previous argument */
      args_info->string_arg = 0;
      free (args_info->string_orig); /* free previous argument */
      args_info->string_orig = 0;
    }
  if (args_info->int_arg)
    {
      for (i = 0; i < args_info->int_given; ++i)
        {
          if (args_info->int_orig [i])
            {
              free (args_info->int_orig [i]); /* free previous argument */
              args_info->int_orig [i] = 0;
            }
        }
      free (args_info->int_arg); /* free previous argument */
      args_info->int_arg = 0;
      free (args_info->int_orig); /* free previous argument */
      args_info->int_orig = 0;
    }
  if (args_info->short_arg)
    {
      for (i = 0; i < args_info->short_given; ++i)
        {
          if (args_info->short_orig [i])
            {
              free (args_info->short_orig [i]); /* free previous argument */
              args_info->short_orig [i] = 0;
            }
        }
      free (args_info->short_arg); /* free previous argument */
      args_info->short_arg = 0;
      free (args_info->short_orig); /* free previous argument */
      args_info->short_orig = 0;
    }
  if (args_info->long_arg)
    {
      for (i = 0; i < args_info->long_given; ++i)
        {
          if (args_info->long_orig [i])
            {
              free (args_info->long_orig [i]); /* free previous argument */
              args_info->long_orig [i] = 0;
            }
        }
      free (args_info->long_arg); /* free previous argument */
      args_info->long_arg = 0;
      free (args_info->long_orig); /* free previous argument */
      args_info->long_orig = 0;
    }
  if (args_info->limited_arg)
    {
      for (i = 0; i < args_info->limited_given; ++i)
        {
          if (args_info->limited_arg [i])
            {
              free (args_info->limited_arg [i]); /* free previous argument */
              args_info->limited_arg [i] = 0;
            }
          if (args_info->limited_orig [i])
            {
              free (args_info->limited_orig [i]); /* free previous argument */
              args_info->limited_orig [i] = 0;
            }
        }
      if (args_info->limited_arg [0])
        free (args_info->limited_arg [0]); /* free default string */
      free (args_info->limited_arg); /* free previous argument */
      args_info->limited_arg = 0;
      free (args_info->limited_orig); /* free previous argument */
      args_info->limited_orig = 0;
    }
  if (args_info->limited_interval_arg)
    {
      for (i = 0; i < args_info->limited_interval_given; ++i)
        {
          if (args_info->limited_interval_arg [i])
            {
              free (args_info->limited_interval_arg [i]); /* free previous argument */
              args_info->limited_interval_arg [i] = 0;
            }
          if (args_info->limited_interval_orig [i])
            {
              free (args_info->limited_interval_orig [i]); /* free previous argument */
              args_info->limited_interval_orig [i] = 0;
            }
        }
      if (args_info->limited_interval_arg [0])
        free (args_info->limited_interval_arg [0]); /* free default string */
      free (args_info->limited_interval_arg); /* free previous argument */
      args_info->limited_interval_arg = 0;
      free (args_info->limited_interval_orig); /* free previous argument */
      args_info->limited_interval_orig = 0;
    }
  if (args_info->big_limited_interval_arg)
    {
      for (i = 0; i < args_info->big_limited_interval_given; ++i)
        {
          if (args_info->big_limited_interval_arg [i])
            {
              free (args_info->big_limited_interval_arg [i]); /* free previous argument */
              args_info->big_limited_interval_arg [i] = 0;
            }
          if (args_info->big_limited_interval_orig [i])
            {
              free (args_info->big_limited_interval_orig [i]); /* free previous argument */
              args_info->big_limited_interval_orig [i] = 0;
            }
        }
      if (args_info->big_limited_interval_arg [0])
        free (args_info->big_limited_interval_arg [0]); /* free default string */
      free (args_info->big_limited_interval_arg); /* free previous argument */
      args_info->big_limited_interval_arg = 0;
      free (args_info->big_limited_interval_orig); /* free previous argument */
      args_info->big_limited_interval_orig = 0;
    }
  if (args_info->limited_open_right_arg)
    {
      for (i = 0; i < args_info->limited_open_right_given; ++i)
        {
          if (args_info->limited_open_right_arg [i])
            {
              free (args_info->limited_open_right_arg [i]); /* free previous argument */
              args_info->limited_open_right_arg [i] = 0;
            }
          if (args_info->limited_open_right_orig [i])
            {
              free (args_info->limited_open_right_orig [i]); /* free previous argument */
              args_info->limited_open_right_orig [i] = 0;
            }
        }
      if (args_info->limited_open_right_arg [0])
        free (args_info->limited_open_right_arg [0]); /* free default string */
      free (args_info->limited_open_right_arg); /* free previous argument */
      args_info->limited_open_right_arg = 0;
      free (args_info->limited_open_right_orig); /* free previous argument */
      args_info->limited_open_right_orig = 0;
    }
  if (args_info->limited_open_left_arg)
    {
      for (i = 0; i < args_info->limited_open_left_given; ++i)
        {
          if (args_info->limited_open_left_arg [i])
            {
              free (args_info->limited_open_left_arg [i]); /* free previous argument */
              args_info->limited_open_left_arg [i] = 0;
            }
          if (args_info->limited_open_left_orig [i])
            {
              free (args_info->limited_open_left_orig [i]); /* free previous argument */
              args_info->limited_open_left_orig [i] = 0;
            }
        }
      if (args_info->limited_open_left_arg [0])
        free (args_info->limited_open_left_arg [0]); /* free default string */
      free (args_info->limited_open_left_arg); /* free previous argument */
      args_info->limited_open_left_arg = 0;
      free (args_info->limited_open_left_orig); /* free previous argument */
      args_info->limited_open_left_orig = 0;
    }
  if (args_info->float_arg)
    {
      for (i = 0; i < args_info->float_given; ++i)
        {
          if (args_info->float_orig [i])
            {
              free (args_info->float_orig [i]); /* free previous argument */
              args_info->float_orig [i] = 0;
            }
        }
      free (args_info->float_arg); /* free previous argument */
      args_info->float_arg = 0;
      free (args_info->float_orig); /* free previous argument */
      args_info->float_orig = 0;
    }
  if (args_info->no_short_opt_arg)
    {
      for (i = 0; i < args_info->no_short_opt_given; ++i)
        {
          if (args_info->no_short_opt_arg [i])
            {
              free (args_info->no_short_opt_arg [i]); /* free previous argument */
              args_info->no_short_opt_arg [i] = 0;
            }
          if (args_info->no_short_opt_orig [i])
            {
              free (args_info->no_short_opt_orig [i]); /* free previous argument */
              args_info->no_short_opt_orig [i] = 0;
            }
        }
      if (args_info->no_short_opt_arg [0])
        free (args_info->no_short_opt_arg [0]); /* free default string */
      free (args_info->no_short_opt_arg); /* free previous argument */
      args_info->no_short_opt_arg = 0;
      free (args_info->no_short_opt_orig); /* free previous argument */
      args_info->no_short_opt_orig = 0;
    }
  if (args_info->optarg_arg)
    {
      for (i = 0; i < args_info->optarg_given; ++i)
        {
          if (args_info->optarg_arg [i])
            {
              free (args_info->optarg_arg [i]); /* free previous argument */
              args_info->optarg_arg [i] = 0;
            }
          if (args_info->optarg_orig [i])
            {
              free (args_info->optarg_orig [i]); /* free previous argument */
              args_info->optarg_orig [i] = 0;
            }
        }
      if (args_info->optarg_arg [0])
        free (args_info->optarg_arg [0]); /* free default string */
      free (args_info->optarg_arg); /* free previous argument */
      args_info->optarg_arg = 0;
      free (args_info->optarg_orig); /* free previous argument */
      args_info->optarg_orig = 0;
    }
  if (args_info->optarg_noshort_arg)
    {
      for (i = 0; i < args_info->optarg_noshort_given; ++i)
        {
          if (args_info->optarg_noshort_arg [i])
            {
              free (args_info->optarg_noshort_arg [i]); /* free previous argument */
              args_info->optarg_noshort_arg [i] = 0;
            }
          if (args_info->optarg_noshort_orig [i])
            {
              free (args_info->optarg_noshort_orig [i]); /* free previous argument */
              args_info->optarg_noshort_orig [i] = 0;
            }
        }
      if (args_info->optarg_noshort_arg [0])
        free (args_info->optarg_noshort_arg [0]); /* free default string */
      free (args_info->optarg_noshort_arg); /* free previous argument */
      args_info->optarg_noshort_arg = 0;
      free (args_info->optarg_noshort_orig); /* free previous argument */
      args_info->optarg_noshort_orig = 0;
    }
  if (args_info->file_save_arg)
    {
      free (args_info->file_save_arg); /* free previous argument */
      args_info->file_save_arg = 0;
    }
  if (args_info->file_save_orig)
    {
      free (args_info->file_save_orig); /* free previous argument */
      args_info->file_save_orig = 0;
    }
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);
  
  if (args_info->inputs_num)
    free (args_info->inputs);
  
  clear_given (args_info);
}

int
test_multiple_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  if (args_info->string_orig)
    {
      for (i = 0; i < args_info->string_given; ++i)
        {
          if (args_info->string_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "string", args_info->string_orig [i]);
            }
        }
    }
  if (args_info->int_orig)
    {
      for (i = 0; i < args_info->int_given; ++i)
        {
          if (args_info->int_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "int", args_info->int_orig [i]);
            }
        }
    }
  if (args_info->short_orig)
    {
      for (i = 0; i < args_info->short_given; ++i)
        {
          if (args_info->short_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "short", args_info->short_orig [i]);
            }
        }
    }
  if (args_info->long_orig)
    {
      for (i = 0; i < args_info->long_given; ++i)
        {
          if (args_info->long_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "long", args_info->long_orig [i]);
            }
        }
    }
  if (args_info->limited_orig)
    {
      for (i = 0; i < args_info->limited_given; ++i)
        {
          if (args_info->limited_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "limited", args_info->limited_orig [i]);
            }
        }
    }
  if (args_info->limited_interval_orig)
    {
      for (i = 0; i < args_info->limited_interval_given; ++i)
        {
          if (args_info->limited_interval_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "limited-interval", args_info->limited_interval_orig [i]);
            }
        }
    }
  if (args_info->big_limited_interval_orig)
    {
      for (i = 0; i < args_info->big_limited_interval_given; ++i)
        {
          if (args_info->big_limited_interval_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "big-limited-interval", args_info->big_limited_interval_orig [i]);
            }
        }
    }
  if (args_info->limited_open_right_orig)
    {
      for (i = 0; i < args_info->limited_open_right_given; ++i)
        {
          if (args_info->limited_open_right_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "limited-open-right", args_info->limited_open_right_orig [i]);
            }
        }
    }
  if (args_info->limited_open_left_orig)
    {
      for (i = 0; i < args_info->limited_open_left_given; ++i)
        {
          if (args_info->limited_open_left_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "limited-open-left", args_info->limited_open_left_orig [i]);
            }
        }
    }
  if (args_info->float_orig)
    {
      for (i = 0; i < args_info->float_given; ++i)
        {
          if (args_info->float_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "float", args_info->float_orig [i]);
            }
        }
    }
  if (args_info->no_short_opt_orig)
    {
      for (i = 0; i < args_info->no_short_opt_given; ++i)
        {
          if (args_info->no_short_opt_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "no-short-opt", args_info->no_short_opt_orig [i]);
            }
        }
    }
  for (i = 0; i < args_info->noarg_given; ++i)
    {
      fprintf(outfile, "%s\n", "noarg");
      
    }
  for (i = 0; i < args_info->noarg_noshort_given; ++i)
    {
      fprintf(outfile, "%s\n", "noarg-noshort");
      
    }
  if (args_info->optarg_orig)
    {
      for (i = 0; i < args_info->optarg_given; ++i)
        {
          if (args_info->optarg_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "optarg", args_info->optarg_orig [i]);
            }
        }
    }
  if (args_info->optarg_noshort_orig)
    {
      for (i = 0; i < args_info->optarg_noshort_given; ++i)
        {
          if (args_info->optarg_noshort_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "optarg-noshort", args_info->optarg_noshort_orig [i]);
            }
        }
    }
  if (args_info->file_save_given) {
    if (args_info->file_save_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "file-save", args_info->file_save_orig);
    } else {
      fprintf(outfile, "%s\n", "file-save");
    }
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
test_multiple_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  test_multiple_cmd_parser_release (args_info);
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  char *tok, *ret;
  size_t len, num_of_escape;
  int i, j;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static char *
get_multiple_arg_token_next(const char *arg)
{
  char *tok;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, int min, int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, int min, int max, const char *option_desc)
{
  int error = 0;

  if (option_given && ! (min < 0 && max < 0))
    {
      if (min >= 0 && max >= 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error = 1;
                }
            }
          else if (option_given < min
              || option_given > max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error = 1;
            }
        }
      else if (min >= 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error = 1;
            }
        }
      else if (max >= 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error = 1;
            }
        }
    }
    
  return error;
}
int
test_multiple_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return test_multiple_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
test_multiple_cmd_parser_ext (int argc, char * const *argv, struct gengetopt_args_info *args_info,
                   struct test_multiple_cmd_parser_params *params)
{
  int result;
  result = test_multiple_cmd_parser_internal (argc, argv, args_info, params, NULL);

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct test_multiple_cmd_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;

  result = test_multiple_cmd_parser_internal (argc, argv, args_info, &params, NULL);

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (test_multiple_cmd_parser_required2(args_info, prog_name, NULL) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error = 0;

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->string_given, args_info->string_min, args_info->string_max, "'--string' ('-s')"))
     error = 1;
  
  if (! args_info->int_given)
    {
      fprintf (stderr, "%s: '--int' ('-i') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  if (check_multiple_option_occurrences(prog_name, args_info->int_given, args_info->int_min, args_info->int_max, "'--int' ('-i')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->short_given, args_info->short_min, args_info->short_max, "'--short' ('-S')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->long_given, args_info->long_min, args_info->long_max, "'--long' ('-l')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_given, args_info->limited_min, args_info->limited_max, "'--limited' ('-L')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_interval_given, args_info->limited_interval_min, args_info->limited_interval_max, "'--limited-interval'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->big_limited_interval_given, args_info->big_limited_interval_min, args_info->big_limited_interval_max, "'--big-limited-interval'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_open_right_given, args_info->limited_open_right_min, args_info->limited_open_right_max, "'--limited-open-right'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_open_left_given, args_info->limited_open_left_min, args_info->limited_open_left_max, "'--limited-open-left'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->float_given, args_info->float_min, args_info->float_max, "'--float' ('-f')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->no_short_opt_given, args_info->no_short_opt_min, args_info->no_short_opt_max, "'--no-short-opt'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->noarg_given, args_info->noarg_min, args_info->noarg_max, "'--noarg' ('-n')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->noarg_noshort_given, args_info->noarg_noshort_min, args_info->noarg_noshort_max, "'--noarg-noshort'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->optarg_given, args_info->optarg_min, args_info->optarg_max, "'--optarg' ('-M')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->optarg_noshort_given, args_info->optarg_noshort_min, args_info->optarg_noshort_max, "'--optarg-noshort'"))
     error = 1;
  
  
  /* checks for dependences among options */

  return error;
}

int
test_multiple_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info,
                        struct test_multiple_cmd_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  char *multi_token, *multi_next; /* for multiple options */

  int i;        /* Counter */

  struct string_list * string_list = NULL,* string_new = NULL;
  struct int_list * int_list = NULL,* int_new = NULL;
  struct short_list * short_list = NULL,* short_new = NULL;
  struct long_list * long_list = NULL,* long_new = NULL;
  struct string_list * limited_list = NULL,* limited_new = NULL;
  struct string_list * limited_interval_list = NULL,* limited_interval_new = NULL;
  struct string_list * big_limited_interval_list = NULL,* big_limited_interval_new = NULL;
  struct string_list * limited_open_right_list = NULL,* limited_open_right_new = NULL;
  struct string_list * limited_open_left_list = NULL,* limited_open_left_new = NULL;
  struct float_list * float_list = NULL,* float_new = NULL;
  struct string_list * no_short_opt_list = NULL,* no_short_opt_new = NULL;
  struct string_list * optarg_list = NULL,* optarg_new = NULL;
  struct string_list * optarg_noshort_list = NULL,* optarg_noshort_new = NULL;
  int error = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    test_multiple_cmd_parser_init (args_info);

  test_multiple_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "string",	1, NULL, 's' },
        { "int",	1, NULL, 'i' },
        { "short",	1, NULL, 'S' },
        { "long",	1, NULL, 'l' },
        { "limited",	1, NULL, 'L' },
        { "limited-interval",	1, NULL, 0 },
        { "big-limited-interval",	1, NULL, 0 },
        { "limited-open-right",	1, NULL, 0 },
        { "limited-open-left",	1, NULL, 0 },
        { "float",	1, NULL, 'f' },
        { "no-short-opt",	1, NULL, 0 },
        { "noarg",	0, NULL, 'n' },
        { "noarg-noshort",	0, NULL, 0 },
        { "optarg",	2, NULL, 'M' },
        { "optarg-noshort",	2, NULL, 0 },
        { "file-save",	1, NULL, 0 },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hVs:i:S:l:L:f:nM::", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          test_multiple_cmd_parser_print_help ();
          test_multiple_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          test_multiple_cmd_parser_print_version ();
          test_multiple_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 's':	/* string option.  */
          local_args_info.string_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              string_new = (struct string_list *) malloc (sizeof (struct string_list));
              string_new->next = string_list;
              string_list = string_new;
              string_new->arg = gengetopt_strdup (multi_token);
              string_new->orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.string_given++;
                }
              else
                break;
            }
          break;

        case 'i':	/* int option.  */
          local_args_info.int_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              int_new = (struct int_list *) malloc (sizeof (struct int_list));
              int_new->next = int_list;
              int_list = int_new;
              int_new->arg = strtol (multi_token, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              int_new->orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.int_given++;
                }
              else
                break;
            }
          break;

        case 'S':	/* short option.  */
          local_args_info.short_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              short_new = (struct short_list *) malloc (sizeof (struct short_list));
              short_new->next = short_list;
              short_list = short_new;
              short_new->arg = (short)strtol (multi_token, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              short_new->orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.short_given++;
                }
              else
                break;
            }
          break;

        case 'l':	/* long option.  */
          local_args_info.long_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              long_new = (struct long_list *) malloc (sizeof (struct long_list));
              long_new->next = long_list;
              long_list = long_new;
              long_new->arg = strtol (multi_token, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              long_new->orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.long_given++;
                }
              else
                break;
            }
          break;

        case 'L':	/* limited multiple option.  */
          local_args_info.limited_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              limited_new = (struct string_list *) malloc (sizeof (struct string_list));
              limited_new->next = limited_list;
              limited_list = limited_new;
              limited_new->arg = gengetopt_strdup (multi_token);
              limited_new->orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.limited_given++;
                }
              else
                break;
            }
          break;

        case 'f':	/* float option.  */
          local_args_info.float_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              float_new = (struct float_list *) malloc (sizeof (struct float_list));
              float_new->next = float_list;
              float_list = float_new;
              float_new->arg = (float)strtod (multi_token, &stop_char);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              float_new->orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.float_given++;
                }
              else
                break;
            }
          break;

        case 'n':	/* multiple option with no arg.  */
          local_args_info.noarg_given++;
        
          break;

        case 'M':	/* multi with optional args.  */
          local_args_info.optarg_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              optarg_new = (struct string_list *) malloc (sizeof (struct string_list));
              optarg_new->next = optarg_list;
              optarg_list = optarg_new;
              optarg_new->arg = gengetopt_strdup (NULL);
              optarg_new->orig = NULL;
              if (multi_token)
                {
                  optarg_new->arg = gengetopt_strdup (multi_token);
                  optarg_new->orig = multi_token;
                }
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.optarg_given++;
                }
              else
                break;
            }
          break;


        case 0:	/* Long option with no short option */
          /* limited multiple option (with interval).  */
          if (strcmp (long_options[option_index].name, "limited-interval") == 0)
          {
            local_args_info.limited_interval_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                limited_interval_new = (struct string_list *) malloc (sizeof (struct string_list));
                limited_interval_new->next = limited_interval_list;
                limited_interval_list = limited_interval_new;
                limited_interval_new->arg = gengetopt_strdup (multi_token);
                limited_interval_new->orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.limited_interval_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* limited multiple option (with interval).  */
          else if (strcmp (long_options[option_index].name, "big-limited-interval") == 0)
          {
            local_args_info.big_limited_interval_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                big_limited_interval_new = (struct string_list *) malloc (sizeof (struct string_list));
                big_limited_interval_new->next = big_limited_interval_list;
                big_limited_interval_list = big_limited_interval_new;
                big_limited_interval_new->arg = gengetopt_strdup (multi_token);
                big_limited_interval_new->orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.big_limited_interval_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* limited multiple option (with interval right open).  */
          else if (strcmp (long_options[option_index].name, "limited-open-right") == 0)
          {
            local_args_info.limited_open_right_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                limited_open_right_new = (struct string_list *) malloc (sizeof (struct string_list));
                limited_open_right_new->next = limited_open_right_list;
                limited_open_right_list = limited_open_right_new;
                limited_open_right_new->arg = gengetopt_strdup (multi_token);
                limited_open_right_new->orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.limited_open_right_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* limited multiple option (with interval left open).  */
          else if (strcmp (long_options[option_index].name, "limited-open-left") == 0)
          {
            local_args_info.limited_open_left_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                limited_open_left_new = (struct string_list *) malloc (sizeof (struct string_list));
                limited_open_left_new->next = limited_open_left_list;
                limited_open_left_list = limited_open_left_new;
                limited_open_left_new->arg = gengetopt_strdup (multi_token);
                limited_open_left_new->orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.limited_open_left_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* string option with no short.  */
          else if (strcmp (long_options[option_index].name, "no-short-opt") == 0)
          {
            local_args_info.no_short_opt_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                no_short_opt_new = (struct string_list *) malloc (sizeof (struct string_list));
                no_short_opt_new->next = no_short_opt_list;
                no_short_opt_list = no_short_opt_new;
                no_short_opt_new->arg = gengetopt_strdup (multi_token);
                no_short_opt_new->orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.no_short_opt_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* multiple option with no arg and no short.  */
          else if (strcmp (long_options[option_index].name, "noarg-noshort") == 0)
          {
            local_args_info.noarg_noshort_given++;
          
            break;
          }
          /* multi with optional args and no short.  */
          else if (strcmp (long_options[option_index].name, "optarg-noshort") == 0)
          {
            local_args_info.optarg_noshort_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                optarg_noshort_new = (struct string_list *) malloc (sizeof (struct string_list));
                optarg_noshort_new->next = optarg_noshort_list;
                optarg_noshort_list = optarg_noshort_new;
                optarg_noshort_new->arg = gengetopt_strdup (NULL);
                optarg_noshort_new->orig = NULL;
                if (multi_token)
                  {
                    optarg_noshort_new->arg = gengetopt_strdup (multi_token);
                    optarg_noshort_new->orig = multi_token;
                  }
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.optarg_noshort_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* save the passed options into a file.  */
          else if (strcmp (long_options[option_index].name, "file-save") == 0)
          {
            if (local_args_info.file_save_given || (check_ambiguity && args_info->file_save_given))
              {
                fprintf (stderr, "%s: `--file-save' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->file_save_given && ! override)
              continue;
            local_args_info.file_save_given = 1;
            args_info->file_save_given = 1;
            if (args_info->file_save_arg)
              free (args_info->file_save_arg); /* free previous string */
            args_info->file_save_arg = gengetopt_strdup (optarg);
            if (args_info->file_save_orig)
              free (args_info->file_save_orig); /* free previous string */
            args_info->file_save_orig = gengetopt_strdup (optarg);
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  if (local_args_info.string_given && string_list)
    {
      struct string_list *tmp;
      args_info->string_arg = (char * *) realloc (args_info->string_arg, (args_info->string_given + local_args_info.string_given) * sizeof (char *));
      args_info->string_orig = (char **) realloc (args_info->string_orig, (args_info->string_given + local_args_info.string_given) * sizeof (char *));
      for (i = (local_args_info.string_given - 1); i >= 0; --i)
        {
          tmp = string_list;
          args_info->string_arg [i + args_info->string_given] = string_list->arg;
          args_info->string_orig [i + args_info->string_given] = string_list->orig;
          string_list = string_list->next;
          free (tmp);
        }
    }
  else /* set the default value */
    {
      if (! args_info->string_arg && ! args_info->string_given)
        {
          args_info->string_arg = (char * *) malloc (sizeof (char *));
          args_info->string_arg [0] = gengetopt_strdup("foo");
          args_info->string_orig = (char **) malloc (sizeof (char *));
          args_info->string_orig [0] = NULL;
        }
    }
  
  if (local_args_info.int_given && int_list)
    {
      struct int_list *tmp;
      args_info->int_arg = (int *) realloc (args_info->int_arg, (args_info->int_given + local_args_info.int_given) * sizeof (int));
      args_info->int_orig = (char **) realloc (args_info->int_orig, (args_info->int_given + local_args_info.int_given) * sizeof (char *));
      for (i = (local_args_info.int_given - 1); i >= 0; --i)
        {
          tmp = int_list;
          args_info->int_arg [i + args_info->int_given] = int_list->arg;
          args_info->int_orig [i + args_info->int_given] = int_list->orig;
          int_list = int_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.short_given && short_list)
    {
      struct short_list *tmp;
      args_info->short_arg = (short *) realloc (args_info->short_arg, (args_info->short_given + local_args_info.short_given) * sizeof (short));
      args_info->short_orig = (char **) realloc (args_info->short_orig, (args_info->short_given + local_args_info.short_given) * sizeof (char *));
      for (i = (local_args_info.short_given - 1); i >= 0; --i)
        {
          tmp = short_list;
          args_info->short_arg [i + args_info->short_given] = short_list->arg;
          args_info->short_orig [i + args_info->short_given] = short_list->orig;
          short_list = short_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.long_given && long_list)
    {
      struct long_list *tmp;
      args_info->long_arg = (long *) realloc (args_info->long_arg, (args_info->long_given + local_args_info.long_given) * sizeof (long));
      args_info->long_orig = (char **) realloc (args_info->long_orig, (args_info->long_given + local_args_info.long_given) * sizeof (char *));
      for (i = (local_args_info.long_given - 1); i >= 0; --i)
        {
          tmp = long_list;
          args_info->long_arg [i + args_info->long_given] = long_list->arg;
          args_info->long_orig [i + args_info->long_given] = long_list->orig;
          long_list = long_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.limited_given && limited_list)
    {
      struct string_list *tmp;
      args_info->limited_arg = (char * *) realloc (args_info->limited_arg, (args_info->limited_given + local_args_info.limited_given) * sizeof (char *));
      args_info->limited_orig = (char **) realloc (args_info->limited_orig, (args_info->limited_given + local_args_info.limited_given) * sizeof (char *));
      for (i = (local_args_info.limited_given - 1); i >= 0; --i)
        {
          tmp = limited_list;
          args_info->limited_arg [i + args_info->limited_given] = limited_list->arg;
          args_info->limited_orig [i + args_info->limited_given] = limited_list->orig;
          limited_list = limited_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.limited_interval_given && limited_interval_list)
    {
      struct string_list *tmp;
      args_info->limited_interval_arg = (char * *) realloc (args_info->limited_interval_arg, (args_info->limited_interval_given + local_args_info.limited_interval_given) * sizeof (char *));
      args_info->limited_interval_orig = (char **) realloc (args_info->limited_interval_orig, (args_info->limited_interval_given + local_args_info.limited_interval_given) * sizeof (char *));
      for (i = (local_args_info.limited_interval_given - 1); i >= 0; --i)
        {
          tmp = limited_interval_list;
          args_info->limited_interval_arg [i + args_info->limited_interval_given] = limited_interval_list->arg;
          args_info->limited_interval_orig [i + args_info->limited_interval_given] = limited_interval_list->orig;
          limited_interval_list = limited_interval_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.big_limited_interval_given && big_limited_interval_list)
    {
      struct string_list *tmp;
      args_info->big_limited_interval_arg = (char * *) realloc (args_info->big_limited_interval_arg, (args_info->big_limited_interval_given + local_args_info.big_limited_interval_given) * sizeof (char *));
      args_info->big_limited_interval_orig = (char **) realloc (args_info->big_limited_interval_orig, (args_info->big_limited_interval_given + local_args_info.big_limited_interval_given) * sizeof (char *));
      for (i = (local_args_info.big_limited_interval_given - 1); i >= 0; --i)
        {
          tmp = big_limited_interval_list;
          args_info->big_limited_interval_arg [i + args_info->big_limited_interval_given] = big_limited_interval_list->arg;
          args_info->big_limited_interval_orig [i + args_info->big_limited_interval_given] = big_limited_interval_list->orig;
          big_limited_interval_list = big_limited_interval_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.limited_open_right_given && limited_open_right_list)
    {
      struct string_list *tmp;
      args_info->limited_open_right_arg = (char * *) realloc (args_info->limited_open_right_arg, (args_info->limited_open_right_given + local_args_info.limited_open_right_given) * sizeof (char *));
      args_info->limited_open_right_orig = (char **) realloc (args_info->limited_open_right_orig, (args_info->limited_open_right_given + local_args_info.limited_open_right_given) * sizeof (char *));
      for (i = (local_args_info.limited_open_right_given - 1); i >= 0; --i)
        {
          tmp = limited_open_right_list;
          args_info->limited_open_right_arg [i + args_info->limited_open_right_given] = limited_open_right_list->arg;
          args_info->limited_open_right_orig [i + args_info->limited_open_right_given] = limited_open_right_list->orig;
          limited_open_right_list = limited_open_right_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.limited_open_left_given && limited_open_left_list)
    {
      struct string_list *tmp;
      args_info->limited_open_left_arg = (char * *) realloc (args_info->limited_open_left_arg, (args_info->limited_open_left_given + local_args_info.limited_open_left_given) * sizeof (char *));
      args_info->limited_open_left_orig = (char **) realloc (args_info->limited_open_left_orig, (args_info->limited_open_left_given + local_args_info.limited_open_left_given) * sizeof (char *));
      for (i = (local_args_info.limited_open_left_given - 1); i >= 0; --i)
        {
          tmp = limited_open_left_list;
          args_info->limited_open_left_arg [i + args_info->limited_open_left_given] = limited_open_left_list->arg;
          args_info->limited_open_left_orig [i + args_info->limited_open_left_given] = limited_open_left_list->orig;
          limited_open_left_list = limited_open_left_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.float_given && float_list)
    {
      struct float_list *tmp;
      args_info->float_arg = (float *) realloc (args_info->float_arg, (args_info->float_given + local_args_info.float_given) * sizeof (float));
      args_info->float_orig = (char **) realloc (args_info->float_orig, (args_info->float_given + local_args_info.float_given) * sizeof (char *));
      for (i = (local_args_info.float_given - 1); i >= 0; --i)
        {
          tmp = float_list;
          args_info->float_arg [i + args_info->float_given] = float_list->arg;
          args_info->float_orig [i + args_info->float_given] = float_list->orig;
          float_list = float_list->next;
          free (tmp);
        }
    }
  else /* set the default value */
    {
      if (! args_info->float_arg && ! args_info->float_given)
        {
          args_info->float_arg = (float *) malloc (sizeof (float));
          args_info->float_arg [0] = 15000;
          args_info->float_orig = (char **) malloc (sizeof (char *));
          args_info->float_orig [0] = NULL;
        }
    }
  
  if (local_args_info.no_short_opt_given && no_short_opt_list)
    {
      struct string_list *tmp;
      args_info->no_short_opt_arg = (char * *) realloc (args_info->no_short_opt_arg, (args_info->no_short_opt_given + local_args_info.no_short_opt_given) * sizeof (char *));
      args_info->no_short_opt_orig = (char **) realloc (args_info->no_short_opt_orig, (args_info->no_short_opt_given + local_args_info.no_short_opt_given) * sizeof (char *));
      for (i = (local_args_info.no_short_opt_given - 1); i >= 0; --i)
        {
          tmp = no_short_opt_list;
          args_info->no_short_opt_arg [i + args_info->no_short_opt_given] = no_short_opt_list->arg;
          args_info->no_short_opt_orig [i + args_info->no_short_opt_given] = no_short_opt_list->orig;
          no_short_opt_list = no_short_opt_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.optarg_given && optarg_list)
    {
      struct string_list *tmp;
      args_info->optarg_arg = (char * *) realloc (args_info->optarg_arg, (args_info->optarg_given + local_args_info.optarg_given) * sizeof (char *));
      args_info->optarg_orig = (char **) realloc (args_info->optarg_orig, (args_info->optarg_given + local_args_info.optarg_given) * sizeof (char *));
      for (i = (local_args_info.optarg_given - 1); i >= 0; --i)
        {
          tmp = optarg_list;
          args_info->optarg_arg [i + args_info->optarg_given] = optarg_list->arg;
          args_info->optarg_orig [i + args_info->optarg_given] = optarg_list->orig;
          optarg_list = optarg_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.optarg_noshort_given && optarg_noshort_list)
    {
      struct string_list *tmp;
      args_info->optarg_noshort_arg = (char * *) realloc (args_info->optarg_noshort_arg, (args_info->optarg_noshort_given + local_args_info.optarg_noshort_given) * sizeof (char *));
      args_info->optarg_noshort_orig = (char **) realloc (args_info->optarg_noshort_orig, (args_info->optarg_noshort_given + local_args_info.optarg_noshort_given) * sizeof (char *));
      for (i = (local_args_info.optarg_noshort_given - 1); i >= 0; --i)
        {
          tmp = optarg_noshort_list;
          args_info->optarg_noshort_arg [i + args_info->optarg_noshort_given] = optarg_noshort_list->arg;
          args_info->optarg_noshort_orig [i + args_info->optarg_noshort_given] = optarg_noshort_list->orig;
          optarg_noshort_list = optarg_noshort_list->next;
          free (tmp);
        }
    }
  

  args_info->string_given += local_args_info.string_given;
  local_args_info.string_given = 0;
  args_info->int_given += local_args_info.int_given;
  local_args_info.int_given = 0;
  args_info->short_given += local_args_info.short_given;
  local_args_info.short_given = 0;
  args_info->long_given += local_args_info.long_given;
  local_args_info.long_given = 0;
  args_info->limited_given += local_args_info.limited_given;
  local_args_info.limited_given = 0;
  args_info->limited_interval_given += local_args_info.limited_interval_given;
  local_args_info.limited_interval_given = 0;
  args_info->big_limited_interval_given += local_args_info.big_limited_interval_given;
  local_args_info.big_limited_interval_given = 0;
  args_info->limited_open_right_given += local_args_info.limited_open_right_given;
  local_args_info.limited_open_right_given = 0;
  args_info->limited_open_left_given += local_args_info.limited_open_left_given;
  local_args_info.limited_open_left_given = 0;
  args_info->float_given += local_args_info.float_given;
  local_args_info.float_given = 0;
  args_info->no_short_opt_given += local_args_info.no_short_opt_given;
  local_args_info.no_short_opt_given = 0;
  args_info->noarg_given += local_args_info.noarg_given;
  local_args_info.noarg_given = 0;
  args_info->noarg_noshort_given += local_args_info.noarg_noshort_given;
  local_args_info.noarg_noshort_given = 0;
  args_info->optarg_given += local_args_info.optarg_given;
  local_args_info.optarg_given = 0;
  args_info->optarg_noshort_given += local_args_info.optarg_noshort_given;
  local_args_info.optarg_noshort_given = 0;
  
  if (check_required)
    {
      error += test_multiple_cmd_parser_required2 (args_info, argv[0], additional_error);
    }

  test_multiple_cmd_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  if (string_list)
    {
      struct string_list *tmp;
      while (string_list)
        {
          tmp = string_list;
          free (string_list->arg);
          free (string_list->orig);
          string_list = string_list->next;
          free (tmp);
        }
    }
  if (int_list)
    {
      struct int_list *tmp;
      while (int_list)
        {
          tmp = int_list;
          free (int_list->orig);
          int_list = int_list->next;
          free (tmp);
        }
    }
  if (short_list)
    {
      struct short_list *tmp;
      while (short_list)
        {
          tmp = short_list;
          free (short_list->orig);
          short_list = short_list->next;
          free (tmp);
        }
    }
  if (long_list)
    {
      struct long_list *tmp;
      while (long_list)
        {
          tmp = long_list;
          free (long_list->orig);
          long_list = long_list->next;
          free (tmp);
        }
    }
  if (limited_list)
    {
      struct string_list *tmp;
      while (limited_list)
        {
          tmp = limited_list;
          free (limited_list->arg);
          free (limited_list->orig);
          limited_list = limited_list->next;
          free (tmp);
        }
    }
  if (limited_interval_list)
    {
      struct string_list *tmp;
      while (limited_interval_list)
        {
          tmp = limited_interval_list;
          free (limited_interval_list->arg);
          free (limited_interval_list->orig);
          limited_interval_list = limited_interval_list->next;
          free (tmp);
        }
    }
  if (big_limited_interval_list)
    {
      struct string_list *tmp;
      while (big_limited_interval_list)
        {
          tmp = big_limited_interval_list;
          free (big_limited_interval_list->arg);
          free (big_limited_interval_list->orig);
          big_limited_interval_list = big_limited_interval_list->next;
          free (tmp);
        }
    }
  if (limited_open_right_list)
    {
      struct string_list *tmp;
      while (limited_open_right_list)
        {
          tmp = limited_open_right_list;
          free (limited_open_right_list->arg);
          free (limited_open_right_list->orig);
          limited_open_right_list = limited_open_right_list->next;
          free (tmp);
        }
    }
  if (limited_open_left_list)
    {
      struct string_list *tmp;
      while (limited_open_left_list)
        {
          tmp = limited_open_left_list;
          free (limited_open_left_list->arg);
          free (limited_open_left_list->orig);
          limited_open_left_list = limited_open_left_list->next;
          free (tmp);
        }
    }
  if (float_list)
    {
      struct float_list *tmp;
      while (float_list)
        {
          tmp = float_list;
          free (float_list->orig);
          float_list = float_list->next;
          free (tmp);
        }
    }
  if (no_short_opt_list)
    {
      struct string_list *tmp;
      while (no_short_opt_list)
        {
          tmp = no_short_opt_list;
          free (no_short_opt_list->arg);
          free (no_short_opt_list->orig);
          no_short_opt_list = no_short_opt_list->next;
          free (tmp);
        }
    }
  if (optarg_list)
    {
      struct string_list *tmp;
      while (optarg_list)
        {
          tmp = optarg_list;
          free (optarg_list->arg);
          free (optarg_list->orig);
          optarg_list = optarg_list->next;
          free (tmp);
        }
    }
  if (optarg_noshort_list)
    {
      struct string_list *tmp;
      while (optarg_noshort_list)
        {
          tmp = optarg_noshort_list;
          free (optarg_noshort_list->arg);
          free (optarg_noshort_list->orig);
          optarg_noshort_list = optarg_noshort_list->next;
          free (tmp);
        }
    }
  
  test_multiple_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
