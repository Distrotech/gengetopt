/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=test_multiple_cmd.ggo --func-name=test_multiple_cmd_parser --file-name=test_multiple_cmd --unamed-opt 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "test_multiple_cmd.h"

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
test_multiple_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error);

static int
test_multiple_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);

struct string_list
{
  char * string_arg;
  char *string_orig;
  struct string_list * next;
};

struct int_list
{
  int int_arg;
  char *int_orig;
  struct int_list * next;
};

struct short_list
{
  short short_arg;
  char *short_orig;
  struct short_list * next;
};

struct long_list
{
  long long_arg;
  char *long_orig;
  struct long_list * next;
};

struct float_list
{
  float float_arg;
  char *float_orig;
  struct float_list * next;
};

struct no_short_opt_list
{
  char * no_short_opt_arg;
  char *no_short_opt_orig;
  struct no_short_opt_list * next;
};

struct optarg_list
{
  char * optarg_arg;
  char *optarg_orig;
  struct optarg_list * next;
};

struct optarg_noshort_list
{
  char * optarg_noshort_arg;
  char *optarg_noshort_orig;
  struct optarg_noshort_list * next;
};

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->string_given = 0 ;
  args_info->int_given = 0 ;
  args_info->short_given = 0 ;
  args_info->long_given = 0 ;
  args_info->float_given = 0 ;
  args_info->no_short_opt_given = 0 ;
  args_info->noarg_given = 0 ;
  args_info->noarg_noshort_given = 0 ;
  args_info->optarg_given = 0 ;
  args_info->optarg_noshort_given = 0 ;
  args_info->file_save_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->string_arg = NULL;
  args_info->string_orig = NULL;
  args_info->int_arg = NULL;
  args_info->int_orig = NULL;
  args_info->short_arg = NULL;
  args_info->short_orig = NULL;
  args_info->long_arg = NULL;
  args_info->long_orig = NULL;
  args_info->float_arg = NULL;
  args_info->float_orig = NULL;
  args_info->no_short_opt_arg = NULL;
  args_info->no_short_opt_orig = NULL;
  args_info->optarg_arg = NULL;
  args_info->optarg_orig = NULL;
  args_info->optarg_noshort_arg = NULL;
  args_info->optarg_noshort_orig = NULL;
  args_info->file_save_arg = NULL;
  args_info->file_save_orig = NULL;
  
}

void
test_multiple_cmd_parser_print_version (void)
{
  printf ("%s %s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, TEST_MULTIPLE_CMD_PARSER_VERSION);
}

void
test_multiple_cmd_parser_print_help (void)
{
  test_multiple_cmd_parser_print_version ();
  printf("\nUsage: test_multiple [OPTIONS]... [FILES]...\n\n");
  printf("%s\n","  -h, --help                 Print help and exit");
  printf("%s\n","  -V, --version              Print version and exit");
  printf("%s\n","  -s, --string=STRING        string option  (default=`foo')");
  printf("%s\n","  -i, --int=INT              int option");
  printf("%s\n","  -S, --short=SHORT          short option");
  printf("%s\n","  -l, --long=LONG            long option");
  printf("%s\n","  -f, --float=FLOAT          float option  (default=`15000')");
  printf("%s\n","      --no-short-opt=STRING  string option with no short");
  printf("%s\n","  -n, --noarg                multiple option with no arg");
  printf("%s\n","      --noarg-noshort        multiple option with no arg and no short");
  printf("%s\n","  -M, --optarg[=ID]          multi with optional args");
  printf("%s\n","      --optarg-noshort[=ID]  multi with optional args and no short");
  printf("%s\n","      --file-save=STRING     save the passed options into a file");
  
}

void
test_multiple_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);

  args_info->inputs = NULL;
  args_info->inputs_num = 0;
}

static void
test_multiple_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  
  unsigned int i;
  if (args_info->string_arg)
    {
      for (i = 0; i < args_info->string_given; ++i)
        {
          if (args_info->string_arg [i])
            {
              free (args_info->string_arg [i]); /* free previous argument */
              args_info->string_arg [i] = 0;
            }
          if (args_info->string_orig [i])
            {
              free (args_info->string_orig [i]); /* free previous argument */
              args_info->string_orig [i] = 0;
            }
        }
      if (args_info->string_arg [0])
        free (args_info->string_arg [0]); /* free default string */
      free (args_info->string_arg); /* free previous argument */
      args_info->string_arg = 0;
      free (args_info->string_orig); /* free previous argument */
      args_info->string_orig = 0;
    }
  if (args_info->int_arg)
    {
      for (i = 0; i < args_info->int_given; ++i)
        {
          if (args_info->int_orig [i])
            {
              free (args_info->int_orig [i]); /* free previous argument */
              args_info->int_orig [i] = 0;
            }
        }
      free (args_info->int_arg); /* free previous argument */
      args_info->int_arg = 0;
      free (args_info->int_orig); /* free previous argument */
      args_info->int_orig = 0;
    }
  if (args_info->short_arg)
    {
      for (i = 0; i < args_info->short_given; ++i)
        {
          if (args_info->short_orig [i])
            {
              free (args_info->short_orig [i]); /* free previous argument */
              args_info->short_orig [i] = 0;
            }
        }
      free (args_info->short_arg); /* free previous argument */
      args_info->short_arg = 0;
      free (args_info->short_orig); /* free previous argument */
      args_info->short_orig = 0;
    }
  if (args_info->long_arg)
    {
      for (i = 0; i < args_info->long_given; ++i)
        {
          if (args_info->long_orig [i])
            {
              free (args_info->long_orig [i]); /* free previous argument */
              args_info->long_orig [i] = 0;
            }
        }
      free (args_info->long_arg); /* free previous argument */
      args_info->long_arg = 0;
      free (args_info->long_orig); /* free previous argument */
      args_info->long_orig = 0;
    }
  if (args_info->float_arg)
    {
      for (i = 0; i < args_info->float_given; ++i)
        {
          if (args_info->float_orig [i])
            {
              free (args_info->float_orig [i]); /* free previous argument */
              args_info->float_orig [i] = 0;
            }
        }
      free (args_info->float_arg); /* free previous argument */
      args_info->float_arg = 0;
      free (args_info->float_orig); /* free previous argument */
      args_info->float_orig = 0;
    }
  if (args_info->no_short_opt_arg)
    {
      for (i = 0; i < args_info->no_short_opt_given; ++i)
        {
          if (args_info->no_short_opt_arg [i])
            {
              free (args_info->no_short_opt_arg [i]); /* free previous argument */
              args_info->no_short_opt_arg [i] = 0;
            }
          if (args_info->no_short_opt_orig [i])
            {
              free (args_info->no_short_opt_orig [i]); /* free previous argument */
              args_info->no_short_opt_orig [i] = 0;
            }
        }
      if (args_info->no_short_opt_arg [0])
        free (args_info->no_short_opt_arg [0]); /* free default string */
      free (args_info->no_short_opt_arg); /* free previous argument */
      args_info->no_short_opt_arg = 0;
      free (args_info->no_short_opt_orig); /* free previous argument */
      args_info->no_short_opt_orig = 0;
    }
  if (args_info->optarg_arg)
    {
      for (i = 0; i < args_info->optarg_given; ++i)
        {
          if (args_info->optarg_arg [i])
            {
              free (args_info->optarg_arg [i]); /* free previous argument */
              args_info->optarg_arg [i] = 0;
            }
          if (args_info->optarg_orig [i])
            {
              free (args_info->optarg_orig [i]); /* free previous argument */
              args_info->optarg_orig [i] = 0;
            }
        }
      if (args_info->optarg_arg [0])
        free (args_info->optarg_arg [0]); /* free default string */
      free (args_info->optarg_arg); /* free previous argument */
      args_info->optarg_arg = 0;
      free (args_info->optarg_orig); /* free previous argument */
      args_info->optarg_orig = 0;
    }
  if (args_info->optarg_noshort_arg)
    {
      for (i = 0; i < args_info->optarg_noshort_given; ++i)
        {
          if (args_info->optarg_noshort_arg [i])
            {
              free (args_info->optarg_noshort_arg [i]); /* free previous argument */
              args_info->optarg_noshort_arg [i] = 0;
            }
          if (args_info->optarg_noshort_orig [i])
            {
              free (args_info->optarg_noshort_orig [i]); /* free previous argument */
              args_info->optarg_noshort_orig [i] = 0;
            }
        }
      if (args_info->optarg_noshort_arg [0])
        free (args_info->optarg_noshort_arg [0]); /* free default string */
      free (args_info->optarg_noshort_arg); /* free previous argument */
      args_info->optarg_noshort_arg = 0;
      free (args_info->optarg_noshort_orig); /* free previous argument */
      args_info->optarg_noshort_orig = 0;
    }
  if (args_info->file_save_arg)
    {
      free (args_info->file_save_arg); /* free previous argument */
      args_info->file_save_arg = 0;
    }
  if (args_info->file_save_orig)
    {
      free (args_info->file_save_orig); /* free previous argument */
      args_info->file_save_orig = 0;
    }
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);
  
  if (args_info->inputs_num)
    free (args_info->inputs);
  
  clear_given (args_info);
}

int
test_multiple_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  if (args_info->string_orig)
    {
      for (i = 0; i < args_info->string_given; ++i)
        {
          if (args_info->string_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "string", args_info->string_orig [i]);
            }
        }
    }
  if (args_info->int_orig)
    {
      for (i = 0; i < args_info->int_given; ++i)
        {
          if (args_info->int_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "int", args_info->int_orig [i]);
            }
        }
    }
  if (args_info->short_orig)
    {
      for (i = 0; i < args_info->short_given; ++i)
        {
          if (args_info->short_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "short", args_info->short_orig [i]);
            }
        }
    }
  if (args_info->long_orig)
    {
      for (i = 0; i < args_info->long_given; ++i)
        {
          if (args_info->long_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "long", args_info->long_orig [i]);
            }
        }
    }
  if (args_info->float_orig)
    {
      for (i = 0; i < args_info->float_given; ++i)
        {
          if (args_info->float_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "float", args_info->float_orig [i]);
            }
        }
    }
  if (args_info->no_short_opt_orig)
    {
      for (i = 0; i < args_info->no_short_opt_given; ++i)
        {
          if (args_info->no_short_opt_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "no-short-opt", args_info->no_short_opt_orig [i]);
            }
        }
    }
  for (i = 0; i < args_info->noarg_given; ++i)
    {
      fprintf(outfile, "%s\n", "noarg");
      
    }
  for (i = 0; i < args_info->noarg_noshort_given; ++i)
    {
      fprintf(outfile, "%s\n", "noarg-noshort");
      
    }
  if (args_info->optarg_orig)
    {
      for (i = 0; i < args_info->optarg_given; ++i)
        {
          if (args_info->optarg_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "optarg", args_info->optarg_orig [i]);
            }
        }
    }
  if (args_info->optarg_noshort_orig)
    {
      for (i = 0; i < args_info->optarg_noshort_given; ++i)
        {
          if (args_info->optarg_noshort_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "optarg-noshort", args_info->optarg_noshort_orig [i]);
            }
        }
    }
  if (args_info->file_save_given) {
    if (args_info->file_save_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "file-save", args_info->file_save_orig);
    } else {
      fprintf(outfile, "%s\n", "file-save");
    }
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
test_multiple_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  test_multiple_cmd_parser_release (args_info);
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  char *tok, *ret;
  size_t len;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  ret = (char *) malloc (len);
  strncpy (ret, arg, len-1);
  ret[len-1] = '\0';

  return ret;
}

static char *
get_multiple_arg_token_next(const char *arg)
{
  char *tok;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

int
test_multiple_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return test_multiple_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
test_multiple_cmd_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;

  result = test_multiple_cmd_parser_internal (argc, argv, args_info, override, initialize, check_required, NULL);

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (test_multiple_cmd_parser_required2(args_info, prog_name, NULL) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error = 0;

  if (! args_info->int_given)
    {
      fprintf (stderr, "%s: '--int' ('-i') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }

  return error;
}

int
test_multiple_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  char *multi_token, *multi_next; /* for multiple options */

  int i;        /* Counter */

  struct string_list * string_list = NULL,* string_new = NULL;
  struct int_list * int_list = NULL,* int_new = NULL;
  struct short_list * short_list = NULL,* short_new = NULL;
  struct long_list * long_list = NULL,* long_new = NULL;
  struct float_list * float_list = NULL,* float_new = NULL;
  struct no_short_opt_list * no_short_opt_list = NULL,* no_short_opt_new = NULL;
  struct optarg_list * optarg_list = NULL,* optarg_new = NULL;
  struct optarg_noshort_list * optarg_noshort_list = NULL,* optarg_noshort_new = NULL;
  int error = 0;
  struct gengetopt_args_info local_args_info;

  if (initialize)
    test_multiple_cmd_parser_init (args_info);

  test_multiple_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "string",	1, NULL, 's' },
        { "int",	1, NULL, 'i' },
        { "short",	1, NULL, 'S' },
        { "long",	1, NULL, 'l' },
        { "float",	1, NULL, 'f' },
        { "no-short-opt",	1, NULL, 0 },
        { "noarg",	0, NULL, 'n' },
        { "noarg-noshort",	0, NULL, 0 },
        { "optarg",	2, NULL, 'M' },
        { "optarg-noshort",	2, NULL, 0 },
        { "file-save",	1, NULL, 0 },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hVs:i:S:l:f:nM::", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          test_multiple_cmd_parser_print_help ();
          test_multiple_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          test_multiple_cmd_parser_print_version ();
          test_multiple_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 's':	/* string option.  */
          local_args_info.string_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              string_new = (struct string_list *) malloc (sizeof (struct string_list));
              string_new->next = string_list;
              string_list = string_new;
              string_new->string_arg = gengetopt_strdup (multi_token);
              string_new->string_orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.string_given++;
                }
              else
                break;
            }
          break;

        case 'i':	/* int option.  */
          local_args_info.int_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              int_new = (struct int_list *) malloc (sizeof (struct int_list));
              int_new->next = int_list;
              int_list = int_new;
              int_new->int_arg = strtol (multi_token, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              int_new->int_orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.int_given++;
                }
              else
                break;
            }
          break;

        case 'S':	/* short option.  */
          local_args_info.short_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              short_new = (struct short_list *) malloc (sizeof (struct short_list));
              short_new->next = short_list;
              short_list = short_new;
              short_new->short_arg = (short)strtol (multi_token, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              short_new->short_orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.short_given++;
                }
              else
                break;
            }
          break;

        case 'l':	/* long option.  */
          local_args_info.long_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              long_new = (struct long_list *) malloc (sizeof (struct long_list));
              long_new->next = long_list;
              long_list = long_new;
              long_new->long_arg = strtol (multi_token, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              long_new->long_orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.long_given++;
                }
              else
                break;
            }
          break;

        case 'f':	/* float option.  */
          local_args_info.float_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              float_new = (struct float_list *) malloc (sizeof (struct float_list));
              float_new->next = float_list;
              float_list = float_new;
              float_new->float_arg = (float)strtod (multi_token, &stop_char);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], multi_token);
                goto failure;
              }
              float_new->float_orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.float_given++;
                }
              else
                break;
            }
          break;

        case 'n':	/* multiple option with no arg.  */
          local_args_info.noarg_given++;
        
          break;

        case 'M':	/* multi with optional args.  */
          local_args_info.optarg_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              optarg_new = (struct optarg_list *) malloc (sizeof (struct optarg_list));
              optarg_new->next = optarg_list;
              optarg_list = optarg_new;
              optarg_new->optarg_arg = gengetopt_strdup (NULL);
              optarg_new->optarg_orig = NULL;
              if (multi_token)
                {
                  optarg_new->optarg_arg = gengetopt_strdup (multi_token);
                  optarg_new->optarg_orig = multi_token;
                }
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.optarg_given++;
                }
              else
                break;
            }
          break;


        case 0:	/* Long option with no short option */
          /* string option with no short.  */
          if (strcmp (long_options[option_index].name, "no-short-opt") == 0)
          {
            local_args_info.no_short_opt_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                no_short_opt_new = (struct no_short_opt_list *) malloc (sizeof (struct no_short_opt_list));
                no_short_opt_new->next = no_short_opt_list;
                no_short_opt_list = no_short_opt_new;
                no_short_opt_new->no_short_opt_arg = gengetopt_strdup (multi_token);
                no_short_opt_new->no_short_opt_orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.no_short_opt_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* multiple option with no arg and no short.  */
          else if (strcmp (long_options[option_index].name, "noarg-noshort") == 0)
          {
            local_args_info.noarg_noshort_given++;
          
            break;
          }
          /* multi with optional args and no short.  */
          else if (strcmp (long_options[option_index].name, "optarg-noshort") == 0)
          {
            local_args_info.optarg_noshort_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                optarg_noshort_new = (struct optarg_noshort_list *) malloc (sizeof (struct optarg_noshort_list));
                optarg_noshort_new->next = optarg_noshort_list;
                optarg_noshort_list = optarg_noshort_new;
                optarg_noshort_new->optarg_noshort_arg = gengetopt_strdup (NULL);
                optarg_noshort_new->optarg_noshort_orig = NULL;
                if (multi_token)
                  {
                    optarg_noshort_new->optarg_noshort_arg = gengetopt_strdup (multi_token);
                    optarg_noshort_new->optarg_noshort_orig = multi_token;
                  }
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.optarg_noshort_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* save the passed options into a file.  */
          else if (strcmp (long_options[option_index].name, "file-save") == 0)
          {
            if (local_args_info.file_save_given)
              {
                fprintf (stderr, "%s: `--file-save' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->file_save_given && ! override)
              continue;
            local_args_info.file_save_given = 1;
            args_info->file_save_given = 1;
            if (args_info->file_save_arg)
              free (args_info->file_save_arg); /* free previous string */
            args_info->file_save_arg = gengetopt_strdup (optarg);
            if (args_info->file_save_orig)
              free (args_info->file_save_orig); /* free previous string */
            args_info->file_save_orig = gengetopt_strdup (optarg);
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  if (local_args_info.string_given && string_list)
    {
      struct string_list *tmp;
      args_info->string_arg = (char * *) realloc (args_info->string_arg, (args_info->string_given + local_args_info.string_given) * sizeof (char *));
      args_info->string_orig = (char **) realloc (args_info->string_orig, (args_info->string_given + local_args_info.string_given) * sizeof (char *));
      for (i = (local_args_info.string_given - 1); i >= 0; --i)
        {
          tmp = string_list;
          args_info->string_arg [i + args_info->string_given] = string_list->string_arg;
          args_info->string_orig [i + args_info->string_given] = string_list->string_orig;
          string_list = string_list->next;
          free (tmp);
        }
    }
  else /* set the default value */
    {
      if (! args_info->string_arg && ! args_info->string_given)
        {
          args_info->string_arg = (char * *) malloc (sizeof (char *));
          args_info->string_arg [0] = gengetopt_strdup("foo");
          args_info->string_orig = (char **) malloc (sizeof (char *));
          args_info->string_orig [0] = NULL;
        }
    }
  
  if (local_args_info.int_given && int_list)
    {
      struct int_list *tmp;
      args_info->int_arg = (int *) realloc (args_info->int_arg, (args_info->int_given + local_args_info.int_given) * sizeof (int));
      args_info->int_orig = (char **) realloc (args_info->int_orig, (args_info->int_given + local_args_info.int_given) * sizeof (char *));
      for (i = (local_args_info.int_given - 1); i >= 0; --i)
        {
          tmp = int_list;
          args_info->int_arg [i + args_info->int_given] = int_list->int_arg;
          args_info->int_orig [i + args_info->int_given] = int_list->int_orig;
          int_list = int_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.short_given && short_list)
    {
      struct short_list *tmp;
      args_info->short_arg = (short *) realloc (args_info->short_arg, (args_info->short_given + local_args_info.short_given) * sizeof (short));
      args_info->short_orig = (char **) realloc (args_info->short_orig, (args_info->short_given + local_args_info.short_given) * sizeof (char *));
      for (i = (local_args_info.short_given - 1); i >= 0; --i)
        {
          tmp = short_list;
          args_info->short_arg [i + args_info->short_given] = short_list->short_arg;
          args_info->short_orig [i + args_info->short_given] = short_list->short_orig;
          short_list = short_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.long_given && long_list)
    {
      struct long_list *tmp;
      args_info->long_arg = (long *) realloc (args_info->long_arg, (args_info->long_given + local_args_info.long_given) * sizeof (long));
      args_info->long_orig = (char **) realloc (args_info->long_orig, (args_info->long_given + local_args_info.long_given) * sizeof (char *));
      for (i = (local_args_info.long_given - 1); i >= 0; --i)
        {
          tmp = long_list;
          args_info->long_arg [i + args_info->long_given] = long_list->long_arg;
          args_info->long_orig [i + args_info->long_given] = long_list->long_orig;
          long_list = long_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.float_given && float_list)
    {
      struct float_list *tmp;
      args_info->float_arg = (float *) realloc (args_info->float_arg, (args_info->float_given + local_args_info.float_given) * sizeof (float));
      args_info->float_orig = (char **) realloc (args_info->float_orig, (args_info->float_given + local_args_info.float_given) * sizeof (char *));
      for (i = (local_args_info.float_given - 1); i >= 0; --i)
        {
          tmp = float_list;
          args_info->float_arg [i + args_info->float_given] = float_list->float_arg;
          args_info->float_orig [i + args_info->float_given] = float_list->float_orig;
          float_list = float_list->next;
          free (tmp);
        }
    }
  else /* set the default value */
    {
      if (! args_info->float_arg && ! args_info->float_given)
        {
          args_info->float_arg = (float *) malloc (sizeof (float));
          args_info->float_arg [0] = 15000;
          args_info->float_orig = (char **) malloc (sizeof (char *));
          args_info->float_orig [0] = NULL;
        }
    }
  
  if (local_args_info.no_short_opt_given && no_short_opt_list)
    {
      struct no_short_opt_list *tmp;
      args_info->no_short_opt_arg = (char * *) realloc (args_info->no_short_opt_arg, (args_info->no_short_opt_given + local_args_info.no_short_opt_given) * sizeof (char *));
      args_info->no_short_opt_orig = (char **) realloc (args_info->no_short_opt_orig, (args_info->no_short_opt_given + local_args_info.no_short_opt_given) * sizeof (char *));
      for (i = (local_args_info.no_short_opt_given - 1); i >= 0; --i)
        {
          tmp = no_short_opt_list;
          args_info->no_short_opt_arg [i + args_info->no_short_opt_given] = no_short_opt_list->no_short_opt_arg;
          args_info->no_short_opt_orig [i + args_info->no_short_opt_given] = no_short_opt_list->no_short_opt_orig;
          no_short_opt_list = no_short_opt_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.optarg_given && optarg_list)
    {
      struct optarg_list *tmp;
      args_info->optarg_arg = (char * *) realloc (args_info->optarg_arg, (args_info->optarg_given + local_args_info.optarg_given) * sizeof (char *));
      args_info->optarg_orig = (char **) realloc (args_info->optarg_orig, (args_info->optarg_given + local_args_info.optarg_given) * sizeof (char *));
      for (i = (local_args_info.optarg_given - 1); i >= 0; --i)
        {
          tmp = optarg_list;
          args_info->optarg_arg [i + args_info->optarg_given] = optarg_list->optarg_arg;
          args_info->optarg_orig [i + args_info->optarg_given] = optarg_list->optarg_orig;
          optarg_list = optarg_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.optarg_noshort_given && optarg_noshort_list)
    {
      struct optarg_noshort_list *tmp;
      args_info->optarg_noshort_arg = (char * *) realloc (args_info->optarg_noshort_arg, (args_info->optarg_noshort_given + local_args_info.optarg_noshort_given) * sizeof (char *));
      args_info->optarg_noshort_orig = (char **) realloc (args_info->optarg_noshort_orig, (args_info->optarg_noshort_given + local_args_info.optarg_noshort_given) * sizeof (char *));
      for (i = (local_args_info.optarg_noshort_given - 1); i >= 0; --i)
        {
          tmp = optarg_noshort_list;
          args_info->optarg_noshort_arg [i + args_info->optarg_noshort_given] = optarg_noshort_list->optarg_noshort_arg;
          args_info->optarg_noshort_orig [i + args_info->optarg_noshort_given] = optarg_noshort_list->optarg_noshort_orig;
          optarg_noshort_list = optarg_noshort_list->next;
          free (tmp);
        }
    }
  

  args_info->string_given += local_args_info.string_given;
  local_args_info.string_given = 0;
  args_info->int_given += local_args_info.int_given;
  local_args_info.int_given = 0;
  args_info->short_given += local_args_info.short_given;
  local_args_info.short_given = 0;
  args_info->long_given += local_args_info.long_given;
  local_args_info.long_given = 0;
  args_info->float_given += local_args_info.float_given;
  local_args_info.float_given = 0;
  args_info->no_short_opt_given += local_args_info.no_short_opt_given;
  local_args_info.no_short_opt_given = 0;
  args_info->noarg_given += local_args_info.noarg_given;
  local_args_info.noarg_given = 0;
  args_info->noarg_noshort_given += local_args_info.noarg_noshort_given;
  local_args_info.noarg_noshort_given = 0;
  args_info->optarg_given += local_args_info.optarg_given;
  local_args_info.optarg_given = 0;
  args_info->optarg_noshort_given += local_args_info.optarg_noshort_given;
  local_args_info.optarg_noshort_given = 0;
  
  if (check_required)
    {
      error += test_multiple_cmd_parser_required2 (args_info, argv[0], additional_error);
    }

  test_multiple_cmd_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;

      args_info->inputs_num = argc - optind ;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind++]) ;
    }

  return 0;

failure:
  if (string_list)
    {
      struct string_list *tmp;
      while (string_list)
        {
          tmp = string_list;
          free (string_list->string_arg);
          free (string_list->string_orig);
          string_list = string_list->next;
          free (tmp);
        }
    }
  if (int_list)
    {
      struct int_list *tmp;
      while (int_list)
        {
          tmp = int_list;
          free (int_list->int_orig);
          int_list = int_list->next;
          free (tmp);
        }
    }
  if (short_list)
    {
      struct short_list *tmp;
      while (short_list)
        {
          tmp = short_list;
          free (short_list->short_orig);
          short_list = short_list->next;
          free (tmp);
        }
    }
  if (long_list)
    {
      struct long_list *tmp;
      while (long_list)
        {
          tmp = long_list;
          free (long_list->long_orig);
          long_list = long_list->next;
          free (tmp);
        }
    }
  if (float_list)
    {
      struct float_list *tmp;
      while (float_list)
        {
          tmp = float_list;
          free (float_list->float_orig);
          float_list = float_list->next;
          free (tmp);
        }
    }
  if (no_short_opt_list)
    {
      struct no_short_opt_list *tmp;
      while (no_short_opt_list)
        {
          tmp = no_short_opt_list;
          free (no_short_opt_list->no_short_opt_arg);
          free (no_short_opt_list->no_short_opt_orig);
          no_short_opt_list = no_short_opt_list->next;
          free (tmp);
        }
    }
  if (optarg_list)
    {
      struct optarg_list *tmp;
      while (optarg_list)
        {
          tmp = optarg_list;
          free (optarg_list->optarg_arg);
          free (optarg_list->optarg_orig);
          optarg_list = optarg_list->next;
          free (tmp);
        }
    }
  if (optarg_noshort_list)
    {
      struct optarg_noshort_list *tmp;
      while (optarg_noshort_list)
        {
          tmp = optarg_noshort_list;
          free (optarg_noshort_list->optarg_noshort_arg);
          free (optarg_noshort_list->optarg_noshort_orig);
          optarg_noshort_list = optarg_noshort_list->next;
          free (tmp);
        }
    }
  
  test_multiple_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
