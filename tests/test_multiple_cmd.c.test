/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=../../tests/test_multiple_cmd.ggo --func-name=test_multiple_cmd_parser --file-name=test_multiple_cmd --unamed-opt --show-required 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "test_multiple_cmd.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: test_multiple [OPTIONS]... [FILES]...";

const char *gengetopt_args_info_versiontext = "";

const char *gengetopt_args_info_description = "";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "  -V, --version                 Print version and exit",
  "  -s, --string=STRING           string option  (default=`foo')",
  "  -i, --int=INT                 int option (mandatory)",
  "  -S, --short=SHORT             short option",
  "  -l, --long=LONG               long option",
  "      --longlong=LONGLONG       long long option",
  "  -L, --limited=STRING          limited multiple option",
  "      --limited-interval=STRING limited multiple option (with interval)",
  "      --big-limited-interval=STRING\n                                limited multiple option (with interval)",
  "      --limited-open-right=STRING\n                                limited multiple option (with interval right\n                                  open)",
  "      --limited-open-left=STRING\n                                limited multiple option (with interval left\n                                  open)",
  "  -f, --float=FLOAT             float option  (default=`15000')",
  "      --no-short-opt=STRING     string option with no short",
  "  -n, --noarg                   multiple option with no arg",
  "      --noarg-noshort           multiple option with no arg and no short",
  "  -M, --optarg[=ID]             multi with optional args",
  "      --optarg-noshort[=ID]     multi with optional args and no short",
  "      --file-save=STRING        save the passed options into a file",
    0
};

typedef enum {ARG_NO
  , ARG_STRING
  , ARG_INT
  , ARG_SHORT
  , ARG_LONG
  , ARG_FLOAT
  , ARG_LONGLONG
} test_multiple_cmd_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
test_multiple_cmd_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct test_multiple_cmd_parser_params *params, const char *additional_error);

static int
test_multiple_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->string_given = 0 ;
  args_info->int_given = 0 ;
  args_info->short_given = 0 ;
  args_info->long_given = 0 ;
  args_info->longlong_given = 0 ;
  args_info->limited_given = 0 ;
  args_info->limited_interval_given = 0 ;
  args_info->big_limited_interval_given = 0 ;
  args_info->limited_open_right_given = 0 ;
  args_info->limited_open_left_given = 0 ;
  args_info->float_given = 0 ;
  args_info->no_short_opt_given = 0 ;
  args_info->noarg_given = 0 ;
  args_info->noarg_noshort_given = 0 ;
  args_info->optarg_given = 0 ;
  args_info->optarg_noshort_given = 0 ;
  args_info->file_save_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->string_arg = NULL;
  args_info->string_orig = NULL;
  args_info->int_arg = NULL;
  args_info->int_orig = NULL;
  args_info->short_arg = NULL;
  args_info->short_orig = NULL;
  args_info->long_arg = NULL;
  args_info->long_orig = NULL;
  args_info->longlong_arg = NULL;
  args_info->longlong_orig = NULL;
  args_info->limited_arg = NULL;
  args_info->limited_orig = NULL;
  args_info->limited_interval_arg = NULL;
  args_info->limited_interval_orig = NULL;
  args_info->big_limited_interval_arg = NULL;
  args_info->big_limited_interval_orig = NULL;
  args_info->limited_open_right_arg = NULL;
  args_info->limited_open_right_orig = NULL;
  args_info->limited_open_left_arg = NULL;
  args_info->limited_open_left_orig = NULL;
  args_info->float_arg = NULL;
  args_info->float_orig = NULL;
  args_info->no_short_opt_arg = NULL;
  args_info->no_short_opt_orig = NULL;
  args_info->optarg_arg = NULL;
  args_info->optarg_orig = NULL;
  args_info->optarg_noshort_arg = NULL;
  args_info->optarg_noshort_orig = NULL;
  args_info->file_save_arg = NULL;
  args_info->file_save_orig = NULL;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{


  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->string_help = gengetopt_args_info_help[2] ;
  args_info->string_min = 0;
  args_info->string_max = 0;
  args_info->int_help = gengetopt_args_info_help[3] ;
  args_info->int_min = 0;
  args_info->int_max = 0;
  args_info->short_help = gengetopt_args_info_help[4] ;
  args_info->short_min = 0;
  args_info->short_max = 0;
  args_info->long_help = gengetopt_args_info_help[5] ;
  args_info->long_min = 0;
  args_info->long_max = 0;
  args_info->longlong_help = gengetopt_args_info_help[6] ;
  args_info->longlong_min = 0;
  args_info->longlong_max = 0;
  args_info->limited_help = gengetopt_args_info_help[7] ;
  args_info->limited_min = 3;
  args_info->limited_max = 3;
  args_info->limited_interval_help = gengetopt_args_info_help[8] ;
  args_info->limited_interval_min = 1;
  args_info->limited_interval_max = 3;
  args_info->big_limited_interval_help = gengetopt_args_info_help[9] ;
  args_info->big_limited_interval_min = 1;
  args_info->big_limited_interval_max = 30;
  args_info->limited_open_right_help = gengetopt_args_info_help[10] ;
  args_info->limited_open_right_min = 3;
  args_info->limited_open_right_max = 0;
  args_info->limited_open_left_help = gengetopt_args_info_help[11] ;
  args_info->limited_open_left_min = 0;
  args_info->limited_open_left_max = 3;
  args_info->float_help = gengetopt_args_info_help[12] ;
  args_info->float_min = 0;
  args_info->float_max = 0;
  args_info->no_short_opt_help = gengetopt_args_info_help[13] ;
  args_info->no_short_opt_min = 0;
  args_info->no_short_opt_max = 0;
  args_info->noarg_help = gengetopt_args_info_help[14] ;
  args_info->noarg_min = 0;
  args_info->noarg_max = 0;
  args_info->noarg_noshort_help = gengetopt_args_info_help[15] ;
  args_info->noarg_noshort_min = 0;
  args_info->noarg_noshort_max = 0;
  args_info->optarg_help = gengetopt_args_info_help[16] ;
  args_info->optarg_min = 0;
  args_info->optarg_max = 0;
  args_info->optarg_noshort_help = gengetopt_args_info_help[17] ;
  args_info->optarg_noshort_min = 0;
  args_info->optarg_noshort_max = 0;
  args_info->file_save_help = gengetopt_args_info_help[18] ;
  
}

void
test_multiple_cmd_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(TEST_MULTIPLE_CMD_PARSER_PACKAGE_NAME) ? TEST_MULTIPLE_CMD_PARSER_PACKAGE_NAME : TEST_MULTIPLE_CMD_PARSER_PACKAGE),
     TEST_MULTIPLE_CMD_PARSER_VERSION);

  if (strlen(gengetopt_args_info_versiontext) > 0)
    printf("\n%s\n", gengetopt_args_info_versiontext);
}

static void print_help_common(void) {
  test_multiple_cmd_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  if (strlen(gengetopt_args_info_usage) > 0)
    printf("\n%s\n", gengetopt_args_info_usage);

  printf("\n");

  if (strlen(gengetopt_args_info_description) > 0)
    printf("%s\n\n", gengetopt_args_info_description);
}

void
test_multiple_cmd_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
test_multiple_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = 0;
  args_info->inputs_num = 0;
}

void
test_multiple_cmd_parser_params_init(struct test_multiple_cmd_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct test_multiple_cmd_parser_params *
test_multiple_cmd_parser_params_create(void)
{
  struct test_multiple_cmd_parser_params *params = 
    (struct test_multiple_cmd_parser_params *)malloc(sizeof(struct test_multiple_cmd_parser_params));
  test_multiple_cmd_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    int int_arg;
    short short_arg;
    long long_arg;
    float float_arg;
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
    long long int longlong_arg;
#else
    long longlong_arg;
#endif
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}

/**
 * The passed arg parameter is NOT set to 0 from this function
 */
static void
free_multiple_field(unsigned int len, void *arg, char ***orig)
{
  unsigned int i;
  if (arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*orig)[i]));
      }

    free (arg);
    free (*orig);
    *orig = 0;
  }
}

static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
test_multiple_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  unsigned int i;
  free_multiple_string_field (args_info->string_given, &(args_info->string_arg), &(args_info->string_orig));
  free_multiple_field (args_info->int_given, (void *)(args_info->int_arg), &(args_info->int_orig));
  args_info->int_arg = 0;
  free_multiple_field (args_info->short_given, (void *)(args_info->short_arg), &(args_info->short_orig));
  args_info->short_arg = 0;
  free_multiple_field (args_info->long_given, (void *)(args_info->long_arg), &(args_info->long_orig));
  args_info->long_arg = 0;
  free_multiple_field (args_info->longlong_given, (void *)(args_info->longlong_arg), &(args_info->longlong_orig));
  args_info->longlong_arg = 0;
  free_multiple_string_field (args_info->limited_given, &(args_info->limited_arg), &(args_info->limited_orig));
  free_multiple_string_field (args_info->limited_interval_given, &(args_info->limited_interval_arg), &(args_info->limited_interval_orig));
  free_multiple_string_field (args_info->big_limited_interval_given, &(args_info->big_limited_interval_arg), &(args_info->big_limited_interval_orig));
  free_multiple_string_field (args_info->limited_open_right_given, &(args_info->limited_open_right_arg), &(args_info->limited_open_right_orig));
  free_multiple_string_field (args_info->limited_open_left_given, &(args_info->limited_open_left_arg), &(args_info->limited_open_left_orig));
  free_multiple_field (args_info->float_given, (void *)(args_info->float_arg), &(args_info->float_orig));
  args_info->float_arg = 0;
  free_multiple_string_field (args_info->no_short_opt_given, &(args_info->no_short_opt_arg), &(args_info->no_short_opt_orig));
  free_multiple_string_field (args_info->optarg_given, &(args_info->optarg_arg), &(args_info->optarg_orig));
  free_multiple_string_field (args_info->optarg_noshort_given, &(args_info->optarg_noshort_arg), &(args_info->optarg_noshort_orig));
  free_string_field (&(args_info->file_save_arg));
  free_string_field (&(args_info->file_save_orig));
  
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);

  if (args_info->inputs_num)
    free (args_info->inputs);

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
test_multiple_cmd_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  write_multiple_into_file(outfile, args_info->string_given, "string", args_info->string_orig, 0);
  write_multiple_into_file(outfile, args_info->int_given, "int", args_info->int_orig, 0);
  write_multiple_into_file(outfile, args_info->short_given, "short", args_info->short_orig, 0);
  write_multiple_into_file(outfile, args_info->long_given, "long", args_info->long_orig, 0);
  write_multiple_into_file(outfile, args_info->longlong_given, "longlong", args_info->longlong_orig, 0);
  write_multiple_into_file(outfile, args_info->limited_given, "limited", args_info->limited_orig, 0);
  write_multiple_into_file(outfile, args_info->limited_interval_given, "limited-interval", args_info->limited_interval_orig, 0);
  write_multiple_into_file(outfile, args_info->big_limited_interval_given, "big-limited-interval", args_info->big_limited_interval_orig, 0);
  write_multiple_into_file(outfile, args_info->limited_open_right_given, "limited-open-right", args_info->limited_open_right_orig, 0);
  write_multiple_into_file(outfile, args_info->limited_open_left_given, "limited-open-left", args_info->limited_open_left_orig, 0);
  write_multiple_into_file(outfile, args_info->float_given, "float", args_info->float_orig, 0);
  write_multiple_into_file(outfile, args_info->no_short_opt_given, "no-short-opt", args_info->no_short_opt_orig, 0);
  write_multiple_into_file(outfile, args_info->noarg_given, "noarg", 0, 0);
  write_multiple_into_file(outfile, args_info->noarg_noshort_given, "noarg-noshort", 0, 0);
  write_multiple_into_file(outfile, args_info->optarg_given, "optarg", args_info->optarg_orig, 0);
  write_multiple_into_file(outfile, args_info->optarg_noshort_given, "optarg-noshort", args_info->optarg_noshort_orig, 0);
  if (args_info->file_save_given)
    write_into_file(outfile, "file-save", args_info->file_save_orig, 0);
  

  i = EXIT_SUCCESS;
  return i;
}

int
test_multiple_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = test_multiple_cmd_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
test_multiple_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  test_multiple_cmd_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error_occurred = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error_occurred = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error_occurred = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error_occurred = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error_occurred = 1;
            }
        }
    }
    
  return error_occurred;
}
int
test_multiple_cmd_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return test_multiple_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
test_multiple_cmd_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct test_multiple_cmd_parser_params *params)
{
  int result;
  result = test_multiple_cmd_parser_internal (argc, argv, args_info, params, 0);

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct test_multiple_cmd_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = test_multiple_cmd_parser_internal (argc, argv, args_info, &params, 0);

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (test_multiple_cmd_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      test_multiple_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_multiple_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error_occurred = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->string_given, args_info->string_min, args_info->string_max, "'--string' ('-s')"))
     error_occurred = 1;
  
  if (! args_info->int_given)
    {
      fprintf (stderr, "%s: '--int' ('-i') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  
  if (check_multiple_option_occurrences(prog_name, args_info->int_given, args_info->int_min, args_info->int_max, "'--int' ('-i')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->short_given, args_info->short_min, args_info->short_max, "'--short' ('-S')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->long_given, args_info->long_min, args_info->long_max, "'--long' ('-l')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->longlong_given, args_info->longlong_min, args_info->longlong_max, "'--longlong'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_given, args_info->limited_min, args_info->limited_max, "'--limited' ('-L')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_interval_given, args_info->limited_interval_min, args_info->limited_interval_max, "'--limited-interval'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->big_limited_interval_given, args_info->big_limited_interval_min, args_info->big_limited_interval_max, "'--big-limited-interval'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_open_right_given, args_info->limited_open_right_min, args_info->limited_open_right_max, "'--limited-open-right'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->limited_open_left_given, args_info->limited_open_left_min, args_info->limited_open_left_max, "'--limited-open-left'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->float_given, args_info->float_min, args_info->float_max, "'--float' ('-f')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->no_short_opt_given, args_info->no_short_opt_min, args_info->no_short_opt_max, "'--no-short-opt'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->noarg_given, args_info->noarg_min, args_info->noarg_max, "'--noarg' ('-n')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->noarg_noshort_given, args_info->noarg_noshort_min, args_info->noarg_noshort_max, "'--noarg-noshort'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->optarg_given, args_info->optarg_min, args_info->optarg_max, "'--optarg' ('-M')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->optarg_noshort_given, args_info->optarg_noshort_min, args_info->optarg_noshort_max, "'--optarg-noshort'"))
     error_occurred = 1;
  
  
  /* checks for dependences among options */

  return error_occurred;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see test_multiple_cmd_parser_params.check_ambiguity
 * @param override @see test_multiple_cmd_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               test_multiple_cmd_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_SHORT:
    if (val) *((short *)field) = (short)strtol (val, &stop_char, 0);
    break;
  case ARG_LONG:
    if (val) *((long *)field) = (long)strtol (val, &stop_char, 0);
    break;
  case ARG_FLOAT:
    if (val) *((float *)field) = (float)strtod (val, &stop_char);
    break;
  case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
    if (val) *((long long int*)field) = (long long int) strtoll (val, &stop_char, 0);
#else
    if (val) *((long *)field) = (long)strtol (val, &stop_char, 0);
#endif
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_SHORT:
  case ARG_LONG:
  case ARG_FLOAT:
  case ARG_LONGLONG:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               test_multiple_cmd_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               test_multiple_cmd_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_INT:
      *((int **)field) = (int *)realloc (*((int **)field), (field_given + prev_given) * sizeof (int)); break;
    case ARG_SHORT:
      *((short **)field) = (short *)realloc (*((short **)field), (field_given + prev_given) * sizeof (short)); break;
    case ARG_LONG:
      *((long **)field) = (long *)realloc (*((long **)field), (field_given + prev_given) * sizeof (long)); break;
    case ARG_FLOAT:
      *((float **)field) = (float *)realloc (*((float **)field), (field_given + prev_given) * sizeof (float)); break;
    case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
      *((long long int **)field) = (long long int *)realloc (*((long long int **)field), (field_given + prev_given) * sizeof (long long int)); break;
#else
      *((long **)field) = (long *)realloc (*((long **)field), (field_given + prev_given) * sizeof (long)); break;
#endif
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_INT:
          (*((int **)field))[i + field_given] = tmp->arg.int_arg; break;
        case ARG_SHORT:
          (*((short **)field))[i + field_given] = tmp->arg.short_arg; break;
        case ARG_LONG:
          (*((long **)field))[i + field_given] = tmp->arg.long_arg; break;
        case ARG_FLOAT:
          (*((float **)field))[i + field_given] = tmp->arg.float_arg; break;
        case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
          (*((long long int **)field))[i + field_given] = tmp->arg.longlong_arg; break;
#else
          (*((long **)field))[i + field_given] = tmp->arg.longlong_arg; break;
#endif
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_INT:
        if (! *((int **)field)) {
          *((int **)field) = (int *)malloc (sizeof (int));
          (*((int **)field))[0] = default_value->int_arg; 
        }
        break;
      case ARG_SHORT:
        if (! *((short **)field)) {
          *((short **)field) = (short *)malloc (sizeof (short));
          (*((short **)field))[0] = default_value->short_arg;
        }
        break;
      case ARG_LONG:
        if (! *((long **)field)) {
          *((long **)field) = (long *)malloc (sizeof (long));
          (*((long **)field))[0] = default_value->long_arg;
        }
        break;
      case ARG_FLOAT:
        if (! *((float **)field)) {
          *((float **)field) = (float *)malloc (sizeof (float));
          (*((float **)field))[0] = default_value->float_arg;
        }
        break;
      case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
        if (! *((long long int **)field)) {
          *((long long int **)field) = (long long int *)malloc (sizeof (long long int));
          (*((long long int **)field))[0] = default_value->longlong_arg;
        }
#else
        if (! *((long **)field)) {
          *((long **)field) = (long *)malloc (sizeof (long));
          (*((long **)field))[0] = default_value->longlong_arg;
        }
#endif
        break;
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

int
test_multiple_cmd_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct test_multiple_cmd_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  union generic_value multiple_default_value;

  struct generic_list * string_list = NULL;
  struct generic_list * int_list = NULL;
  struct generic_list * short_list = NULL;
  struct generic_list * long_list = NULL;
  struct generic_list * longlong_list = NULL;
  struct generic_list * limited_list = NULL;
  struct generic_list * limited_interval_list = NULL;
  struct generic_list * big_limited_interval_list = NULL;
  struct generic_list * limited_open_right_list = NULL;
  struct generic_list * limited_open_left_list = NULL;
  struct generic_list * float_list = NULL;
  struct generic_list * no_short_opt_list = NULL;
  struct generic_list * optarg_list = NULL;
  struct generic_list * optarg_noshort_list = NULL;
  int error_occurred = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    test_multiple_cmd_parser_init (args_info);

  test_multiple_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "string",	1, NULL, 's' },
        { "int",	1, NULL, 'i' },
        { "short",	1, NULL, 'S' },
        { "long",	1, NULL, 'l' },
        { "longlong",	1, NULL, 0 },
        { "limited",	1, NULL, 'L' },
        { "limited-interval",	1, NULL, 0 },
        { "big-limited-interval",	1, NULL, 0 },
        { "limited-open-right",	1, NULL, 0 },
        { "limited-open-left",	1, NULL, 0 },
        { "float",	1, NULL, 'f' },
        { "no-short-opt",	1, NULL, 0 },
        { "noarg",	0, NULL, 'n' },
        { "noarg-noshort",	0, NULL, 0 },
        { "optarg",	2, NULL, 'M' },
        { "optarg-noshort",	2, NULL, 0 },
        { "file-save",	1, NULL, 0 },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hVs:i:S:l:L:f:nM::", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          test_multiple_cmd_parser_print_help ();
          test_multiple_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          test_multiple_cmd_parser_print_version ();
          test_multiple_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 's':	/* string option.  */
        
          if (update_multiple_arg_temp(&string_list, 
              &(local_args_info.string_given), optarg, 0, "foo", ARG_STRING,
              "string", 's',
              additional_error))
            goto failure;
        
          break;
        case 'i':	/* int option.  */
        
          if (update_multiple_arg_temp(&int_list, 
              &(local_args_info.int_given), optarg, 0, 0, ARG_INT,
              "int", 'i',
              additional_error))
            goto failure;
        
          break;
        case 'S':	/* short option.  */
        
          if (update_multiple_arg_temp(&short_list, 
              &(local_args_info.short_given), optarg, 0, 0, ARG_SHORT,
              "short", 'S',
              additional_error))
            goto failure;
        
          break;
        case 'l':	/* long option.  */
        
          if (update_multiple_arg_temp(&long_list, 
              &(local_args_info.long_given), optarg, 0, 0, ARG_LONG,
              "long", 'l',
              additional_error))
            goto failure;
        
          break;
        case 'L':	/* limited multiple option.  */
        
          if (update_multiple_arg_temp(&limited_list, 
              &(local_args_info.limited_given), optarg, 0, 0, ARG_STRING,
              "limited", 'L',
              additional_error))
            goto failure;
        
          break;
        case 'f':	/* float option.  */
        
          if (update_multiple_arg_temp(&float_list, 
              &(local_args_info.float_given), optarg, 0, "15000", ARG_FLOAT,
              "float", 'f',
              additional_error))
            goto failure;
        
          break;
        case 'n':	/* multiple option with no arg.  */
        
          local_args_info.noarg_given++;
        
          break;
        case 'M':	/* multi with optional args.  */
        
          if (update_multiple_arg_temp(&optarg_list, 
              &(local_args_info.optarg_given), optarg, 0, 0, ARG_STRING,
              "optarg", 'M',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          /* long long option.  */
          if (strcmp (long_options[option_index].name, "longlong") == 0)
          {
          
            if (update_multiple_arg_temp(&longlong_list, 
                &(local_args_info.longlong_given), optarg, 0, 0, ARG_LONGLONG,
                "longlong", '-',
                additional_error))
              goto failure;
          
          }
          /* limited multiple option (with interval).  */
          else if (strcmp (long_options[option_index].name, "limited-interval") == 0)
          {
          
            if (update_multiple_arg_temp(&limited_interval_list, 
                &(local_args_info.limited_interval_given), optarg, 0, 0, ARG_STRING,
                "limited-interval", '-',
                additional_error))
              goto failure;
          
          }
          /* limited multiple option (with interval).  */
          else if (strcmp (long_options[option_index].name, "big-limited-interval") == 0)
          {
          
            if (update_multiple_arg_temp(&big_limited_interval_list, 
                &(local_args_info.big_limited_interval_given), optarg, 0, 0, ARG_STRING,
                "big-limited-interval", '-',
                additional_error))
              goto failure;
          
          }
          /* limited multiple option (with interval right open).  */
          else if (strcmp (long_options[option_index].name, "limited-open-right") == 0)
          {
          
            if (update_multiple_arg_temp(&limited_open_right_list, 
                &(local_args_info.limited_open_right_given), optarg, 0, 0, ARG_STRING,
                "limited-open-right", '-',
                additional_error))
              goto failure;
          
          }
          /* limited multiple option (with interval left open).  */
          else if (strcmp (long_options[option_index].name, "limited-open-left") == 0)
          {
          
            if (update_multiple_arg_temp(&limited_open_left_list, 
                &(local_args_info.limited_open_left_given), optarg, 0, 0, ARG_STRING,
                "limited-open-left", '-',
                additional_error))
              goto failure;
          
          }
          /* string option with no short.  */
          else if (strcmp (long_options[option_index].name, "no-short-opt") == 0)
          {
          
            if (update_multiple_arg_temp(&no_short_opt_list, 
                &(local_args_info.no_short_opt_given), optarg, 0, 0, ARG_STRING,
                "no-short-opt", '-',
                additional_error))
              goto failure;
          
          }
          /* multiple option with no arg and no short.  */
          else if (strcmp (long_options[option_index].name, "noarg-noshort") == 0)
          {
          
            local_args_info.noarg_noshort_given++;
          
          }
          /* multi with optional args and no short.  */
          else if (strcmp (long_options[option_index].name, "optarg-noshort") == 0)
          {
          
            if (update_multiple_arg_temp(&optarg_noshort_list, 
                &(local_args_info.optarg_noshort_given), optarg, 0, 0, ARG_STRING,
                "optarg-noshort", '-',
                additional_error))
              goto failure;
          
          }
          /* save the passed options into a file.  */
          else if (strcmp (long_options[option_index].name, "file-save") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->file_save_arg), 
                 &(args_info->file_save_orig), &(args_info->file_save_given),
                &(local_args_info.file_save_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "file-save", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", TEST_MULTIPLE_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  multiple_default_value.default_string_arg = "foo";
  update_multiple_arg((void *)&(args_info->string_arg),
    &(args_info->string_orig), args_info->string_given,
    local_args_info.string_given, &multiple_default_value,
    ARG_STRING, string_list);
  update_multiple_arg((void *)&(args_info->int_arg),
    &(args_info->int_orig), args_info->int_given,
    local_args_info.int_given, 0,
    ARG_INT, int_list);
  update_multiple_arg((void *)&(args_info->short_arg),
    &(args_info->short_orig), args_info->short_given,
    local_args_info.short_given, 0,
    ARG_SHORT, short_list);
  update_multiple_arg((void *)&(args_info->long_arg),
    &(args_info->long_orig), args_info->long_given,
    local_args_info.long_given, 0,
    ARG_LONG, long_list);
  update_multiple_arg((void *)&(args_info->longlong_arg),
    &(args_info->longlong_orig), args_info->longlong_given,
    local_args_info.longlong_given, 0,
    ARG_LONGLONG, longlong_list);
  update_multiple_arg((void *)&(args_info->limited_arg),
    &(args_info->limited_orig), args_info->limited_given,
    local_args_info.limited_given, 0,
    ARG_STRING, limited_list);
  update_multiple_arg((void *)&(args_info->limited_interval_arg),
    &(args_info->limited_interval_orig), args_info->limited_interval_given,
    local_args_info.limited_interval_given, 0,
    ARG_STRING, limited_interval_list);
  update_multiple_arg((void *)&(args_info->big_limited_interval_arg),
    &(args_info->big_limited_interval_orig), args_info->big_limited_interval_given,
    local_args_info.big_limited_interval_given, 0,
    ARG_STRING, big_limited_interval_list);
  update_multiple_arg((void *)&(args_info->limited_open_right_arg),
    &(args_info->limited_open_right_orig), args_info->limited_open_right_given,
    local_args_info.limited_open_right_given, 0,
    ARG_STRING, limited_open_right_list);
  update_multiple_arg((void *)&(args_info->limited_open_left_arg),
    &(args_info->limited_open_left_orig), args_info->limited_open_left_given,
    local_args_info.limited_open_left_given, 0,
    ARG_STRING, limited_open_left_list);
  multiple_default_value.float_arg = 15000;
  update_multiple_arg((void *)&(args_info->float_arg),
    &(args_info->float_orig), args_info->float_given,
    local_args_info.float_given, &multiple_default_value,
    ARG_FLOAT, float_list);
  update_multiple_arg((void *)&(args_info->no_short_opt_arg),
    &(args_info->no_short_opt_orig), args_info->no_short_opt_given,
    local_args_info.no_short_opt_given, 0,
    ARG_STRING, no_short_opt_list);
  update_multiple_arg((void *)&(args_info->optarg_arg),
    &(args_info->optarg_orig), args_info->optarg_given,
    local_args_info.optarg_given, 0,
    ARG_STRING, optarg_list);
  update_multiple_arg((void *)&(args_info->optarg_noshort_arg),
    &(args_info->optarg_noshort_orig), args_info->optarg_noshort_given,
    local_args_info.optarg_noshort_given, 0,
    ARG_STRING, optarg_noshort_list);

  args_info->string_given += local_args_info.string_given;
  local_args_info.string_given = 0;
  args_info->int_given += local_args_info.int_given;
  local_args_info.int_given = 0;
  args_info->short_given += local_args_info.short_given;
  local_args_info.short_given = 0;
  args_info->long_given += local_args_info.long_given;
  local_args_info.long_given = 0;
  args_info->longlong_given += local_args_info.longlong_given;
  local_args_info.longlong_given = 0;
  args_info->limited_given += local_args_info.limited_given;
  local_args_info.limited_given = 0;
  args_info->limited_interval_given += local_args_info.limited_interval_given;
  local_args_info.limited_interval_given = 0;
  args_info->big_limited_interval_given += local_args_info.big_limited_interval_given;
  local_args_info.big_limited_interval_given = 0;
  args_info->limited_open_right_given += local_args_info.limited_open_right_given;
  local_args_info.limited_open_right_given = 0;
  args_info->limited_open_left_given += local_args_info.limited_open_left_given;
  local_args_info.limited_open_left_given = 0;
  args_info->float_given += local_args_info.float_given;
  local_args_info.float_given = 0;
  args_info->no_short_opt_given += local_args_info.no_short_opt_given;
  local_args_info.no_short_opt_given = 0;
  args_info->noarg_given += local_args_info.noarg_given;
  local_args_info.noarg_given = 0;
  args_info->noarg_noshort_given += local_args_info.noarg_noshort_given;
  local_args_info.noarg_noshort_given = 0;
  args_info->optarg_given += local_args_info.optarg_given;
  local_args_info.optarg_given = 0;
  args_info->optarg_noshort_given += local_args_info.optarg_noshort_given;
  local_args_info.optarg_noshort_given = 0;
  
  if (check_required)
    {
      error_occurred += test_multiple_cmd_parser_required2 (args_info, argv[0], additional_error);
    }

  test_multiple_cmd_parser_release (&local_args_info);

  if ( error_occurred )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  free_list (string_list, 1 );
  free_list (int_list, 0 );
  free_list (short_list, 0 );
  free_list (long_list, 0 );
  free_list (longlong_list, 0 );
  free_list (limited_list, 1 );
  free_list (limited_interval_list, 1 );
  free_list (big_limited_interval_list, 1 );
  free_list (limited_open_right_list, 1 );
  free_list (limited_open_left_list, 1 );
  free_list (float_list, 0 );
  free_list (no_short_opt_list, 1 );
  free_list (optarg_list, 1 );
  free_list (optarg_noshort_list, 1 );
  
  test_multiple_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
