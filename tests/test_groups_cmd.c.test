/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=test_groups_cmd.ggo --func-name=test_groups_cmd_parser --file-name=test_groups_cmd --unamed-opt 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "test_groups_cmd.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: test_groups [OPTIONS]... [FILES]...";

const char *gengetopt_args_info_help[] = {
  "  -h, --help              Print help and exit",
  "  -V, --version           Print version and exit",
  "\nsome groups just for testing:",
  "\n Group: grp1\n  an option of this group is required\n  Notice that this description is quite long so it may spawn many lines...      \n          fortunately gengetopt will wrap it for you :-)",
  "  -a, --opta              string a",
  "  -A, --optA[=STRING]     string A",
  "  -M, --optAmul[=STRING]  string M",
  "  -b, --optb              string b",
  "\n Group: my grp2",
  "      --optc              string c",
  "  -d, --optd              string d",
    0
};

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
test_groups_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error);

static int
test_groups_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);

struct string_list
{
  char * arg;
  char *orig;
  struct string_list * next;
};

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->opta_given = 0 ; args_info->opta_group = 0 ;
  args_info->optA_given = 0 ;
  args_info->optAmul_given = 0 ; args_info->optAmul_group = 0 ;
  args_info->optb_given = 0 ;
  args_info->optc_given = 0 ;
  args_info->optd_given = 0 ;
  args_info->grp1_group_counter = 0 ;
  args_info->my_grp2_group_counter = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->optA_arg = NULL;
  args_info->optA_orig = NULL;
  args_info->optAmul_arg = NULL;
  args_info->optAmul_orig = NULL;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{
  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->opta_help = gengetopt_args_info_help[3] ;
  args_info->opta_min = -1;
  args_info->opta_max = -1;
  args_info->optA_help = gengetopt_args_info_help[4] ;
  args_info->optAmul_help = gengetopt_args_info_help[5] ;
  args_info->optAmul_min = -1;
  args_info->optAmul_max = -1;
  args_info->optb_help = gengetopt_args_info_help[6] ;
  args_info->optc_help = gengetopt_args_info_help[7] ;
  args_info->optd_help = gengetopt_args_info_help[8] ;
  
}

void
test_groups_cmd_parser_print_version (void)
{
  printf ("%s %s\n", TEST_GROUPS_CMD_PARSER_PACKAGE, TEST_GROUPS_CMD_PARSER_VERSION);
}

void
test_groups_cmd_parser_print_help (void)
{
  int i = 0;
  test_groups_cmd_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  printf("\n%s\n\n", gengetopt_args_info_usage);
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
test_groups_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = NULL;
  args_info->inputs_num = 0;
}

static void
test_groups_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  
  unsigned int i;
  if (args_info->optA_arg)
    {
      free (args_info->optA_arg); /* free previous argument */
      args_info->optA_arg = 0;
    }
  if (args_info->optA_orig)
    {
      free (args_info->optA_orig); /* free previous argument */
      args_info->optA_orig = 0;
    }
  if (args_info->optAmul_arg)
    {
      for (i = 0; i < args_info->optAmul_given; ++i)
        {
          if (args_info->optAmul_arg [i])
            {
              free (args_info->optAmul_arg [i]); /* free previous argument */
              args_info->optAmul_arg [i] = 0;
            }
          if (args_info->optAmul_orig [i])
            {
              free (args_info->optAmul_orig [i]); /* free previous argument */
              args_info->optAmul_orig [i] = 0;
            }
        }
      if (args_info->optAmul_arg [0])
        free (args_info->optAmul_arg [0]); /* free default string */
      free (args_info->optAmul_arg); /* free previous argument */
      args_info->optAmul_arg = 0;
      free (args_info->optAmul_orig); /* free previous argument */
      args_info->optAmul_orig = 0;
    }
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);
  
  if (args_info->inputs_num)
    free (args_info->inputs);
  
  clear_given (args_info);
}

int
test_groups_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", TEST_GROUPS_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  for (i = 0; i < args_info->opta_given; ++i)
    {
      fprintf(outfile, "%s\n", "opta");
      
    }
  if (args_info->optA_given) {
    if (args_info->optA_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "optA", args_info->optA_orig);
    } else {
      fprintf(outfile, "%s\n", "optA");
    }
  }
  if (args_info->optAmul_orig)
    {
      for (i = 0; i < args_info->optAmul_given; ++i)
        {
          if (args_info->optAmul_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "optAmul", args_info->optAmul_orig [i]);
            }
        }
    }
  if (args_info->optb_given) {
    fprintf(outfile, "%s\n", "optb");
  }
  if (args_info->optc_given) {
    fprintf(outfile, "%s\n", "optc");
  }
  if (args_info->optd_given) {
    fprintf(outfile, "%s\n", "optd");
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
test_groups_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  test_groups_cmd_parser_release (args_info);
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  char *tok, *ret;
  size_t len, num_of_escape;
  int i, j;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static char *
get_multiple_arg_token_next(const char *arg)
{
  char *tok;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, int min, int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, int min, int max, const char *option_desc)
{
  int error = 0;

  if (option_given && ! (min < 0 && max < 0))
    {
      if (min >= 0 && max >= 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error = 1;
                }
            }
          else if (option_given < min
              || option_given > max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error = 1;
            }
        }
      else if (min >= 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error = 1;
            }
        }
      else if (max >= 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error = 1;
            }
        }
    }
    
  return error;
}
static void
reset_group_grp1(struct gengetopt_args_info *args_info);

static void
reset_group_grp1(struct gengetopt_args_info *args_info)
{
  unsigned int i;
  if (! args_info->grp1_group_counter)
    return;
  
  args_info->opta_given = 0 ; args_info->opta_group = 0 ;
  args_info->optA_given = 0 ;
  if (args_info->optA_arg)
    {
      free (args_info->optA_arg); /* free previous argument */
      args_info->optA_arg = 0;
    }
  if (args_info->optA_orig)
    {
      free (args_info->optA_orig); /* free previous argument */
      args_info->optA_orig = 0;
    }
  args_info->optAmul_given = 0 ; args_info->optAmul_group = 0 ;
  if (args_info->optAmul_arg)
    {
      for (i = 0; i < args_info->optAmul_given; ++i)
        {
          if (args_info->optAmul_arg [i])
            {
              free (args_info->optAmul_arg [i]); /* free previous argument */
              args_info->optAmul_arg [i] = 0;
            }
          if (args_info->optAmul_orig [i])
            {
              free (args_info->optAmul_orig [i]); /* free previous argument */
              args_info->optAmul_orig [i] = 0;
            }
        }
      if (args_info->optAmul_arg [0])
        free (args_info->optAmul_arg [0]); /* free default string */
      free (args_info->optAmul_arg); /* free previous argument */
      args_info->optAmul_arg = 0;
      free (args_info->optAmul_orig); /* free previous argument */
      args_info->optAmul_orig = 0;
    }
  args_info->optb_given = 0 ;

  args_info->grp1_group_counter = 0;
}

static void
reset_group_my_grp2(struct gengetopt_args_info *args_info);

static void
reset_group_my_grp2(struct gengetopt_args_info *args_info)
{
  if (! args_info->my_grp2_group_counter)
    return;
  
  args_info->optc_given = 0 ;
  args_info->optd_given = 0 ;

  args_info->my_grp2_group_counter = 0;
}

int
test_groups_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return test_groups_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
test_groups_cmd_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;

  result = test_groups_cmd_parser_internal (argc, argv, args_info, override, initialize, check_required, NULL);

  if (result == EXIT_FAILURE)
    {
      test_groups_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_groups_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (test_groups_cmd_parser_required2(args_info, prog_name, NULL) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      test_groups_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_groups_cmd_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error = 0;

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->opta_given, args_info->opta_min, args_info->opta_max, "'--opta' ('-a')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->optAmul_given, args_info->optAmul_min, args_info->optAmul_max, "'--optAmul' ('-M')"))
     error = 1;
  
  if (args_info->grp1_group_counter == 0)
    {
      fprintf (stderr, "%s: %d options of group grp1 were given. One is required.%s\n", prog_name, args_info->grp1_group_counter, (additional_error ? additional_error : ""));
      error = 1;
    }
  

  /* checks for dependences among options */

  return error;
}

int
test_groups_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  char *multi_token, *multi_next; /* for multiple options */

  int i;        /* Counter */

  struct string_list * optAmul_list = NULL,* optAmul_new = NULL;
  int error = 0;
  struct gengetopt_args_info local_args_info;

  if (initialize)
    test_groups_cmd_parser_init (args_info);

  test_groups_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "opta",	0, NULL, 'a' },
        { "optA",	2, NULL, 'A' },
        { "optAmul",	2, NULL, 'M' },
        { "optb",	0, NULL, 'b' },
        { "optc",	0, NULL, 0 },
        { "optd",	0, NULL, 'd' },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hVaA::M::bd", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          test_groups_cmd_parser_print_help ();
          test_groups_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          test_groups_cmd_parser_print_version ();
          test_groups_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'a':	/* string a.  */
          local_args_info.opta_given++;
        
          if (!args_info->opta_group)
            {
              args_info->opta_group = 1;
              args_info->grp1_group_counter += 1;
            }
          break;

        case 'A':	/* string A.  */
          if (local_args_info.optA_given)
            {
              fprintf (stderr, "%s: `--optA' (`-A') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->optA_given && ! override)
            continue;
          local_args_info.optA_given = 1;
          args_info->optA_given = 1;
          if (args_info->grp1_group_counter && override)
            reset_group_grp1 (args_info);
          args_info->grp1_group_counter += 1;
          if (optarg)
            {
              if (args_info->optA_arg)
                free (args_info->optA_arg); /* free previous string */
              args_info->optA_arg = gengetopt_strdup (optarg);
              if (args_info->optA_orig)
                free (args_info->optA_orig); /* free previous string */
              args_info->optA_orig = gengetopt_strdup (optarg);
            }
          break;

        case 'M':	/* string M.  */
          local_args_info.optAmul_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              optAmul_new = (struct string_list *) malloc (sizeof (struct string_list));
              optAmul_new->next = optAmul_list;
              optAmul_list = optAmul_new;
              optAmul_new->arg = gengetopt_strdup (NULL);
              optAmul_new->orig = NULL;
              if (multi_token)
                {
                  optAmul_new->arg = gengetopt_strdup (multi_token);
                  optAmul_new->orig = multi_token;
                }
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.optAmul_given++;
                }
              else
                break;
            }
          if (!args_info->optAmul_group)
            {
              args_info->optAmul_group = 1;
              args_info->grp1_group_counter += 1;
            }
          break;

        case 'b':	/* string b.  */
          if (local_args_info.optb_given)
            {
              fprintf (stderr, "%s: `--optb' (`-b') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->optb_given && ! override)
            continue;
          local_args_info.optb_given = 1;
          args_info->optb_given = 1;
          if (args_info->grp1_group_counter && override)
            reset_group_grp1 (args_info);
          args_info->grp1_group_counter += 1;
          break;

        case 'd':	/* string d.  */
          if (local_args_info.optd_given)
            {
              fprintf (stderr, "%s: `--optd' (`-d') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->optd_given && ! override)
            continue;
          local_args_info.optd_given = 1;
          args_info->optd_given = 1;
          if (args_info->my_grp2_group_counter && override)
            reset_group_my_grp2 (args_info);
          args_info->my_grp2_group_counter += 1;
          break;


        case 0:	/* Long option with no short option */
          /* string c.  */
          if (strcmp (long_options[option_index].name, "optc") == 0)
          {
            if (local_args_info.optc_given)
              {
                fprintf (stderr, "%s: `--optc' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->optc_given && ! override)
              continue;
            local_args_info.optc_given = 1;
            args_info->optc_given = 1;
            if (args_info->my_grp2_group_counter && override)
              reset_group_my_grp2 (args_info);
            args_info->my_grp2_group_counter += 1;
            break;
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", TEST_GROUPS_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */

  if (args_info->grp1_group_counter > 1)
    {
      fprintf (stderr, "%s: %d options of group grp1 were given. One is required.%s\n", argv[0], args_info->grp1_group_counter, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  if (args_info->my_grp2_group_counter > 1)
    {
      fprintf (stderr, "%s: %d options of group my grp2 were given. At most one is required.%s\n", argv[0], args_info->my_grp2_group_counter, (additional_error ? additional_error : ""));
      error = 1;
    }
  

  if (local_args_info.optAmul_given && optAmul_list)
    {
      struct string_list *tmp;
      args_info->optAmul_arg = (char * *) realloc (args_info->optAmul_arg, (args_info->optAmul_given + local_args_info.optAmul_given) * sizeof (char *));
      args_info->optAmul_orig = (char **) realloc (args_info->optAmul_orig, (args_info->optAmul_given + local_args_info.optAmul_given) * sizeof (char *));
      for (i = (local_args_info.optAmul_given - 1); i >= 0; --i)
        {
          tmp = optAmul_list;
          args_info->optAmul_arg [i + args_info->optAmul_given] = optAmul_list->arg;
          args_info->optAmul_orig [i + args_info->optAmul_given] = optAmul_list->orig;
          optAmul_list = optAmul_list->next;
          free (tmp);
        }
    }
  

  args_info->opta_given += local_args_info.opta_given;
  local_args_info.opta_given = 0;
  args_info->optAmul_given += local_args_info.optAmul_given;
  local_args_info.optAmul_given = 0;
  
  if (check_required)
    {
      error += test_groups_cmd_parser_required2 (args_info, argv[0], additional_error);
    }

  test_groups_cmd_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  if (optAmul_list)
    {
      struct string_list *tmp;
      while (optAmul_list)
        {
          tmp = optAmul_list;
          free (optAmul_list->arg);
          free (optAmul_list->orig);
          optAmul_list = optAmul_list->next;
          free (tmp);
        }
    }
  
  test_groups_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
