/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=test_values_cmd.ggo --func-name=test_values_cmd_parser --file-name=test_values_cmd --unamed-opt 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "test_values_cmd.h"

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
test_values_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error);


struct multistring_values_list
{
  char * multistring_values_arg;
  char *multistring_values_orig;
  struct multistring_values_list * next;
};

struct multistring_values_no_short_list
{
  char * multistring_values_no_short_arg;
  char *multistring_values_no_short_orig;
  struct multistring_values_no_short_list * next;
};

char *test_values_cmd_parser_string_values_values[] = {"foo", "foa", "bar", "foobar", "barfoo", 0} ;	/* Possible values for string-values.  */
char *test_values_cmd_parser_string_values_def_values[] = {"foo", "bar", "foobar", "barfoo", 0} ;	/* Possible values for string-values-def.  */
char *test_values_cmd_parser_string_values_no_short_values[] = {"foo", "bar", "foobar", "barfoo", 0} ;	/* Possible values for string-values-no-short.  */
char *test_values_cmd_parser_multistring_values_values[] = {"foo", "bar", 0} ;	/* Possible values for multistring-values.  */
char *test_values_cmd_parser_multistring_values_no_short_values[] = {"foo", "bar", 0} ;	/* Possible values for multistring-values-no-short.  */
char *test_values_cmd_parser_string_values_group_values[] = {"foo", "bar", "foobar", "barfoo", 0} ;	/* Possible values for string-values-group.  */

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->string_values_given = 0 ;
  args_info->string_values_def_given = 0 ;
  args_info->string_values_no_short_given = 0 ;
  args_info->multistring_values_given = 0 ;
  args_info->multistring_values_no_short_given = 0 ;
  args_info->string_values_group_given = 0 ;
  args_info->group1_group_counter = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->string_values_arg = NULL;
  args_info->string_values_orig = NULL;
  args_info->string_values_def_arg = gengetopt_strdup ("bar");
  args_info->string_values_def_orig = NULL;
  args_info->string_values_no_short_arg = NULL;
  args_info->string_values_no_short_orig = NULL;
  args_info->multistring_values_arg = NULL;
  args_info->multistring_values_orig = NULL;
  args_info->multistring_values_no_short_arg = NULL;
  args_info->multistring_values_no_short_orig = NULL;
  args_info->string_values_group_arg = gengetopt_strdup ("bar");
  args_info->string_values_group_orig = NULL;
  
}

void
test_values_cmd_parser_print_version (void)
{
  printf ("%s %s\n", TEST_VALUES_CMD_PARSER_PACKAGE, TEST_VALUES_CMD_PARSER_VERSION);
}

void
test_values_cmd_parser_print_help (void)
{
  test_values_cmd_parser_print_version ();
  printf("\n%s\n", "This is just a test file\nto test options\nwith the list of acceptable values");
  printf("\nUsage: test_values [OPTIONS]... [FILES]...\n\n");
  printf("%s\n","  -h, --help                    Print help and exit");
  printf("%s\n","  -V, --version                 Print version and exit");
  printf("%s\n","  -s, --string-values=STRING    string option with values  (possible \n                                  values=\"foo\", \"foa\", \"bar\", \"foobar\", \n                                  \"barfoo\")");
  printf("%s\n","      --string-values-def=STRING\n                                string option with values and default  \n                                  (possible values=\"foo\", \"bar\", \n                                  \"foobar\", \"barfoo\" default=`bar')");
  printf("%s\n","      --string-values-no-short=STRING\n                                string option with values no short  (possible \n                                  values=\"foo\", \"bar\", \"foobar\", \n                                  \"barfoo\")");
  printf("%s\n","  -S, --multistring-values=STRING\n                                multiple string option with values  (possible \n                                  values=\"foo\", \"bar\")");
  printf("%s\n","      --multistring-values-no-short=BAR\n                                multiple string option with values no-short  \n                                  (possible values=\"foo\", \"bar\")");
  printf("%s\n","\n Group: group1");
  printf("%s\n","      --string-values-group=FOO group string option with values and default  \n                                  (possible values=\"foo\", \"bar\", \n                                  \"foobar\", \"barfoo\" default=`bar')");
  
}

void
test_values_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);

  args_info->inputs = NULL;
  args_info->inputs_num = 0;
}

static void
test_values_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  
  unsigned int i;
  if (args_info->string_values_arg)
    {
      free (args_info->string_values_arg); /* free previous argument */
      args_info->string_values_arg = 0;
    }
  if (args_info->string_values_orig)
    {
      free (args_info->string_values_orig); /* free previous argument */
      args_info->string_values_orig = 0;
    }
  if (args_info->string_values_def_arg)
    {
      free (args_info->string_values_def_arg); /* free previous argument */
      args_info->string_values_def_arg = 0;
    }
  if (args_info->string_values_def_orig)
    {
      free (args_info->string_values_def_orig); /* free previous argument */
      args_info->string_values_def_orig = 0;
    }
  if (args_info->string_values_no_short_arg)
    {
      free (args_info->string_values_no_short_arg); /* free previous argument */
      args_info->string_values_no_short_arg = 0;
    }
  if (args_info->string_values_no_short_orig)
    {
      free (args_info->string_values_no_short_orig); /* free previous argument */
      args_info->string_values_no_short_orig = 0;
    }
  if (args_info->multistring_values_arg)
    {
      for (i = 0; i < args_info->multistring_values_given; ++i)
        {
          if (args_info->multistring_values_arg [i])
            {
              free (args_info->multistring_values_arg [i]); /* free previous argument */
              args_info->multistring_values_arg [i] = 0;
            }
          if (args_info->multistring_values_orig [i])
            {
              free (args_info->multistring_values_orig [i]); /* free previous argument */
              args_info->multistring_values_orig [i] = 0;
            }
        }
      if (args_info->multistring_values_arg [0])
        free (args_info->multistring_values_arg [0]); /* free default string */
      free (args_info->multistring_values_arg); /* free previous argument */
      args_info->multistring_values_arg = 0;
      free (args_info->multistring_values_orig); /* free previous argument */
      args_info->multistring_values_orig = 0;
    }
  if (args_info->multistring_values_no_short_arg)
    {
      for (i = 0; i < args_info->multistring_values_no_short_given; ++i)
        {
          if (args_info->multistring_values_no_short_arg [i])
            {
              free (args_info->multistring_values_no_short_arg [i]); /* free previous argument */
              args_info->multistring_values_no_short_arg [i] = 0;
            }
          if (args_info->multistring_values_no_short_orig [i])
            {
              free (args_info->multistring_values_no_short_orig [i]); /* free previous argument */
              args_info->multistring_values_no_short_orig [i] = 0;
            }
        }
      if (args_info->multistring_values_no_short_arg [0])
        free (args_info->multistring_values_no_short_arg [0]); /* free default string */
      free (args_info->multistring_values_no_short_arg); /* free previous argument */
      args_info->multistring_values_no_short_arg = 0;
      free (args_info->multistring_values_no_short_orig); /* free previous argument */
      args_info->multistring_values_no_short_orig = 0;
    }
  if (args_info->string_values_group_arg)
    {
      free (args_info->string_values_group_arg); /* free previous argument */
      args_info->string_values_group_arg = 0;
    }
  if (args_info->string_values_group_orig)
    {
      free (args_info->string_values_group_orig); /* free previous argument */
      args_info->string_values_group_orig = 0;
    }
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);
  
  if (args_info->inputs_num)
    free (args_info->inputs);
  
  clear_given (args_info);
}

int
test_values_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", TEST_VALUES_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  if (args_info->string_values_given) {
    if (args_info->string_values_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "string-values", args_info->string_values_orig);
    } else {
      fprintf(outfile, "%s\n", "string-values");
    }
  }
  if (args_info->string_values_def_given) {
    if (args_info->string_values_def_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "string-values-def", args_info->string_values_def_orig);
    } else {
      fprintf(outfile, "%s\n", "string-values-def");
    }
  }
  if (args_info->string_values_no_short_given) {
    if (args_info->string_values_no_short_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "string-values-no-short", args_info->string_values_no_short_orig);
    } else {
      fprintf(outfile, "%s\n", "string-values-no-short");
    }
  }
  if (args_info->multistring_values_orig)
    {
      for (i = 0; i < args_info->multistring_values_given; ++i)
        {
          if (args_info->multistring_values_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "multistring-values", args_info->multistring_values_orig [i]);
            }
        }
    }
  if (args_info->multistring_values_no_short_orig)
    {
      for (i = 0; i < args_info->multistring_values_no_short_given; ++i)
        {
          if (args_info->multistring_values_no_short_orig [i])
            {
              fprintf(outfile, "%s=\"%s\"\n", "multistring-values-no-short", args_info->multistring_values_no_short_orig [i]);
            }
        }
    }
  if (args_info->string_values_group_given) {
    if (args_info->string_values_group_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "string-values-group", args_info->string_values_group_orig);
    } else {
      fprintf(outfile, "%s\n", "string-values-group");
    }
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
test_values_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  test_values_cmd_parser_release (args_info);
}

/*
 * Returns:
 * - the index of the matched value
 * - -1 if no argument has been specified
 * - -2 if more than one value has matched
 */
static int
check_possible_values(const char *val, char *values[])
{
  int i, found, last;
  size_t len;

  if (!val)   /* otherwise strlen() crashes below */
    return -1; /* -1 means no argument for the option */

  found = last = 0;

  for (i = 0, len = strlen(val); values[i]; ++i)
    {
      if (strncmp(val, values[i], len) == 0)
        {
          ++found;
          last = i;
          if (strlen(values[i]) == len)
            return i; /* exact macth no need to check more */
        }
    }

  if (found == 1) /* one match: OK */
    return last;

  return (found ? -2 : -1); /* return many values are matched */
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  char *tok, *ret;
  size_t len;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  ret = (char *) malloc (len);
  strncpy (ret, arg, len-1);
  ret[len-1] = '\0';

  return ret;
}

static char *
get_multiple_arg_token_next(const char *arg)
{
  char *tok;

  if (!arg)
    return NULL;

  tok = strchr (arg, ',');

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static void
reset_group_group1(struct gengetopt_args_info *args_info);

static void
reset_group_group1(struct gengetopt_args_info *args_info)
{
  if (! args_info->group1_group_counter)
    return;
  
  args_info->string_values_group_given = 0 ;
  if (args_info->string_values_group_arg)
    {
      free (args_info->string_values_group_arg); /* free previous argument */
      args_info->string_values_group_arg = 0;
    }
  if (args_info->string_values_group_orig)
    {
      free (args_info->string_values_group_orig); /* free previous argument */
      args_info->string_values_group_orig = 0;
    }

  args_info->group1_group_counter = 0;
}

int
test_values_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return test_values_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
test_values_cmd_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;

  result = test_values_cmd_parser_internal (argc, argv, args_info, override, initialize, check_required, NULL);

  if (result == EXIT_FAILURE)
    {
      test_values_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
test_values_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  return EXIT_SUCCESS;
}

int
test_values_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  char *multi_token, *multi_next; /* for multiple options */

  int i;        /* Counter */

  struct multistring_values_list * multistring_values_list = NULL,* multistring_values_new = NULL;
  struct multistring_values_no_short_list * multistring_values_no_short_list = NULL,* multistring_values_no_short_new = NULL;
  int error = 0;
  struct gengetopt_args_info local_args_info;

  if (initialize)
    test_values_cmd_parser_init (args_info);

  test_values_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 1;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int found = 0;
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "string-values",	1, NULL, 's' },
        { "string-values-def",	1, NULL, 0 },
        { "string-values-no-short",	1, NULL, 0 },
        { "multistring-values",	1, NULL, 'S' },
        { "multistring-values-no-short",	1, NULL, 0 },
        { "string-values-group",	1, NULL, 0 },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hVs:S:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          test_values_cmd_parser_print_help ();
          test_values_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          test_values_cmd_parser_print_version ();
          test_values_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 's':	/* string option with values.  */
          if (local_args_info.string_values_given)
            {
              fprintf (stderr, "%s: `--string-values' (`-s') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if ((found = check_possible_values(optarg, test_values_cmd_parser_string_values_values)) < 0)
            {
              fprintf (stderr, "%s: %s argument, \"%s\", for option `--string-values' (`-s')%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", optarg, (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->string_values_given && ! override)
            continue;
          local_args_info.string_values_given = 1;
          args_info->string_values_given = 1;
          if (args_info->string_values_arg)
            free (args_info->string_values_arg); /* free previous string */
          args_info->string_values_arg = gengetopt_strdup (test_values_cmd_parser_string_values_values[found]);
          if (args_info->string_values_orig)
            free (args_info->string_values_orig); /* free previous string */
          args_info->string_values_orig = gengetopt_strdup (optarg);
          break;

        case 'S':	/* multiple string option with values.  */
          local_args_info.multistring_values_given++;
        
          multi_token = get_multiple_arg_token(optarg);
          multi_next = get_multiple_arg_token_next (optarg);
        
          while (1)
            {
              if ((found = check_possible_values(multi_token, test_values_cmd_parser_multistring_values_values)) < 0)
                {
                  fprintf (stderr, "%s: %s argument, \"%s\", for option `--multistring-values' (`-S')%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", multi_token, (additional_error ? additional_error : ""));
                  free (multi_token);
                  goto failure;
                }
        
              multistring_values_new = (struct multistring_values_list *) malloc (sizeof (struct multistring_values_list));
              multistring_values_new->next = multistring_values_list;
              multistring_values_list = multistring_values_new;
              multistring_values_new->multistring_values_arg = gengetopt_strdup (test_values_cmd_parser_multistring_values_values[found]);
              multistring_values_new->multistring_values_orig = multi_token;
        
              if (multi_next)
                {
                  multi_token = get_multiple_arg_token(multi_next);
                  multi_next = get_multiple_arg_token_next (multi_next);
                  local_args_info.multistring_values_given++;
                }
              else
                break;
            }
          break;


        case 0:	/* Long option with no short option */
          /* string option with values and default.  */
          if (strcmp (long_options[option_index].name, "string-values-def") == 0)
          {
            if (local_args_info.string_values_def_given)
              {
                fprintf (stderr, "%s: `--string-values-def' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if ((found = check_possible_values(optarg, test_values_cmd_parser_string_values_def_values)) < 0)
              {
                fprintf (stderr, "%s: %s argument, \"%s\", for option `--string-values-def'%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", optarg, (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->string_values_def_given && ! override)
              continue;
            local_args_info.string_values_def_given = 1;
            args_info->string_values_def_given = 1;
            if (args_info->string_values_def_arg)
              free (args_info->string_values_def_arg); /* free previous string */
            args_info->string_values_def_arg = gengetopt_strdup (test_values_cmd_parser_string_values_def_values[found]);
            if (args_info->string_values_def_orig)
              free (args_info->string_values_def_orig); /* free previous string */
            args_info->string_values_def_orig = gengetopt_strdup (optarg);
          }
          /* string option with values no short.  */
          else if (strcmp (long_options[option_index].name, "string-values-no-short") == 0)
          {
            if (local_args_info.string_values_no_short_given)
              {
                fprintf (stderr, "%s: `--string-values-no-short' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if ((found = check_possible_values(optarg, test_values_cmd_parser_string_values_no_short_values)) < 0)
              {
                fprintf (stderr, "%s: %s argument, \"%s\", for option `--string-values-no-short'%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", optarg, (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->string_values_no_short_given && ! override)
              continue;
            local_args_info.string_values_no_short_given = 1;
            args_info->string_values_no_short_given = 1;
            if (args_info->string_values_no_short_arg)
              free (args_info->string_values_no_short_arg); /* free previous string */
            args_info->string_values_no_short_arg = gengetopt_strdup (test_values_cmd_parser_string_values_no_short_values[found]);
            if (args_info->string_values_no_short_orig)
              free (args_info->string_values_no_short_orig); /* free previous string */
            args_info->string_values_no_short_orig = gengetopt_strdup (optarg);
          }
          /* multiple string option with values no-short.  */
          else if (strcmp (long_options[option_index].name, "multistring-values-no-short") == 0)
          {
            local_args_info.multistring_values_no_short_given++;
          
            multi_token = get_multiple_arg_token(optarg);
            multi_next = get_multiple_arg_token_next (optarg);
          
            while (1)
              {
                if ((found = check_possible_values(multi_token, test_values_cmd_parser_multistring_values_no_short_values)) < 0)
                  {
                    fprintf (stderr, "%s: %s argument, \"%s\", for option `--multistring-values-no-short'%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", multi_token, (additional_error ? additional_error : ""));
                    free (multi_token);
                    goto failure;
                  }
          
                multistring_values_no_short_new = (struct multistring_values_no_short_list *) malloc (sizeof (struct multistring_values_no_short_list));
                multistring_values_no_short_new->next = multistring_values_no_short_list;
                multistring_values_no_short_list = multistring_values_no_short_new;
                multistring_values_no_short_new->multistring_values_no_short_arg = gengetopt_strdup (test_values_cmd_parser_multistring_values_no_short_values[found]);
                multistring_values_no_short_new->multistring_values_no_short_orig = multi_token;
          
                if (multi_next)
                  {
                    multi_token = get_multiple_arg_token(multi_next);
                    multi_next = get_multiple_arg_token_next (multi_next);
                    local_args_info.multistring_values_no_short_given++;
                  }
                else
                  break;
              }
            break;
          }
          /* group string option with values and default.  */
          else if (strcmp (long_options[option_index].name, "string-values-group") == 0)
          {
            if (local_args_info.string_values_group_given)
              {
                fprintf (stderr, "%s: `--string-values-group' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if ((found = check_possible_values(optarg, test_values_cmd_parser_string_values_group_values)) < 0)
              {
                fprintf (stderr, "%s: %s argument, \"%s\", for option `--string-values-group'%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", optarg, (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->string_values_group_given && ! override)
              continue;
            local_args_info.string_values_group_given = 1;
            args_info->string_values_group_given = 1;
            if (args_info->group1_group_counter && override)
              reset_group_group1 (args_info);
            args_info->group1_group_counter += 1;
            if (args_info->string_values_group_arg)
              free (args_info->string_values_group_arg); /* free previous string */
            args_info->string_values_group_arg = gengetopt_strdup (test_values_cmd_parser_string_values_group_values[found]);
            if (args_info->string_values_group_orig)
              free (args_info->string_values_group_orig); /* free previous string */
            args_info->string_values_group_orig = gengetopt_strdup (optarg);
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", TEST_VALUES_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */

  if (args_info->group1_group_counter > 1)
    {
      fprintf (stderr, "%s: %d options of group group1 were given. At most one is required.%s\n", argv[0], args_info->group1_group_counter, (additional_error ? additional_error : ""));
      error = 1;
    }
  

  if (local_args_info.multistring_values_given && multistring_values_list)
    {
      struct multistring_values_list *tmp;
      args_info->multistring_values_arg = (char * *) realloc (args_info->multistring_values_arg, (args_info->multistring_values_given + local_args_info.multistring_values_given) * sizeof (char *));
      args_info->multistring_values_orig = (char **) realloc (args_info->multistring_values_orig, (args_info->multistring_values_given + local_args_info.multistring_values_given) * sizeof (char *));
      for (i = (local_args_info.multistring_values_given - 1); i >= 0; --i)
        {
          tmp = multistring_values_list;
          args_info->multistring_values_arg [i + args_info->multistring_values_given] = multistring_values_list->multistring_values_arg;
          args_info->multistring_values_orig [i + args_info->multistring_values_given] = multistring_values_list->multistring_values_orig;
          multistring_values_list = multistring_values_list->next;
          free (tmp);
        }
    }
  
  if (local_args_info.multistring_values_no_short_given && multistring_values_no_short_list)
    {
      struct multistring_values_no_short_list *tmp;
      args_info->multistring_values_no_short_arg = (char * *) realloc (args_info->multistring_values_no_short_arg, (args_info->multistring_values_no_short_given + local_args_info.multistring_values_no_short_given) * sizeof (char *));
      args_info->multistring_values_no_short_orig = (char **) realloc (args_info->multistring_values_no_short_orig, (args_info->multistring_values_no_short_given + local_args_info.multistring_values_no_short_given) * sizeof (char *));
      for (i = (local_args_info.multistring_values_no_short_given - 1); i >= 0; --i)
        {
          tmp = multistring_values_no_short_list;
          args_info->multistring_values_no_short_arg [i + args_info->multistring_values_no_short_given] = multistring_values_no_short_list->multistring_values_no_short_arg;
          args_info->multistring_values_no_short_orig [i + args_info->multistring_values_no_short_given] = multistring_values_no_short_list->multistring_values_no_short_orig;
          multistring_values_no_short_list = multistring_values_no_short_list->next;
          free (tmp);
        }
    }
  

  args_info->multistring_values_given += local_args_info.multistring_values_given;
  local_args_info.multistring_values_given = 0;
  args_info->multistring_values_no_short_given += local_args_info.multistring_values_no_short_given;
  local_args_info.multistring_values_no_short_given = 0;
  

  test_values_cmd_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;

      args_info->inputs_num = argc - optind ;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind++]) ;
    }

  return 0;

failure:
  if (multistring_values_list)
    {
      struct multistring_values_list *tmp;
      while (multistring_values_list)
        {
          tmp = multistring_values_list;
          free (multistring_values_list->multistring_values_arg);
          free (multistring_values_list->multistring_values_orig);
          multistring_values_list = multistring_values_list->next;
          free (tmp);
        }
    }
  if (multistring_values_no_short_list)
    {
      struct multistring_values_no_short_list *tmp;
      while (multistring_values_no_short_list)
        {
          tmp = multistring_values_no_short_list;
          free (multistring_values_no_short_list->multistring_values_no_short_arg);
          free (multistring_values_no_short_list->multistring_values_no_short_orig);
          multistring_values_no_short_list = multistring_values_no_short_list->next;
          free (tmp);
        }
    }
  
  test_values_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
