/** @file test_first_cmdline_cmd.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt 
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef TEST_FIRST_CMDLINE_CMD_H
#define TEST_FIRST_CMDLINE_CMD_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef TEST_FIRST_CMDLINE_CMD_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define TEST_FIRST_CMDLINE_CMD_PARSER_PACKAGE PACKAGE
#endif

#ifndef TEST_FIRST_CMDLINE_CMD_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define TEST_FIRST_CMDLINE_CMD_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define TEST_FIRST_CMDLINE_CMD_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef TEST_FIRST_CMDLINE_CMD_PARSER_VERSION
/** @brief the program version */
#define TEST_FIRST_CMDLINE_CMD_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct test_first_cmdline_cmd_struct
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int option_a_arg;	/**< @brief option a of the first command line to parse.  */
  char * option_a_orig;	/**< @brief option a of the first command line to parse original value given at command line.  */
  const char *option_a_help; /**< @brief option a of the first command line to parse help description.  */
  char ** multi_arg;	/**< @brief multiple option of the first command line to parse.  */
  char ** multi_orig;	/**< @brief multiple option of the first command line to parse original value given at command line.  */
  unsigned int multi_min; /**< @brief multiple option of the first command line to parse's minimum occurreces */
  unsigned int multi_max; /**< @brief multiple option of the first command line to parse's maximum occurreces */
  const char *multi_help; /**< @brief multiple option of the first command line to parse help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int option_a_given ;	/**< @brief Whether option-a was given.  */
  unsigned int multi_given ;	/**< @brief Whether multi was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct test_first_cmdline_cmd_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure test_first_cmdline_cmd_struct (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure test_first_cmdline_cmd_struct (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *test_first_cmdline_cmd_struct_purpose;
/** @brief the usage string of the program */
extern const char *test_first_cmdline_cmd_struct_usage;
/** @brief the description string of the program */
extern const char *test_first_cmdline_cmd_struct_description;
/** @brief all the lines making the help output */
extern const char *test_first_cmdline_cmd_struct_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int test_first_cmdline_cmd_parser (int argc, char **argv,
  struct test_first_cmdline_cmd_struct *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use test_first_cmdline_cmd_parser_ext() instead
 */
int test_first_cmdline_cmd_parser2 (int argc, char **argv,
  struct test_first_cmdline_cmd_struct *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int test_first_cmdline_cmd_parser_ext (int argc, char **argv,
  struct test_first_cmdline_cmd_struct *args_info,
  struct test_first_cmdline_cmd_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int test_first_cmdline_cmd_parser_dump(FILE *outfile,
  struct test_first_cmdline_cmd_struct *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int test_first_cmdline_cmd_parser_file_save(const char *filename,
  struct test_first_cmdline_cmd_struct *args_info);

/**
 * Print the help
 */
void test_first_cmdline_cmd_parser_print_help(void);
/**
 * Print the version
 */
void test_first_cmdline_cmd_parser_print_version(void);

/**
 * Initializes all the fields a test_first_cmdline_cmd_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void test_first_cmdline_cmd_parser_params_init(struct test_first_cmdline_cmd_parser_params *params);

/**
 * Allocates dynamically a test_first_cmdline_cmd_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized test_first_cmdline_cmd_parser_params structure
 */
struct test_first_cmdline_cmd_parser_params *test_first_cmdline_cmd_parser_params_create(void);

/**
 * Initializes the passed test_first_cmdline_cmd_struct structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void test_first_cmdline_cmd_parser_init (struct test_first_cmdline_cmd_struct *args_info);
/**
 * Deallocates the string fields of the test_first_cmdline_cmd_struct structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void test_first_cmdline_cmd_parser_free (struct test_first_cmdline_cmd_struct *args_info);

/**
 * The string parser (interprets the passed string as a command line)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int test_first_cmdline_cmd_parser_string (const char *cmdline, struct test_first_cmdline_cmd_struct *args_info,
  const char *prog_name);
/**
 * The string parser (version with additional parameters - deprecated)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use test_first_cmdline_cmd_parser_string_ext() instead
 */
int test_first_cmdline_cmd_parser_string2 (const char *cmdline, struct test_first_cmdline_cmd_struct *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);
/**
 * The string parser (version with additional parameters)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int test_first_cmdline_cmd_parser_string_ext (const char *cmdline, struct test_first_cmdline_cmd_struct *args_info,
  const char *prog_name,
  struct test_first_cmdline_cmd_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int test_first_cmdline_cmd_parser_required (struct test_first_cmdline_cmd_struct *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TEST_FIRST_CMDLINE_CMD_H */
