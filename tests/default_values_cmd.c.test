/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=default_values_cmd.ggo --func-name=default_values_cmd_parser --file-name=default_values_cmd --unamed-opt 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "default_values_cmd.h"

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
default_values_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error);


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->foo_given = 0 ;
  args_info->bar_given = 0 ;
  args_info->foo_opt_given = 0 ;
  args_info->bar_opt_given = 0 ;
  args_info->foofloat_given = 0 ;
  args_info->foodouble_given = 0 ;
  args_info->pi_given = 0 ;
  args_info->timeout_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->foo_arg = 15000;
  args_info->foo_orig = NULL;
  args_info->bar_arg = gengetopt_strdup ("this is a default");
  args_info->bar_orig = NULL;
  args_info->foo_opt_arg = 15000;
  args_info->foo_opt_orig = NULL;
  args_info->bar_opt_arg = gengetopt_strdup ("this is a default");
  args_info->bar_opt_orig = NULL;
  args_info->foofloat_arg = 15000;
  args_info->foofloat_orig = NULL;
  args_info->foodouble_arg = 15000;
  args_info->foodouble_orig = NULL;
  args_info->pi_arg = 3.1415926536;
  args_info->pi_orig = NULL;
  args_info->timeout_arg = 120;
  args_info->timeout_orig = NULL;
  
}

void
default_values_cmd_parser_print_version (void)
{
  printf ("%s %s\n", DEFAULT_VALUES_CMD_PARSER_PACKAGE, DEFAULT_VALUES_CMD_PARSER_VERSION);
}

void
default_values_cmd_parser_print_help (void)
{
  default_values_cmd_parser_print_version ();
  printf("\nUsage: default_values [OPTIONS]... [FILES]...\n\n");
  printf("%s\n","  -h, --help                  Print help and exit");
  printf("%s\n","  -V, --version               Print version and exit");
  printf("%s\n","  -f, --foo=INT               foo option  (default=`15000')");
  printf("%s\n","  -b, --bar=STRING            bar option  (default=`this is a default')");
  printf("%s\n","  -F, --foo-opt[=INT]         foo option with optional arg  (default=`15000')");
  printf("%s\n","  -B, --bar-opt[=STRING]      bar option with optional arg  (default=`this is a \n                                default')");
  printf("%s\n","      --foofloat=FLOAT        foo float option  (default=`15000')");
  printf("%s\n","      --foodouble=DOUBLE      foo double option  (default=`15000')");
  printf("%s\n","  -p, --pi=DOUBLE             PI option  (default=`3.1415926536')");
  printf("%s\n","  -s, --timeout=123456789012  number of seconds after the scanning is cancelled \n                                if no progress is shown at all.  \n                                (default=`120')");
  
}

void
default_values_cmd_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);

  args_info->inputs = NULL;
  args_info->inputs_num = 0;
}

static void
default_values_cmd_parser_release (struct gengetopt_args_info *args_info)
{
  
  unsigned int i;
  if (args_info->foo_orig)
    {
      free (args_info->foo_orig); /* free previous argument */
      args_info->foo_orig = 0;
    }
  if (args_info->bar_arg)
    {
      free (args_info->bar_arg); /* free previous argument */
      args_info->bar_arg = 0;
    }
  if (args_info->bar_orig)
    {
      free (args_info->bar_orig); /* free previous argument */
      args_info->bar_orig = 0;
    }
  if (args_info->foo_opt_orig)
    {
      free (args_info->foo_opt_orig); /* free previous argument */
      args_info->foo_opt_orig = 0;
    }
  if (args_info->bar_opt_arg)
    {
      free (args_info->bar_opt_arg); /* free previous argument */
      args_info->bar_opt_arg = 0;
    }
  if (args_info->bar_opt_orig)
    {
      free (args_info->bar_opt_orig); /* free previous argument */
      args_info->bar_opt_orig = 0;
    }
  if (args_info->foofloat_orig)
    {
      free (args_info->foofloat_orig); /* free previous argument */
      args_info->foofloat_orig = 0;
    }
  if (args_info->foodouble_orig)
    {
      free (args_info->foodouble_orig); /* free previous argument */
      args_info->foodouble_orig = 0;
    }
  if (args_info->pi_orig)
    {
      free (args_info->pi_orig); /* free previous argument */
      args_info->pi_orig = 0;
    }
  if (args_info->timeout_orig)
    {
      free (args_info->timeout_orig); /* free previous argument */
      args_info->timeout_orig = 0;
    }
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);
  
  if (args_info->inputs_num)
    free (args_info->inputs);
  
  clear_given (args_info);
}

int
default_values_cmd_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", DEFAULT_VALUES_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  if (args_info->foo_given) {
    if (args_info->foo_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "foo", args_info->foo_orig);
    } else {
      fprintf(outfile, "%s\n", "foo");
    }
  }
  if (args_info->bar_given) {
    if (args_info->bar_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "bar", args_info->bar_orig);
    } else {
      fprintf(outfile, "%s\n", "bar");
    }
  }
  if (args_info->foo_opt_given) {
    if (args_info->foo_opt_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "foo-opt", args_info->foo_opt_orig);
    } else {
      fprintf(outfile, "%s\n", "foo-opt");
    }
  }
  if (args_info->bar_opt_given) {
    if (args_info->bar_opt_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "bar-opt", args_info->bar_opt_orig);
    } else {
      fprintf(outfile, "%s\n", "bar-opt");
    }
  }
  if (args_info->foofloat_given) {
    if (args_info->foofloat_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "foofloat", args_info->foofloat_orig);
    } else {
      fprintf(outfile, "%s\n", "foofloat");
    }
  }
  if (args_info->foodouble_given) {
    if (args_info->foodouble_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "foodouble", args_info->foodouble_orig);
    } else {
      fprintf(outfile, "%s\n", "foodouble");
    }
  }
  if (args_info->pi_given) {
    if (args_info->pi_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "pi", args_info->pi_orig);
    } else {
      fprintf(outfile, "%s\n", "pi");
    }
  }
  if (args_info->timeout_given) {
    if (args_info->timeout_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "timeout", args_info->timeout_orig);
    } else {
      fprintf(outfile, "%s\n", "timeout");
    }
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
default_values_cmd_parser_free (struct gengetopt_args_info *args_info)
{
  default_values_cmd_parser_release (args_info);
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

int
default_values_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return default_values_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
default_values_cmd_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;

  result = default_values_cmd_parser_internal (argc, argv, args_info, override, initialize, check_required, NULL);

  if (result == EXIT_FAILURE)
    {
      default_values_cmd_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
default_values_cmd_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  return EXIT_SUCCESS;
}

int
default_values_cmd_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  int error = 0;
  struct gengetopt_args_info local_args_info;

  if (initialize)
    default_values_cmd_parser_init (args_info);

  default_values_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "foo",	1, NULL, 'f' },
        { "bar",	1, NULL, 'b' },
        { "foo-opt",	2, NULL, 'F' },
        { "bar-opt",	2, NULL, 'B' },
        { "foofloat",	1, NULL, 0 },
        { "foodouble",	1, NULL, 0 },
        { "pi",	1, NULL, 'p' },
        { "timeout",	1, NULL, 's' },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hVf:b:F::B::p:s:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          default_values_cmd_parser_print_help ();
          default_values_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          default_values_cmd_parser_print_version ();
          default_values_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'f':	/* foo option.  */
          if (local_args_info.foo_given)
            {
              fprintf (stderr, "%s: `--foo' (`-f') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->foo_given && ! override)
            continue;
          local_args_info.foo_given = 1;
          args_info->foo_given = 1;
          args_info->foo_arg = strtol (optarg, &stop_char, 0);
          if (!(stop_char && *stop_char == '\0')) {
            fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
            goto failure;
          }
          if (args_info->foo_orig)
            free (args_info->foo_orig); /* free previous string */
          args_info->foo_orig = gengetopt_strdup (optarg);
          break;

        case 'b':	/* bar option.  */
          if (local_args_info.bar_given)
            {
              fprintf (stderr, "%s: `--bar' (`-b') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->bar_given && ! override)
            continue;
          local_args_info.bar_given = 1;
          args_info->bar_given = 1;
          if (args_info->bar_arg)
            free (args_info->bar_arg); /* free previous string */
          args_info->bar_arg = gengetopt_strdup (optarg);
          if (args_info->bar_orig)
            free (args_info->bar_orig); /* free previous string */
          args_info->bar_orig = gengetopt_strdup (optarg);
          break;

        case 'F':	/* foo option with optional arg.  */
          if (local_args_info.foo_opt_given)
            {
              fprintf (stderr, "%s: `--foo-opt' (`-F') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->foo_opt_given && ! override)
            continue;
          local_args_info.foo_opt_given = 1;
          args_info->foo_opt_given = 1;
          if (optarg)
            {
              args_info->foo_opt_arg = strtol (optarg, &stop_char, 0);
              if (!(stop_char && *stop_char == '\0')) {
                fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
                goto failure;
              }
              if (args_info->foo_opt_orig)
                free (args_info->foo_opt_orig); /* free previous string */
              args_info->foo_opt_orig = gengetopt_strdup (optarg);
            }
          break;

        case 'B':	/* bar option with optional arg.  */
          if (local_args_info.bar_opt_given)
            {
              fprintf (stderr, "%s: `--bar-opt' (`-B') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->bar_opt_given && ! override)
            continue;
          local_args_info.bar_opt_given = 1;
          args_info->bar_opt_given = 1;
          if (optarg)
            {
              if (args_info->bar_opt_arg)
                free (args_info->bar_opt_arg); /* free previous string */
              args_info->bar_opt_arg = gengetopt_strdup (optarg);
              if (args_info->bar_opt_orig)
                free (args_info->bar_opt_orig); /* free previous string */
              args_info->bar_opt_orig = gengetopt_strdup (optarg);
            }
          break;

        case 'p':	/* PI option.  */
          if (local_args_info.pi_given)
            {
              fprintf (stderr, "%s: `--pi' (`-p') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->pi_given && ! override)
            continue;
          local_args_info.pi_given = 1;
          args_info->pi_given = 1;
          args_info->pi_arg = strtod (optarg, &stop_char);
          if (!(stop_char && *stop_char == '\0')) {
            fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
            goto failure;
          }
          if (args_info->pi_orig)
            free (args_info->pi_orig); /* free previous string */
          args_info->pi_orig = gengetopt_strdup (optarg);
          break;

        case 's':	/* number of seconds after the scanning is cancelled if no progress is shown at all..  */
          if (local_args_info.timeout_given)
            {
              fprintf (stderr, "%s: `--timeout' (`-s') option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
              goto failure;
            }
          if (args_info->timeout_given && ! override)
            continue;
          local_args_info.timeout_given = 1;
          args_info->timeout_given = 1;
          args_info->timeout_arg = strtol (optarg, &stop_char, 0);
          if (!(stop_char && *stop_char == '\0')) {
            fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
            goto failure;
          }
          if (args_info->timeout_orig)
            free (args_info->timeout_orig); /* free previous string */
          args_info->timeout_orig = gengetopt_strdup (optarg);
          break;


        case 0:	/* Long option with no short option */
          /* foo float option.  */
          if (strcmp (long_options[option_index].name, "foofloat") == 0)
          {
            if (local_args_info.foofloat_given)
              {
                fprintf (stderr, "%s: `--foofloat' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->foofloat_given && ! override)
              continue;
            local_args_info.foofloat_given = 1;
            args_info->foofloat_given = 1;
            args_info->foofloat_arg = (float)strtod (optarg, &stop_char);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->foofloat_orig)
              free (args_info->foofloat_orig); /* free previous string */
            args_info->foofloat_orig = gengetopt_strdup (optarg);
          }
          /* foo double option.  */
          else if (strcmp (long_options[option_index].name, "foodouble") == 0)
          {
            if (local_args_info.foodouble_given)
              {
                fprintf (stderr, "%s: `--foodouble' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->foodouble_given && ! override)
              continue;
            local_args_info.foodouble_given = 1;
            args_info->foodouble_given = 1;
            args_info->foodouble_arg = strtod (optarg, &stop_char);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->foodouble_orig)
              free (args_info->foodouble_orig); /* free previous string */
            args_info->foodouble_orig = gengetopt_strdup (optarg);
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", DEFAULT_VALUES_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */




  default_values_cmd_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;

      args_info->inputs_num = argc - optind ;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind++]) ;
    }

  return 0;

failure:
  
  default_values_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
