/* test_multiple_cmd.h */

/* File autogenerated by gengetopt   */

#ifndef TEST_MULTIPLE_CMD_H
#define TEST_MULTIPLE_CMD_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef TEST_MULTIPLE_CMD_PARSER_PACKAGE
#define TEST_MULTIPLE_CMD_PARSER_PACKAGE "test_multiple"
#endif

#ifndef TEST_MULTIPLE_CMD_PARSER_VERSION
#define TEST_MULTIPLE_CMD_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  char ** string_arg;	/* string option (default='foo').  */
  char ** string_orig;	/* string option original value given at command line.  */
  int string_min; /* string option's minimum occurreces */
  int string_max; /* string option's maximum occurreces */
  const char *string_help; /* string option help description.  */
  int* int_arg;	/* int option.  */
  char ** int_orig;	/* int option original value given at command line.  */
  int int_min; /* int option's minimum occurreces */
  int int_max; /* int option's maximum occurreces */
  const char *int_help; /* int option help description.  */
  short* short_arg;	/* short option.  */
  char ** short_orig;	/* short option original value given at command line.  */
  int short_min; /* short option's minimum occurreces */
  int short_max; /* short option's maximum occurreces */
  const char *short_help; /* short option help description.  */
  long* long_arg;	/* long option.  */
  char ** long_orig;	/* long option original value given at command line.  */
  int long_min; /* long option's minimum occurreces */
  int long_max; /* long option's maximum occurreces */
  const char *long_help; /* long option help description.  */
  char ** limited_arg;	/* limited multiple option.  */
  char ** limited_orig;	/* limited multiple option original value given at command line.  */
  int limited_min; /* limited multiple option's minimum occurreces */
  int limited_max; /* limited multiple option's maximum occurreces */
  const char *limited_help; /* limited multiple option help description.  */
  char ** limited_interval_arg;	/* limited multiple option (with interval).  */
  char ** limited_interval_orig;	/* limited multiple option (with interval) original value given at command line.  */
  int limited_interval_min; /* limited multiple option (with interval)'s minimum occurreces */
  int limited_interval_max; /* limited multiple option (with interval)'s maximum occurreces */
  const char *limited_interval_help; /* limited multiple option (with interval) help description.  */
  char ** big_limited_interval_arg;	/* limited multiple option (with interval).  */
  char ** big_limited_interval_orig;	/* limited multiple option (with interval) original value given at command line.  */
  int big_limited_interval_min; /* limited multiple option (with interval)'s minimum occurreces */
  int big_limited_interval_max; /* limited multiple option (with interval)'s maximum occurreces */
  const char *big_limited_interval_help; /* limited multiple option (with interval) help description.  */
  char ** limited_open_right_arg;	/* limited multiple option (with interval right open).  */
  char ** limited_open_right_orig;	/* limited multiple option (with interval right open) original value given at command line.  */
  int limited_open_right_min; /* limited multiple option (with interval right open)'s minimum occurreces */
  int limited_open_right_max; /* limited multiple option (with interval right open)'s maximum occurreces */
  const char *limited_open_right_help; /* limited multiple option (with interval right open) help description.  */
  char ** limited_open_left_arg;	/* limited multiple option (with interval left open).  */
  char ** limited_open_left_orig;	/* limited multiple option (with interval left open) original value given at command line.  */
  int limited_open_left_min; /* limited multiple option (with interval left open)'s minimum occurreces */
  int limited_open_left_max; /* limited multiple option (with interval left open)'s maximum occurreces */
  const char *limited_open_left_help; /* limited multiple option (with interval left open) help description.  */
  float* float_arg;	/* float option (default='15000').  */
  char ** float_orig;	/* float option original value given at command line.  */
  int float_min; /* float option's minimum occurreces */
  int float_max; /* float option's maximum occurreces */
  const char *float_help; /* float option help description.  */
  char ** no_short_opt_arg;	/* string option with no short.  */
  char ** no_short_opt_orig;	/* string option with no short original value given at command line.  */
  int no_short_opt_min; /* string option with no short's minimum occurreces */
  int no_short_opt_max; /* string option with no short's maximum occurreces */
  const char *no_short_opt_help; /* string option with no short help description.  */
  int noarg_min; /* multiple option with no arg's minimum occurreces */
  int noarg_max; /* multiple option with no arg's maximum occurreces */
  const char *noarg_help; /* multiple option with no arg help description.  */
  int noarg_noshort_min; /* multiple option with no arg and no short's minimum occurreces */
  int noarg_noshort_max; /* multiple option with no arg and no short's maximum occurreces */
  const char *noarg_noshort_help; /* multiple option with no arg and no short help description.  */
  char ** optarg_arg;	/* multi with optional args.  */
  char ** optarg_orig;	/* multi with optional args original value given at command line.  */
  int optarg_min; /* multi with optional args's minimum occurreces */
  int optarg_max; /* multi with optional args's maximum occurreces */
  const char *optarg_help; /* multi with optional args help description.  */
  char ** optarg_noshort_arg;	/* multi with optional args and no short.  */
  char ** optarg_noshort_orig;	/* multi with optional args and no short original value given at command line.  */
  int optarg_noshort_min; /* multi with optional args and no short's minimum occurreces */
  int optarg_noshort_max; /* multi with optional args and no short's maximum occurreces */
  const char *optarg_noshort_help; /* multi with optional args and no short help description.  */
  char * file_save_arg;	/* save the passed options into a file.  */
  char * file_save_orig;	/* save the passed options into a file original value given at command line.  */
  const char *file_save_help; /* save the passed options into a file help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  unsigned int string_given ;	/* Whether string was given.  */
  unsigned int int_given ;	/* Whether int was given.  */
  unsigned int short_given ;	/* Whether short was given.  */
  unsigned int long_given ;	/* Whether long was given.  */
  unsigned int limited_given ;	/* Whether limited was given.  */
  unsigned int limited_interval_given ;	/* Whether limited-interval was given.  */
  unsigned int big_limited_interval_given ;	/* Whether big-limited-interval was given.  */
  unsigned int limited_open_right_given ;	/* Whether limited-open-right was given.  */
  unsigned int limited_open_left_given ;	/* Whether limited-open-left was given.  */
  unsigned int float_given ;	/* Whether float was given.  */
  unsigned int no_short_opt_given ;	/* Whether no-short-opt was given.  */
  unsigned int noarg_given ;	/* Whether noarg was given.  */
  unsigned int noarg_noshort_given ;	/* Whether noarg-noshort was given.  */
  unsigned int optarg_given ;	/* Whether optarg was given.  */
  unsigned int optarg_noshort_given ;	/* Whether optarg-noshort was given.  */
  int file_save_given ;	/* Whether file-save was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int test_multiple_cmd_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int test_multiple_cmd_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int test_multiple_cmd_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void test_multiple_cmd_parser_print_help(void);
void test_multiple_cmd_parser_print_version(void);

void test_multiple_cmd_parser_init (struct gengetopt_args_info *args_info);
void test_multiple_cmd_parser_free (struct gengetopt_args_info *args_info);

int test_multiple_cmd_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TEST_MULTIPLE_CMD_H */
