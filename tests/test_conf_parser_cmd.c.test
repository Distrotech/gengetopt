/*
  File autogenerated by gengetopt 
  generated with the following command:
  ../src/gengetopt --gen-version --input=../../tests/test_conf_parser_cmd.ggoconf --func-name=test_conf_parser_cmd_parser --file-name=test_conf_parser_cmd --unamed-opt=OTHER NAMES --conf-parser --arg-struct-name=my_args_info --no-handle-error 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "test_conf_parser_cmd.h"

const char *my_args_info_purpose = "";

const char *my_args_info_usage = "Usage: test_conf_parser [OPTIONS]... [OTHER NAMES]...";

const char *my_args_info_versiontext = "";

const char *my_args_info_description = "";

const char *my_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "  -V, --version                 Print version and exit",
  "\n Group: grp1\n  an option of this group is required",
  "  -a, --opta=STRING             string a",
  "  -b, --optb=STRING             string b",
  "\n Group: my grp2",
  "      --optc                    string c",
  "  -C, --optd                    string d",
  "  -s, --string=STRING           string option",
  "  -i, --int=INT                 int option",
  "  -S, --short=SHORT             short option",
  "  -l, --long=LONG               long option",
  "  -f, --float=FLOAT             float option",
  "  -d, --double=DOUBLE           double option",
  "  -D, --longdouble=LONGDOUBLE   longdouble option",
  "  -L, --longlong=LONGLONG       longlong option",
  "  -F, --flag                    flag option  (default=on)",
  "  -u, --function                function option",
  "      --no-short                no short option",
  "  -r, --required=STRING         required option",
  "  -c, --conf-file=STRING        config file  (default=`test_conf.conf')",
  "  -M, --multi-string=STRING     multiple string option",
  "      --multi-string-def=STRING multiple string option with default\n                                  (default=`this default')",
  "  -n, --noarg                   multiple option with no arg",
  "      --noarg-noshort           multiple option with no arg and no short",
  "      --opt-arg[=STRING]        option with optional arg",
  "      --file-save=STRING        save the passed options into a file",
    0
};

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
  , ARG_INT
  , ARG_SHORT
  , ARG_LONG
  , ARG_FLOAT
  , ARG_DOUBLE
  , ARG_LONGDOUBLE
  , ARG_LONGLONG
} test_conf_parser_cmd_parser_arg_type;

static
void clear_given (struct my_args_info *args_info);
static
void clear_args (struct my_args_info *args_info);

static int
test_conf_parser_cmd_parser_internal (int argc, char **argv, struct my_args_info *args_info,
                        struct test_conf_parser_cmd_parser_params *params, const char *additional_error);

static int
test_conf_parser_cmd_parser_required2 (struct my_args_info *args_info, const char *prog_name, const char *additional_error);
struct line_list
{
  char * string_arg;
  struct line_list * next;
};

static struct line_list *cmd_line_list = 0;
static struct line_list *cmd_line_list_tmp = 0;

static void
free_cmd_list(void)
{
  /* free the list of a previous call */
  if (cmd_line_list)
    {
      while (cmd_line_list) {
        cmd_line_list_tmp = cmd_line_list;
        cmd_line_list = cmd_line_list->next;
        free (cmd_line_list_tmp->string_arg);
        free (cmd_line_list_tmp);
      }
    }
}


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct my_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->opta_given = 0 ;
  args_info->optb_given = 0 ;
  args_info->optc_given = 0 ;
  args_info->optd_given = 0 ;
  args_info->string_given = 0 ;
  args_info->int_given = 0 ;
  args_info->short_given = 0 ;
  args_info->long_given = 0 ;
  args_info->float_given = 0 ;
  args_info->double_given = 0 ;
  args_info->longdouble_given = 0 ;
  args_info->longlong_given = 0 ;
  args_info->flag_given = 0 ;
  args_info->function_given = 0 ;
  args_info->no_short_given = 0 ;
  args_info->required_given = 0 ;
  args_info->conf_file_given = 0 ;
  args_info->multi_string_given = 0 ;
  args_info->multi_string_def_given = 0 ;
  args_info->noarg_given = 0 ;
  args_info->noarg_noshort_given = 0 ;
  args_info->opt_arg_given = 0 ;
  args_info->file_save_given = 0 ;
  args_info->grp1_group_counter = 0 ;
  args_info->my_grp2_group_counter = 0 ;
}

static
void clear_args (struct my_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->opta_arg = NULL;
  args_info->opta_orig = NULL;
  args_info->optb_arg = NULL;
  args_info->optb_orig = NULL;
  args_info->string_arg = NULL;
  args_info->string_orig = NULL;
  args_info->int_orig = NULL;
  args_info->short_orig = NULL;
  args_info->long_orig = NULL;
  args_info->float_orig = NULL;
  args_info->double_orig = NULL;
  args_info->longdouble_orig = NULL;
  args_info->longlong_orig = NULL;
  args_info->flag_flag = 1;
  args_info->required_arg = NULL;
  args_info->required_orig = NULL;
  args_info->conf_file_arg = gengetopt_strdup ("test_conf.conf");
  args_info->conf_file_orig = NULL;
  args_info->multi_string_arg = NULL;
  args_info->multi_string_orig = NULL;
  args_info->multi_string_def_arg = NULL;
  args_info->multi_string_def_orig = NULL;
  args_info->opt_arg_arg = NULL;
  args_info->opt_arg_orig = NULL;
  args_info->file_save_arg = NULL;
  args_info->file_save_orig = NULL;
  
}

static
void init_args_info(struct my_args_info *args_info)
{


  args_info->help_help = my_args_info_help[0] ;
  args_info->version_help = my_args_info_help[1] ;
  args_info->opta_help = my_args_info_help[3] ;
  args_info->optb_help = my_args_info_help[4] ;
  args_info->optc_help = my_args_info_help[6] ;
  args_info->optd_help = my_args_info_help[7] ;
  args_info->string_help = my_args_info_help[8] ;
  args_info->int_help = my_args_info_help[9] ;
  args_info->short_help = my_args_info_help[10] ;
  args_info->long_help = my_args_info_help[11] ;
  args_info->float_help = my_args_info_help[12] ;
  args_info->double_help = my_args_info_help[13] ;
  args_info->longdouble_help = my_args_info_help[14] ;
  args_info->longlong_help = my_args_info_help[15] ;
  args_info->flag_help = my_args_info_help[16] ;
  args_info->function_help = my_args_info_help[17] ;
  args_info->no_short_help = my_args_info_help[18] ;
  args_info->required_help = my_args_info_help[19] ;
  args_info->conf_file_help = my_args_info_help[20] ;
  args_info->multi_string_help = my_args_info_help[21] ;
  args_info->multi_string_min = 0;
  args_info->multi_string_max = 0;
  args_info->multi_string_def_help = my_args_info_help[22] ;
  args_info->multi_string_def_min = 0;
  args_info->multi_string_def_max = 0;
  args_info->noarg_help = my_args_info_help[23] ;
  args_info->noarg_min = 0;
  args_info->noarg_max = 0;
  args_info->noarg_noshort_help = my_args_info_help[24] ;
  args_info->noarg_noshort_min = 0;
  args_info->noarg_noshort_max = 0;
  args_info->opt_arg_help = my_args_info_help[25] ;
  args_info->file_save_help = my_args_info_help[26] ;
  
}

void
test_conf_parser_cmd_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(TEST_CONF_PARSER_CMD_PARSER_PACKAGE_NAME) ? TEST_CONF_PARSER_CMD_PARSER_PACKAGE_NAME : TEST_CONF_PARSER_CMD_PARSER_PACKAGE),
     TEST_CONF_PARSER_CMD_PARSER_VERSION);

  if (strlen(my_args_info_versiontext) > 0)
    printf("\n%s\n", my_args_info_versiontext);
}

static void print_help_common(void) {
  test_conf_parser_cmd_parser_print_version ();

  if (strlen(my_args_info_purpose) > 0)
    printf("\n%s\n", my_args_info_purpose);

  if (strlen(my_args_info_usage) > 0)
    printf("\n%s\n", my_args_info_usage);

  printf("\n");

  if (strlen(my_args_info_description) > 0)
    printf("%s\n\n", my_args_info_description);
}

void
test_conf_parser_cmd_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (my_args_info_help[i])
    printf("%s\n", my_args_info_help[i++]);
}

void
test_conf_parser_cmd_parser_init (struct my_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = 0;
  args_info->inputs_num = 0;
}

void
test_conf_parser_cmd_parser_params_init(struct test_conf_parser_cmd_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct test_conf_parser_cmd_parser_params *
test_conf_parser_cmd_parser_params_create(void)
{
  struct test_conf_parser_cmd_parser_params *params = 
    (struct test_conf_parser_cmd_parser_params *)malloc(sizeof(struct test_conf_parser_cmd_parser_params));
  test_conf_parser_cmd_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    int int_arg;
    short short_arg;
    long long_arg;
    float float_arg;
    double double_arg;
    long double longdouble_arg;
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
    long long int longlong_arg;
#else
    long longlong_arg;
#endif
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}


static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
test_conf_parser_cmd_parser_release (struct my_args_info *args_info)
{
  unsigned int i;
  free_string_field (&(args_info->opta_arg));
  free_string_field (&(args_info->opta_orig));
  free_string_field (&(args_info->optb_arg));
  free_string_field (&(args_info->optb_orig));
  free_string_field (&(args_info->string_arg));
  free_string_field (&(args_info->string_orig));
  free_string_field (&(args_info->int_orig));
  free_string_field (&(args_info->short_orig));
  free_string_field (&(args_info->long_orig));
  free_string_field (&(args_info->float_orig));
  free_string_field (&(args_info->double_orig));
  free_string_field (&(args_info->longdouble_orig));
  free_string_field (&(args_info->longlong_orig));
  free_string_field (&(args_info->required_arg));
  free_string_field (&(args_info->required_orig));
  free_string_field (&(args_info->conf_file_arg));
  free_string_field (&(args_info->conf_file_orig));
  free_multiple_string_field (args_info->multi_string_given, &(args_info->multi_string_arg), &(args_info->multi_string_orig));
  free_multiple_string_field (args_info->multi_string_def_given, &(args_info->multi_string_def_arg), &(args_info->multi_string_def_orig));
  free_string_field (&(args_info->opt_arg_arg));
  free_string_field (&(args_info->opt_arg_orig));
  free_string_field (&(args_info->file_save_arg));
  free_string_field (&(args_info->file_save_orig));
  
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);

  if (args_info->inputs_num)
    free (args_info->inputs);

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
test_conf_parser_cmd_parser_dump(FILE *outfile, struct my_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", TEST_CONF_PARSER_CMD_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  if (args_info->opta_given)
    write_into_file(outfile, "opta", args_info->opta_orig, 0);
  if (args_info->optb_given)
    write_into_file(outfile, "optb", args_info->optb_orig, 0);
  if (args_info->optc_given)
    write_into_file(outfile, "optc", 0, 0 );
  if (args_info->optd_given)
    write_into_file(outfile, "optd", 0, 0 );
  if (args_info->string_given)
    write_into_file(outfile, "string", args_info->string_orig, 0);
  if (args_info->int_given)
    write_into_file(outfile, "int", args_info->int_orig, 0);
  if (args_info->short_given)
    write_into_file(outfile, "short", args_info->short_orig, 0);
  if (args_info->long_given)
    write_into_file(outfile, "long", args_info->long_orig, 0);
  if (args_info->float_given)
    write_into_file(outfile, "float", args_info->float_orig, 0);
  if (args_info->double_given)
    write_into_file(outfile, "double", args_info->double_orig, 0);
  if (args_info->longdouble_given)
    write_into_file(outfile, "longdouble", args_info->longdouble_orig, 0);
  if (args_info->longlong_given)
    write_into_file(outfile, "longlong", args_info->longlong_orig, 0);
  if (args_info->flag_given)
    write_into_file(outfile, "flag", 0, 0 );
  if (args_info->function_given)
    write_into_file(outfile, "function", 0, 0 );
  if (args_info->no_short_given)
    write_into_file(outfile, "no-short", 0, 0 );
  if (args_info->required_given)
    write_into_file(outfile, "required", args_info->required_orig, 0);
  if (args_info->conf_file_given)
    write_into_file(outfile, "conf-file", args_info->conf_file_orig, 0);
  write_multiple_into_file(outfile, args_info->multi_string_given, "multi-string", args_info->multi_string_orig, 0);
  write_multiple_into_file(outfile, args_info->multi_string_def_given, "multi-string-def", args_info->multi_string_def_orig, 0);
  write_multiple_into_file(outfile, args_info->noarg_given, "noarg", 0, 0);
  write_multiple_into_file(outfile, args_info->noarg_noshort_given, "noarg-noshort", 0, 0);
  if (args_info->opt_arg_given)
    write_into_file(outfile, "opt-arg", args_info->opt_arg_orig, 0);
  if (args_info->file_save_given)
    write_into_file(outfile, "file-save", args_info->file_save_orig, 0);
  

  i = EXIT_SUCCESS;
  return i;
}

int
test_conf_parser_cmd_parser_file_save(const char *filename, struct my_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", TEST_CONF_PARSER_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = test_conf_parser_cmd_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
test_conf_parser_cmd_parser_free (struct my_args_info *args_info)
{
  test_conf_parser_cmd_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error_occurred = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error_occurred = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error_occurred = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error_occurred = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error_occurred = 1;
            }
        }
    }
    
  return error_occurred;
}
static void
reset_group_grp1(struct my_args_info *args_info)
{
  if (! args_info->grp1_group_counter)
    return;
  
  args_info->opta_given = 0 ;
  free_string_field (&(args_info->opta_arg));
  free_string_field (&(args_info->opta_orig));
  args_info->optb_given = 0 ;
  free_string_field (&(args_info->optb_arg));
  free_string_field (&(args_info->optb_orig));

  args_info->grp1_group_counter = 0;
}

static void
reset_group_my_grp2(struct my_args_info *args_info)
{
  if (! args_info->my_grp2_group_counter)
    return;
  
  args_info->optc_given = 0 ;
  args_info->optd_given = 0 ;

  args_info->my_grp2_group_counter = 0;
}

int
test_conf_parser_cmd_parser (int argc, char **argv, struct my_args_info *args_info)
{
  return test_conf_parser_cmd_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
test_conf_parser_cmd_parser_ext (int argc, char **argv, struct my_args_info *args_info,
                   struct test_conf_parser_cmd_parser_params *params)
{
  int result;
  result = test_conf_parser_cmd_parser_internal (argc, argv, args_info, params, 0);

  return result;
}

int
test_conf_parser_cmd_parser2 (int argc, char **argv, struct my_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct test_conf_parser_cmd_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = test_conf_parser_cmd_parser_internal (argc, argv, args_info, &params, 0);

  return result;
}

int
test_conf_parser_cmd_parser_required (struct my_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (test_conf_parser_cmd_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  return result;
}

int
test_conf_parser_cmd_parser_required2 (struct my_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error_occurred = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (! args_info->required_given)
    {
      fprintf (stderr, "%s: '--required' ('-r') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  
  if (check_multiple_option_occurrences(prog_name, args_info->multi_string_given, args_info->multi_string_min, args_info->multi_string_max, "'--multi-string' ('-M')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->multi_string_def_given, args_info->multi_string_def_min, args_info->multi_string_def_max, "'--multi-string-def'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->noarg_given, args_info->noarg_min, args_info->noarg_max, "'--noarg' ('-n')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->noarg_noshort_given, args_info->noarg_noshort_min, args_info->noarg_noshort_max, "'--noarg-noshort'"))
     error_occurred = 1;
  
  if (args_info->grp1_group_counter == 0)
    {
      fprintf (stderr, "%s: %d options of group grp1 were given. One is required%s.\n", prog_name, args_info->grp1_group_counter, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  

  /* checks for dependences among options */

  return error_occurred;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see test_conf_parser_cmd_parser_params.check_ambiguity
 * @param override @see test_conf_parser_cmd_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               test_conf_parser_cmd_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_SHORT:
    if (val) *((short *)field) = (short)strtol (val, &stop_char, 0);
    break;
  case ARG_LONG:
    if (val) *((long *)field) = (long)strtol (val, &stop_char, 0);
    break;
  case ARG_FLOAT:
    if (val) *((float *)field) = (float)strtod (val, &stop_char);
    break;
  case ARG_DOUBLE:
    if (val) *((double *)field) = strtod (val, &stop_char);
    break;
  case ARG_LONGDOUBLE:
    if (val) *((long double *)field) = (long double)strtod (val, &stop_char);
    break;
  case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
    if (val) *((long long int*)field) = (long long int) strtoll (val, &stop_char, 0);
#else
    if (val) *((long *)field) = (long)strtol (val, &stop_char, 0);
#endif
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_SHORT:
  case ARG_LONG:
  case ARG_FLOAT:
  case ARG_DOUBLE:
  case ARG_LONGDOUBLE:
  case ARG_LONGLONG:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               test_conf_parser_cmd_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               test_conf_parser_cmd_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_INT:
      *((int **)field) = (int *)realloc (*((int **)field), (field_given + prev_given) * sizeof (int)); break;
    case ARG_SHORT:
      *((short **)field) = (short *)realloc (*((short **)field), (field_given + prev_given) * sizeof (short)); break;
    case ARG_LONG:
      *((long **)field) = (long *)realloc (*((long **)field), (field_given + prev_given) * sizeof (long)); break;
    case ARG_FLOAT:
      *((float **)field) = (float *)realloc (*((float **)field), (field_given + prev_given) * sizeof (float)); break;
    case ARG_DOUBLE:
      *((double **)field) = (double *)realloc (*((double **)field), (field_given + prev_given) * sizeof (double)); break;
    case ARG_LONGDOUBLE:
      *((long double **)field) = (long double *)realloc (*((long double **)field), (field_given + prev_given) * sizeof (long double)); break;
    case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
      *((long long int **)field) = (long long int *)realloc (*((long long int **)field), (field_given + prev_given) * sizeof (long long int)); break;
#else
      *((long **)field) = (long *)realloc (*((long **)field), (field_given + prev_given) * sizeof (long)); break;
#endif
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_INT:
          (*((int **)field))[i + field_given] = tmp->arg.int_arg; break;
        case ARG_SHORT:
          (*((short **)field))[i + field_given] = tmp->arg.short_arg; break;
        case ARG_LONG:
          (*((long **)field))[i + field_given] = tmp->arg.long_arg; break;
        case ARG_FLOAT:
          (*((float **)field))[i + field_given] = tmp->arg.float_arg; break;
        case ARG_DOUBLE:
          (*((double **)field))[i + field_given] = tmp->arg.double_arg; break;
        case ARG_LONGDOUBLE:
          (*((long double **)field))[i + field_given] = tmp->arg.longdouble_arg; break;
        case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
          (*((long long int **)field))[i + field_given] = tmp->arg.longlong_arg; break;
#else
          (*((long **)field))[i + field_given] = tmp->arg.longlong_arg; break;
#endif
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_INT:
        if (! *((int **)field)) {
          *((int **)field) = (int *)malloc (sizeof (int));
          (*((int **)field))[0] = default_value->int_arg; 
        }
        break;
      case ARG_SHORT:
        if (! *((short **)field)) {
          *((short **)field) = (short *)malloc (sizeof (short));
          (*((short **)field))[0] = default_value->short_arg;
        }
        break;
      case ARG_LONG:
        if (! *((long **)field)) {
          *((long **)field) = (long *)malloc (sizeof (long));
          (*((long **)field))[0] = default_value->long_arg;
        }
        break;
      case ARG_FLOAT:
        if (! *((float **)field)) {
          *((float **)field) = (float *)malloc (sizeof (float));
          (*((float **)field))[0] = default_value->float_arg;
        }
        break;
      case ARG_DOUBLE:
        if (! *((double **)field)) {
          *((double **)field) = (double *)malloc (sizeof (double));
          (*((double **)field))[0] = default_value->double_arg;
        }
        break;
      case ARG_LONGDOUBLE:
        if (! *((long double **)field)) {
          *((long double **)field) = (long double *)malloc (sizeof (long double));
          (*((long double **)field))[0] = default_value->longdouble_arg;
        }
        break;
      case ARG_LONGLONG:
#if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
        if (! *((long long int **)field)) {
          *((long long int **)field) = (long long int *)malloc (sizeof (long long int));
          (*((long long int **)field))[0] = default_value->longlong_arg;
        }
#else
        if (! *((long **)field)) {
          *((long **)field) = (long *)malloc (sizeof (long));
          (*((long **)field))[0] = default_value->longlong_arg;
        }
#endif
        break;
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

int
test_conf_parser_cmd_parser_internal (
  int argc, char **argv, struct my_args_info *args_info,
                        struct test_conf_parser_cmd_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  union generic_value multiple_default_value;

  struct generic_list * multi_string_list = NULL;
  struct generic_list * multi_string_def_list = NULL;
  int error_occurred = 0;
  struct my_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    test_conf_parser_cmd_parser_init (args_info);

  test_conf_parser_cmd_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "opta",	1, NULL, 'a' },
        { "optb",	1, NULL, 'b' },
        { "optc",	0, NULL, 0 },
        { "optd",	0, NULL, 'C' },
        { "string",	1, NULL, 's' },
        { "int",	1, NULL, 'i' },
        { "short",	1, NULL, 'S' },
        { "long",	1, NULL, 'l' },
        { "float",	1, NULL, 'f' },
        { "double",	1, NULL, 'd' },
        { "longdouble",	1, NULL, 'D' },
        { "longlong",	1, NULL, 'L' },
        { "flag",	0, NULL, 'F' },
        { "function",	0, NULL, 'u' },
        { "no-short",	0, NULL, 0 },
        { "required",	1, NULL, 'r' },
        { "conf-file",	1, NULL, 'c' },
        { "multi-string",	1, NULL, 'M' },
        { "multi-string-def",	1, NULL, 0 },
        { "noarg",	0, NULL, 'n' },
        { "noarg-noshort",	0, NULL, 0 },
        { "opt-arg",	2, NULL, 0 },
        { "file-save",	1, NULL, 0 },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hVa:b:Cs:i:S:l:f:d:D:L:Fur:c:M:n", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          test_conf_parser_cmd_parser_print_help ();
          test_conf_parser_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          test_conf_parser_cmd_parser_print_version ();
          test_conf_parser_cmd_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'a':	/* string a.  */
        
          if (args_info->grp1_group_counter && override)
            reset_group_grp1 (args_info);
          args_info->grp1_group_counter += 1;
        
          if (update_arg( (void *)&(args_info->opta_arg), 
               &(args_info->opta_orig), &(args_info->opta_given),
              &(local_args_info.opta_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "opta", 'a',
              additional_error))
            goto failure;
        
          break;
        case 'b':	/* string b.  */
        
          if (args_info->grp1_group_counter && override)
            reset_group_grp1 (args_info);
          args_info->grp1_group_counter += 1;
        
          if (update_arg( (void *)&(args_info->optb_arg), 
               &(args_info->optb_orig), &(args_info->optb_given),
              &(local_args_info.optb_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "optb", 'b',
              additional_error))
            goto failure;
        
          break;
        case 'C':	/* string d.  */
        
          if (args_info->my_grp2_group_counter && override)
            reset_group_my_grp2 (args_info);
          args_info->my_grp2_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->optd_given),
              &(local_args_info.optd_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "optd", 'C',
              additional_error))
            goto failure;
        
          break;
        case 's':	/* string option.  */
        
        
          if (update_arg( (void *)&(args_info->string_arg), 
               &(args_info->string_orig), &(args_info->string_given),
              &(local_args_info.string_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "string", 's',
              additional_error))
            goto failure;
        
          break;
        case 'i':	/* int option.  */
        
        
          if (update_arg( (void *)&(args_info->int_arg), 
               &(args_info->int_orig), &(args_info->int_given),
              &(local_args_info.int_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "int", 'i',
              additional_error))
            goto failure;
        
          break;
        case 'S':	/* short option.  */
        
        
          if (update_arg( (void *)&(args_info->short_arg), 
               &(args_info->short_orig), &(args_info->short_given),
              &(local_args_info.short_given), optarg, 0, 0, ARG_SHORT,
              check_ambiguity, override, 0, 0,
              "short", 'S',
              additional_error))
            goto failure;
        
          break;
        case 'l':	/* long option.  */
        
        
          if (update_arg( (void *)&(args_info->long_arg), 
               &(args_info->long_orig), &(args_info->long_given),
              &(local_args_info.long_given), optarg, 0, 0, ARG_LONG,
              check_ambiguity, override, 0, 0,
              "long", 'l',
              additional_error))
            goto failure;
        
          break;
        case 'f':	/* float option.  */
        
        
          if (update_arg( (void *)&(args_info->float_arg), 
               &(args_info->float_orig), &(args_info->float_given),
              &(local_args_info.float_given), optarg, 0, 0, ARG_FLOAT,
              check_ambiguity, override, 0, 0,
              "float", 'f',
              additional_error))
            goto failure;
        
          break;
        case 'd':	/* double option.  */
        
        
          if (update_arg( (void *)&(args_info->double_arg), 
               &(args_info->double_orig), &(args_info->double_given),
              &(local_args_info.double_given), optarg, 0, 0, ARG_DOUBLE,
              check_ambiguity, override, 0, 0,
              "double", 'd',
              additional_error))
            goto failure;
        
          break;
        case 'D':	/* longdouble option.  */
        
        
          if (update_arg( (void *)&(args_info->longdouble_arg), 
               &(args_info->longdouble_orig), &(args_info->longdouble_given),
              &(local_args_info.longdouble_given), optarg, 0, 0, ARG_LONGDOUBLE,
              check_ambiguity, override, 0, 0,
              "longdouble", 'D',
              additional_error))
            goto failure;
        
          break;
        case 'L':	/* longlong option.  */
        
        
          if (update_arg( (void *)&(args_info->longlong_arg), 
               &(args_info->longlong_orig), &(args_info->longlong_given),
              &(local_args_info.longlong_given), optarg, 0, 0, ARG_LONGLONG,
              check_ambiguity, override, 0, 0,
              "longlong", 'L',
              additional_error))
            goto failure;
        
          break;
        case 'F':	/* flag option.  */
        
        
          if (update_arg((void *)&(args_info->flag_flag), 0, &(args_info->flag_given),
              &(local_args_info.flag_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "flag", 'F',
              additional_error))
            goto failure;
        
          break;
        case 'u':	/* function option.  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->function_given),
              &(local_args_info.function_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "function", 'u',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* required option.  */
        
        
          if (update_arg( (void *)&(args_info->required_arg), 
               &(args_info->required_orig), &(args_info->required_given),
              &(local_args_info.required_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "required", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* config file.  */
        
        
          if (update_arg( (void *)&(args_info->conf_file_arg), 
               &(args_info->conf_file_orig), &(args_info->conf_file_given),
              &(local_args_info.conf_file_given), optarg, 0, "test_conf.conf", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "conf-file", 'c',
              additional_error))
            goto failure;
        
          break;
        case 'M':	/* multiple string option.  */
        
          if (update_multiple_arg_temp(&multi_string_list, 
              &(local_args_info.multi_string_given), optarg, 0, 0, ARG_STRING,
              "multi-string", 'M',
              additional_error))
            goto failure;
        
          break;
        case 'n':	/* multiple option with no arg.  */
        
          local_args_info.noarg_given++;
        
          break;

        case 0:	/* Long option with no short option */
          /* string c.  */
          if (strcmp (long_options[option_index].name, "optc") == 0)
          {
          
            if (args_info->my_grp2_group_counter && override)
              reset_group_my_grp2 (args_info);
            args_info->my_grp2_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->optc_given),
                &(local_args_info.optc_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "optc", '-',
                additional_error))
              goto failure;
          
          }
          /* no short option.  */
          else if (strcmp (long_options[option_index].name, "no-short") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->no_short_given),
                &(local_args_info.no_short_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "no-short", '-',
                additional_error))
              goto failure;
          
          }
          /* multiple string option with default.  */
          else if (strcmp (long_options[option_index].name, "multi-string-def") == 0)
          {
          
            if (update_multiple_arg_temp(&multi_string_def_list, 
                &(local_args_info.multi_string_def_given), optarg, 0, "this default", ARG_STRING,
                "multi-string-def", '-',
                additional_error))
              goto failure;
          
          }
          /* multiple option with no arg and no short.  */
          else if (strcmp (long_options[option_index].name, "noarg-noshort") == 0)
          {
          
            local_args_info.noarg_noshort_given++;
          
          }
          /* option with optional arg.  */
          else if (strcmp (long_options[option_index].name, "opt-arg") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->opt_arg_arg), 
                 &(args_info->opt_arg_orig), &(args_info->opt_arg_given),
                &(local_args_info.opt_arg_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "opt-arg", '-',
                additional_error))
              goto failure;
          
          }
          /* save the passed options into a file.  */
          else if (strcmp (long_options[option_index].name, "file-save") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->file_save_arg), 
                 &(args_info->file_save_orig), &(args_info->file_save_given),
                &(local_args_info.file_save_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "file-save", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", TEST_CONF_PARSER_CMD_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */

  if (args_info->grp1_group_counter > 1)
    {
      fprintf (stderr, "%s: %d options of group grp1 were given. One is required%s.\n", argv[0], args_info->grp1_group_counter, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  
  if (args_info->my_grp2_group_counter > 1)
    {
      fprintf (stderr, "%s: %d options of group my grp2 were given. At most one is required%s.\n", argv[0], args_info->my_grp2_group_counter, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  

  update_multiple_arg((void *)&(args_info->multi_string_arg),
    &(args_info->multi_string_orig), args_info->multi_string_given,
    local_args_info.multi_string_given, 0,
    ARG_STRING, multi_string_list);
  multiple_default_value.default_string_arg = "this default";
  update_multiple_arg((void *)&(args_info->multi_string_def_arg),
    &(args_info->multi_string_def_orig), args_info->multi_string_def_given,
    local_args_info.multi_string_def_given, &multiple_default_value,
    ARG_STRING, multi_string_def_list);

  args_info->multi_string_given += local_args_info.multi_string_given;
  local_args_info.multi_string_given = 0;
  args_info->multi_string_def_given += local_args_info.multi_string_def_given;
  local_args_info.multi_string_def_given = 0;
  args_info->noarg_given += local_args_info.noarg_given;
  local_args_info.noarg_given = 0;
  args_info->noarg_noshort_given += local_args_info.noarg_noshort_given;
  local_args_info.noarg_noshort_given = 0;
  
  if (check_required)
    {
      error_occurred += test_conf_parser_cmd_parser_required2 (args_info, argv[0], additional_error);
    }

  test_conf_parser_cmd_parser_release (&local_args_info);

  if ( error_occurred )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  free_list (multi_string_list, 1 );
  free_list (multi_string_def_list, 1 );
  
  test_conf_parser_cmd_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}

#ifndef CONFIG_FILE_LINE_SIZE
#define CONFIG_FILE_LINE_SIZE 2048
#endif
#define ADDITIONAL_ERROR " in configuration file "

#define CONFIG_FILE_LINE_BUFFER_SIZE (CONFIG_FILE_LINE_SIZE+3)
/* 3 is for "--" and "=" */

static int
_test_conf_parser_cmd_parser_configfile (const char *filename, int *my_argc)
{
  FILE* file;
  char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
  char linebuf[CONFIG_FILE_LINE_SIZE];
  int line_num = 0;
  int result = 0, equal;
  char *fopt, *farg;
  char *str_index;
  size_t len, next_token;
  char delimiter;

  if ((file = fopen(filename, "r")) == 0)
    {
      fprintf (stderr, "%s: Error opening configuration file '%s'\n",
               TEST_CONF_PARSER_CMD_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != 0)
    {
      ++line_num;
      my_argv[0] = '\0';
      len = strlen(linebuf);
      if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1))
        {
          fprintf (stderr, "%s:%s:%d: Line too long in configuration file\n",
                   TEST_CONF_PARSER_CMD_PARSER_PACKAGE, filename, line_num);
          result = EXIT_FAILURE;
          break;
        }

      /* find first non-whitespace character in the line */
      next_token = strspn (linebuf, " \t\r\n");
      str_index  = linebuf + next_token;

      if ( str_index[0] == '\0' || str_index[0] == '#')
        continue; /* empty line or comment line is skipped */

      fopt = str_index;

      /* truncate fopt at the end of the first non-valid character */
      next_token = strcspn (fopt, " \t\r\n=");

      if (fopt[next_token] == '\0') /* the line is over */
        {
          farg  = 0;
          equal = 0;
          goto noarg;
        }

      /* remember if equal sign is present */
      equal = (fopt[next_token] == '=');
      fopt[next_token++] = '\0';

      /* advance pointers to the next token after the end of fopt */
      next_token += strspn (fopt + next_token, " \t\r\n");

      /* check for the presence of equal sign, and if so, skip it */
      if ( !equal )
        if ((equal = (fopt[next_token] == '=')))
          {
            next_token++;
            next_token += strspn (fopt + next_token, " \t\r\n");
          }
      str_index  += next_token;

      /* find argument */
      farg = str_index;
      if ( farg[0] == '\"' || farg[0] == '\'' )
        { /* quoted argument */
          str_index = strchr (++farg, str_index[0] ); /* skip opening quote */
          if (! str_index)
            {
              fprintf
                (stderr,
                 "%s:%s:%d: unterminated string in configuration file\n",
                 TEST_CONF_PARSER_CMD_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }
      else
        { /* read up the remaining part up to a delimiter */
          next_token = strcspn (farg, " \t\r\n#\'\"");
          str_index += next_token;
        }

      /* truncate farg at the delimiter and store it for further check */
      delimiter = *str_index, *str_index++ = '\0';

      /* everything but comment is illegal at the end of line */
      if (delimiter != '\0' && delimiter != '#')
        {
          str_index += strspn(str_index, " \t\r\n");
          if (*str_index != '\0' && *str_index != '#')
            {
              fprintf
                (stderr,
                 "%s:%s:%d: malformed string in configuration file\n",
                 TEST_CONF_PARSER_CMD_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }

    noarg:
      if (!strcmp(fopt,"include")) {
        if (farg && *farg) {
          result = _test_conf_parser_cmd_parser_configfile(farg, my_argc);
        } else {
          fprintf(stderr, "%s:%s:%d: include requires a filename argument.\n",
                  TEST_CONF_PARSER_CMD_PARSER_PACKAGE, filename, line_num);
        }
        continue;
      }
      len = strlen(fopt);
      strcat (my_argv, len > 1 ? "--" : "-");
      strcat (my_argv, fopt);
      if (len > 1 && ((farg && *farg) || equal))
        strcat (my_argv, "=");
      if (farg && *farg)
        strcat (my_argv, farg);
      ++(*my_argc);

      cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
      cmd_line_list_tmp->next = cmd_line_list;
      cmd_line_list = cmd_line_list_tmp;
      cmd_line_list->string_arg = gengetopt_strdup(my_argv);
    } /* while */

  if (file)
    fclose(file);
  return result;
}

int
test_conf_parser_cmd_parser_configfile (
  const char *filename,
                           struct my_args_info *args_info,
                           int override, int initialize, int check_required)
{
  struct test_conf_parser_cmd_parser_params params;

  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;
  
  return test_conf_parser_cmd_parser_config_file (filename, args_info, &params);
}

int
test_conf_parser_cmd_parser_config_file (const char *filename,
                           struct my_args_info *args_info,
                           struct test_conf_parser_cmd_parser_params *params)
{
  int i, result;
  int my_argc = 1;
  char **my_argv_arg;
  char *additional_error;

  /* store the program name */
  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
  cmd_line_list_tmp->next = cmd_line_list;
  cmd_line_list = cmd_line_list_tmp;
  cmd_line_list->string_arg = gengetopt_strdup (TEST_CONF_PARSER_CMD_PARSER_PACKAGE);

  result = _test_conf_parser_cmd_parser_configfile(filename, &my_argc);

  if (result != EXIT_FAILURE) {
    my_argv_arg = (char **) malloc((my_argc+1) * sizeof(char *));
    cmd_line_list_tmp = cmd_line_list;

    for (i = my_argc - 1; i >= 0; --i) {
      my_argv_arg[i] = cmd_line_list_tmp->string_arg;
      cmd_line_list_tmp = cmd_line_list_tmp->next;
    }

    my_argv_arg[my_argc] = 0;

    additional_error = (char *)malloc(strlen(filename) + strlen(ADDITIONAL_ERROR) + 1);
    strcpy (additional_error, ADDITIONAL_ERROR);
    strcat (additional_error, filename);
    result =
      test_conf_parser_cmd_parser_internal (my_argc, my_argv_arg, args_info,
                              params,
                              additional_error);

    free (additional_error);
    free (my_argv_arg);
  }

  free_cmd_list();
  return result;
}
